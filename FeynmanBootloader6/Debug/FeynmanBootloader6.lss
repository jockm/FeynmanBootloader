
FeynmanBootloader6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003200  00400000  00400000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000950  20000000  00403200  00020000  2**3
                  CONTENTS, ALLOC, LOAD, CODE
  2 .bss          000002bc  20000950  00403b50  00020950  2**2
                  ALLOC
  3 .stack        00003004  20000c0c  00403e0c  00020950  2**0
                  ALLOC
  4 .ARM.attributes 0000002e  00000000  00000000  00020950  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  0002097e  2**0
                  CONTENTS, READONLY
  6 .debug_info   0001ecef  00000000  00000000  000209d7  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00004252  00000000  00000000  0003f6c6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00008bc4  00000000  00000000  00043918  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000d78  00000000  00000000  0004c4dc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000dd0  00000000  00000000  0004d254  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  00018551  00000000  00000000  0004e024  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0001039f  00000000  00000000  00066575  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    0005aaaa  00000000  00000000  00076914  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  000020fc  00000000  00000000  000d13c0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00400000 <exception_table>:
  400000:	10 3c 00 20 29 2c 40 00 27 2c 40 00 27 2c 40 00     .<. ),@.',@.',@.
  400010:	27 2c 40 00 27 2c 40 00 27 2c 40 00 00 00 00 00     ',@.',@.',@.....
	...
  40002c:	27 2c 40 00 27 2c 40 00 00 00 00 00 27 2c 40 00     ',@.',@.....',@.
  40003c:	05 2d 40 00 27 2c 40 00 27 2c 40 00 27 2c 40 00     .-@.',@.',@.',@.
  40004c:	27 2c 40 00 27 2c 40 00 27 2c 40 00 27 2c 40 00     ',@.',@.',@.',@.
  40005c:	2d 2e 40 00 27 2c 40 00 27 2c 40 00 00 00 00 00     -.@.',@.',@.....
  40006c:	69 14 40 00 7d 14 40 00 27 2c 40 00 27 2c 40 00     i.@.}.@.',@.',@.
  40007c:	27 2c 40 00 27 2c 40 00 27 2c 40 00 27 2c 40 00     ',@.',@.',@.',@.
  40008c:	27 2c 40 00 27 2c 40 00 27 2c 40 00 27 2c 40 00     ',@.',@.',@.',@.
  40009c:	27 2c 40 00 27 2c 40 00 27 2c 40 00 27 2c 40 00     ',@.',@.',@.',@.
  4000ac:	27 2c 40 00 27 2c 40 00 27 2c 40 00 27 2c 40 00     ',@.',@.',@.',@.
	...
  4000fc:	27 2c 40 00 f5 1a 40 00 27 2c 40 00 00 00 00 00     ',@...@.',@.....
	...

00400148 <__do_global_dtors_aux>:
  400148:	b510      	push	{r4, lr}
  40014a:	4c05      	ldr	r4, [pc, #20]	; (400160 <__do_global_dtors_aux+0x18>)
  40014c:	7823      	ldrb	r3, [r4, #0]
  40014e:	b933      	cbnz	r3, 40015e <__do_global_dtors_aux+0x16>
  400150:	4b04      	ldr	r3, [pc, #16]	; (400164 <__do_global_dtors_aux+0x1c>)
  400152:	b113      	cbz	r3, 40015a <__do_global_dtors_aux+0x12>
  400154:	4804      	ldr	r0, [pc, #16]	; (400168 <__do_global_dtors_aux+0x20>)
  400156:	f3af 8000 	nop.w
  40015a:	2301      	movs	r3, #1
  40015c:	7023      	strb	r3, [r4, #0]
  40015e:	bd10      	pop	{r4, pc}
  400160:	20000950 	.word	0x20000950
  400164:	00000000 	.word	0x00000000
  400168:	00403200 	.word	0x00403200

0040016c <frame_dummy>:
  40016c:	4b0c      	ldr	r3, [pc, #48]	; (4001a0 <frame_dummy+0x34>)
  40016e:	b143      	cbz	r3, 400182 <frame_dummy+0x16>
  400170:	480c      	ldr	r0, [pc, #48]	; (4001a4 <frame_dummy+0x38>)
  400172:	490d      	ldr	r1, [pc, #52]	; (4001a8 <frame_dummy+0x3c>)
  400174:	b510      	push	{r4, lr}
  400176:	f3af 8000 	nop.w
  40017a:	480c      	ldr	r0, [pc, #48]	; (4001ac <frame_dummy+0x40>)
  40017c:	6803      	ldr	r3, [r0, #0]
  40017e:	b923      	cbnz	r3, 40018a <frame_dummy+0x1e>
  400180:	bd10      	pop	{r4, pc}
  400182:	480a      	ldr	r0, [pc, #40]	; (4001ac <frame_dummy+0x40>)
  400184:	6803      	ldr	r3, [r0, #0]
  400186:	b933      	cbnz	r3, 400196 <frame_dummy+0x2a>
  400188:	4770      	bx	lr
  40018a:	4b09      	ldr	r3, [pc, #36]	; (4001b0 <frame_dummy+0x44>)
  40018c:	2b00      	cmp	r3, #0
  40018e:	d0f7      	beq.n	400180 <frame_dummy+0x14>
  400190:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  400194:	4718      	bx	r3
  400196:	4b06      	ldr	r3, [pc, #24]	; (4001b0 <frame_dummy+0x44>)
  400198:	2b00      	cmp	r3, #0
  40019a:	d0f5      	beq.n	400188 <frame_dummy+0x1c>
  40019c:	4718      	bx	r3
  40019e:	bf00      	nop
  4001a0:	00000000 	.word	0x00000000
  4001a4:	00403200 	.word	0x00403200
  4001a8:	20000954 	.word	0x20000954
  4001ac:	00403200 	.word	0x00403200
  4001b0:	00000000 	.word	0x00000000

004001b4 <flash_init>:
 * \param ul_fws The number of wait states in cycle (no shift).
 *
 * \return 0 if successful; otherwise returns an error code.
 */
uint32_t flash_init(uint32_t ul_mode, uint32_t ul_fws)
{
  4001b4:	b508      	push	{r3, lr}
	efc_init(EFC, ul_mode, ul_fws);
  4001b6:	460a      	mov	r2, r1
  4001b8:	4601      	mov	r1, r0
  4001ba:	4802      	ldr	r0, [pc, #8]	; (4001c4 <flash_init+0x10>)
  4001bc:	4b02      	ldr	r3, [pc, #8]	; (4001c8 <flash_init+0x14>)
  4001be:	4798      	blx	r3
#ifdef EFC1
	efc_init(EFC1, ul_mode, ul_fws);
#endif

	return FLASH_RC_OK;
}
  4001c0:	2000      	movs	r0, #0
  4001c2:	bd08      	pop	{r3, pc}
  4001c4:	400e0a00 	.word	0x400e0a00
  4001c8:	004013d5 	.word	0x004013d5

004001cc <sam_ba_monitor_init>:
#ifdef CONF_UART_INTERFACE_SUPPORT
	if (com_interface == SAM_BA_INTERFACE_USART)
		ptr_monitor_if = (t_monitor_if*) &uart_if;
#endif
#ifdef CONF_USBCDC_INTERFACE_SUPPORT
	if (com_interface == SAM_BA_INTERFACE_USBCDC)
  4001cc:	b910      	cbnz	r0, 4001d4 <sam_ba_monitor_init+0x8>
		ptr_monitor_if = (t_monitor_if*) &usbcdc_if;
  4001ce:	4a02      	ldr	r2, [pc, #8]	; (4001d8 <sam_ba_monitor_init+0xc>)
  4001d0:	4b02      	ldr	r3, [pc, #8]	; (4001dc <sam_ba_monitor_init+0x10>)
  4001d2:	601a      	str	r2, [r3, #0]
  4001d4:	4770      	bx	lr
  4001d6:	bf00      	nop
  4001d8:	004031bc 	.word	0x004031bc
  4001dc:	20000be4 	.word	0x20000be4

004001e0 <sam_ba_putdata_term>:
 *
 * \param *data  Data pointer
 * \param length Length of the data
 */
void sam_ba_putdata_term(uint8_t* data, uint32_t length)
{
  4001e0:	b530      	push	{r4, r5, lr}
  4001e2:	b085      	sub	sp, #20
	uint8_t temp, buf[12], *data_ascii;
	uint32_t i, int_value;

	if (b_terminal_mode)
  4001e4:	4b21      	ldr	r3, [pc, #132]	; (40026c <sam_ba_putdata_term+0x8c>)
  4001e6:	781b      	ldrb	r3, [r3, #0]
  4001e8:	2b00      	cmp	r3, #0
  4001ea:	d039      	beq.n	400260 <sam_ba_putdata_term+0x80>
	{
		if (length == 4)
  4001ec:	2904      	cmp	r1, #4
  4001ee:	d008      	beq.n	400202 <sam_ba_putdata_term+0x22>
			int_value = *(uint32_t *) data;
		else if (length == 2)
  4001f0:	2902      	cmp	r1, #2
  4001f2:	d033      	beq.n	40025c <sam_ba_putdata_term+0x7c>
			int_value = *(uint16_t *) data;
		else
			int_value = *(uint8_t *) data;
  4001f4:	7800      	ldrb	r0, [r0, #0]

		data_ascii = buf + 2;
		data_ascii += length * 2 - 1;
  4001f6:	004d      	lsls	r5, r1, #1
  4001f8:	ab04      	add	r3, sp, #16
  4001fa:	195a      	adds	r2, r3, r5
  4001fc:	3a0b      	subs	r2, #11

		for (i = 0; i < length * 2; i++)
  4001fe:	b92d      	cbnz	r5, 40020c <sam_ba_putdata_term+0x2c>
  400200:	e012      	b.n	400228 <sam_ba_putdata_term+0x48>
			int_value = *(uint32_t *) data;
  400202:	6800      	ldr	r0, [r0, #0]
		data_ascii += length * 2 - 1;
  400204:	004d      	lsls	r5, r1, #1
  400206:	ab04      	add	r3, sp, #16
  400208:	195a      	adds	r2, r3, r5
  40020a:	3a0b      	subs	r2, #11
{
  40020c:	2400      	movs	r4, #0
		{
			temp = (uint8_t) (int_value & 0xf);
  40020e:	f000 030f 	and.w	r3, r0, #15

			if (temp <= 0x9)
  400212:	2b09      	cmp	r3, #9
				*data_ascii = temp | 0x30;
  400214:	bf94      	ite	ls
  400216:	f043 0330 	orrls.w	r3, r3, #48	; 0x30
			else
				*data_ascii = temp + 0x37;
  40021a:	3337      	addhi	r3, #55	; 0x37
  40021c:	7013      	strb	r3, [r2, #0]

			int_value >>= 4;
  40021e:	0900      	lsrs	r0, r0, #4
			data_ascii--;
  400220:	3a01      	subs	r2, #1
		for (i = 0; i < length * 2; i++)
  400222:	3401      	adds	r4, #1
  400224:	42ac      	cmp	r4, r5
  400226:	d3f2      	bcc.n	40020e <sam_ba_putdata_term+0x2e>
		}
		buf[0] = '0';
  400228:	2330      	movs	r3, #48	; 0x30
  40022a:	f88d 3004 	strb.w	r3, [sp, #4]
		buf[1] = 'x';
  40022e:	2378      	movs	r3, #120	; 0x78
  400230:	f88d 3005 	strb.w	r3, [sp, #5]
		buf[length * 2 + 2] = '\n';
  400234:	3101      	adds	r1, #1
  400236:	0049      	lsls	r1, r1, #1
  400238:	ab04      	add	r3, sp, #16
  40023a:	440b      	add	r3, r1
  40023c:	220a      	movs	r2, #10
  40023e:	f803 2c0c 	strb.w	r2, [r3, #-12]
		buf[length * 2 + 3] = '\r';
  400242:	ab04      	add	r3, sp, #16
  400244:	441d      	add	r5, r3
  400246:	230d      	movs	r3, #13
  400248:	f805 3c09 	strb.w	r3, [r5, #-9]
		ptr_monitor_if->putdata(buf, length * 2 + 4);
  40024c:	4b08      	ldr	r3, [pc, #32]	; (400270 <sam_ba_putdata_term+0x90>)
  40024e:	681b      	ldr	r3, [r3, #0]
  400250:	68db      	ldr	r3, [r3, #12]
  400252:	3102      	adds	r1, #2
  400254:	a801      	add	r0, sp, #4
  400256:	4798      	blx	r3
	}
	else
		ptr_monitor_if->putdata(data, length);
	return;
}
  400258:	b005      	add	sp, #20
  40025a:	bd30      	pop	{r4, r5, pc}
			int_value = *(uint16_t *) data;
  40025c:	8800      	ldrh	r0, [r0, #0]
  40025e:	e7d1      	b.n	400204 <sam_ba_putdata_term+0x24>
		ptr_monitor_if->putdata(data, length);
  400260:	4b03      	ldr	r3, [pc, #12]	; (400270 <sam_ba_putdata_term+0x90>)
  400262:	681b      	ldr	r3, [r3, #0]
  400264:	68db      	ldr	r3, [r3, #12]
  400266:	4798      	blx	r3
	return;
  400268:	e7f6      	b.n	400258 <sam_ba_putdata_term+0x78>
  40026a:	bf00      	nop
  40026c:	2000096c 	.word	0x2000096c
  400270:	20000be4 	.word	0x20000be4

00400274 <call_applet>:
 * \brief Execute an applet from the specified address
 *
 * \param address Applet address
 */
void call_applet(uint32_t address)
{
  400274:	b480      	push	{r7}
  400276:	af00      	add	r7, sp, #0
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
  400278:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
  40027a:	f3bf 8f5f 	dmb	sy
	uint32_t app_start_address;

	cpu_irq_disable();
  40027e:	2200      	movs	r2, #0
  400280:	4b07      	ldr	r3, [pc, #28]	; (4002a0 <call_applet+0x2c>)
  400282:	701a      	strb	r2, [r3, #0]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_MSP(void)
{
  register uint32_t result;

  __ASM volatile ("MRS %0, msp\n" : "=r" (result) );
  400284:	f3ef 8308 	mrs	r3, MSP

	sp = __get_MSP();
  400288:	4a06      	ldr	r2, [pc, #24]	; (4002a4 <call_applet+0x30>)
  40028a:	6013      	str	r3, [r2, #0]

    \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_MSP(uint32_t topOfMainStack)
{
  __ASM volatile ("MSR msp, %0\n" : : "r" (topOfMainStack) : "sp");
  40028c:	6803      	ldr	r3, [r0, #0]
  40028e:	f383 8808 	msr	MSP, r3

	/* Load the Reset Handler address of the application */
	app_start_address = *(uint32_t *)(address + 4);

	/* Jump to application Reset Handler in the application */
	asm("bx %0"::"r"(app_start_address));
  400292:	6843      	ldr	r3, [r0, #4]
  400294:	4718      	bx	r3
}
  400296:	46bd      	mov	sp, r7
  400298:	f85d 7b04 	ldr.w	r7, [sp], #4
  40029c:	4770      	bx	lr
  40029e:	bf00      	nop
  4002a0:	20000520 	.word	0x20000520
  4002a4:	20000be8 	.word	0x20000be8

004002a8 <ui_com_rx_start>:
{
	UNUSED(port);
}

void ui_com_rx_start(void)
{
  4002a8:	4770      	bx	lr

004002aa <ui_com_rx_stop>:
}

void ui_com_rx_stop(void)
{
  4002aa:	4770      	bx	lr

004002ac <ui_com_tx_start>:
}

void ui_com_tx_start(void)
{
  4002ac:	4770      	bx	lr

004002ae <ui_com_tx_stop>:
}

void ui_com_tx_stop(void)
{
  4002ae:	4770      	bx	lr

004002b0 <ui_com_error>:
}

void ui_com_error(void)
{
  4002b0:	4770      	bx	lr

004002b2 <ui_com_overflow>:
}

void ui_com_overflow(void)
{
  4002b2:	4770      	bx	lr

004002b4 <sysclk_enable_usb>:
 *
 * \param pll_id Source of the USB clock.
 * \param div Actual clock divisor. Must be superior to 0.
 */
void sysclk_enable_usb(void)
{
  4002b4:	b510      	push	{r4, lr}
	switch (ul_id) {
	case OSC_SLCK_32K_RC:
		break;

	case OSC_SLCK_32K_XTAL:
		pmc_switch_sclk_to_32kxtal(PMC_OSC_XTAL);
  4002b6:	2000      	movs	r0, #0
  4002b8:	4b0a      	ldr	r3, [pc, #40]	; (4002e4 <sysclk_enable_usb+0x30>)
  4002ba:	4798      	blx	r3
	case OSC_SLCK_32K_RC:
		return 1;

	case OSC_SLCK_32K_XTAL:
	case OSC_SLCK_32K_BYPASS:
		return pmc_osc_is_ready_32kxtal();
  4002bc:	4c0a      	ldr	r4, [pc, #40]	; (4002e8 <sysclk_enable_usb+0x34>)
  4002be:	47a0      	blx	r4
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
  4002c0:	2800      	cmp	r0, #0
  4002c2:	d0fc      	beq.n	4002be <sysclk_enable_usb+0xa>
	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
		PMC->CKGR_PLLAR = p_cfg->ctrl;
#if SAMG55
	} else {
		pmc_disable_pllbck(); // Always stop PLL first!
  4002c4:	4b09      	ldr	r3, [pc, #36]	; (4002ec <sysclk_enable_usb+0x38>)
  4002c6:	4798      	blx	r3
		PMC->CKGR_PLLBR = p_cfg->ctrl;
  4002c8:	4a09      	ldr	r2, [pc, #36]	; (4002f0 <sysclk_enable_usb+0x3c>)
  4002ca:	4b0a      	ldr	r3, [pc, #40]	; (4002f4 <sysclk_enable_usb+0x40>)
  4002cc:	62da      	str	r2, [r3, #44]	; 0x2c

	if (ul_pll_id == PLLA_ID) {
		return pmc_is_locked_pllack();
#if SAMG55
	} else if (ul_pll_id == PLLB_ID) {
		return pmc_is_locked_pllbck();
  4002ce:	4c0a      	ldr	r4, [pc, #40]	; (4002f8 <sysclk_enable_usb+0x44>)
  4002d0:	47a0      	blx	r4
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
  4002d2:	2800      	cmp	r0, #0
  4002d4:	d0fc      	beq.n	4002d0 <sysclk_enable_usb+0x1c>
		pll_wait_for_lock(1);
#ifdef UHD_ENABLE
		pmc_switch_uhpck_to_pllbck(CONFIG_USBCLK_DIV - 1);
		pmc_enable_uhpck();
#else
		pmc_switch_udpck_to_pllbck(CONFIG_USBCLK_DIV - 1);
  4002d6:	2000      	movs	r0, #0
  4002d8:	4b08      	ldr	r3, [pc, #32]	; (4002fc <sysclk_enable_usb+0x48>)
  4002da:	4798      	blx	r3
		pmc_enable_udpck();
  4002dc:	4b08      	ldr	r3, [pc, #32]	; (400300 <sysclk_enable_usb+0x4c>)
  4002de:	4798      	blx	r3
  4002e0:	bd10      	pop	{r4, pc}
  4002e2:	bf00      	nop
  4002e4:	00401491 	.word	0x00401491
  4002e8:	004014b5 	.word	0x004014b5
  4002ec:	004014d5 	.word	0x004014d5
  4002f0:	05b83f01 	.word	0x05b83f01
  4002f4:	400e0400 	.word	0x400e0400
  4002f8:	004014e1 	.word	0x004014e1
  4002fc:	00401599 	.word	0x00401599
  400300:	004015ad 	.word	0x004015ad

00400304 <udi_cdc_comm_disable>:
}

void udi_cdc_comm_disable(void)
{
	Assert(udi_cdc_nb_comm_enabled != 0);
	udi_cdc_nb_comm_enabled--;
  400304:	4a02      	ldr	r2, [pc, #8]	; (400310 <udi_cdc_comm_disable+0xc>)
  400306:	7813      	ldrb	r3, [r2, #0]
  400308:	3b01      	subs	r3, #1
  40030a:	b2db      	uxtb	r3, r3
  40030c:	7013      	strb	r3, [r2, #0]
  40030e:	4770      	bx	lr
  400310:	2000097b 	.word	0x2000097b

00400314 <udi_cdc_data_disable>:
void udi_cdc_data_disable(void)
{
	uint8_t port;

	Assert(udi_cdc_nb_data_enabled != 0);
	udi_cdc_nb_data_enabled--;
  400314:	4a04      	ldr	r2, [pc, #16]	; (400328 <udi_cdc_data_disable+0x14>)
  400316:	7813      	ldrb	r3, [r2, #0]
  400318:	3b01      	subs	r3, #1
  40031a:	b2db      	uxtb	r3, r3
  40031c:	7013      	strb	r3, [r2, #0]
	port = udi_cdc_nb_data_enabled;
  40031e:	7813      	ldrb	r3, [r2, #0]
	UDI_CDC_DISABLE_EXT(port);
	udi_cdc_data_running = false;
  400320:	2200      	movs	r2, #0
  400322:	4b02      	ldr	r3, [pc, #8]	; (40032c <udi_cdc_data_disable+0x18>)
  400324:	701a      	strb	r2, [r3, #0]
  400326:	4770      	bx	lr
  400328:	2000097c 	.word	0x2000097c
  40032c:	20000970 	.word	0x20000970

00400330 <udi_cdc_data_setup>:
}

bool udi_cdc_data_setup(void)
{
	return false;  // request Not supported
}
  400330:	2000      	movs	r0, #0
  400332:	4770      	bx	lr

00400334 <udi_cdc_getsetting>:

uint8_t udi_cdc_getsetting(void)
{
	return 0;      // CDC don't have multiple alternate setting
}
  400334:	2000      	movs	r0, #0
  400336:	4770      	bx	lr

00400338 <udi_cdc_comm_setup>:
	if (Udd_setup_is_in()) {
  400338:	4b1d      	ldr	r3, [pc, #116]	; (4003b0 <udi_cdc_comm_setup+0x78>)
  40033a:	781b      	ldrb	r3, [r3, #0]
  40033c:	f013 0f80 	tst.w	r3, #128	; 0x80
  400340:	d105      	bne.n	40034e <udi_cdc_comm_setup+0x16>
		if (Udd_setup_type() == USB_REQ_TYPE_CLASS) {
  400342:	f003 0360 	and.w	r3, r3, #96	; 0x60
  400346:	2b20      	cmp	r3, #32
  400348:	d018      	beq.n	40037c <udi_cdc_comm_setup+0x44>
	return false;  // request Not supported
  40034a:	2000      	movs	r0, #0
  40034c:	4770      	bx	lr
		if (Udd_setup_type() == USB_REQ_TYPE_CLASS) {
  40034e:	f003 0360 	and.w	r3, r3, #96	; 0x60
  400352:	2b20      	cmp	r3, #32
  400354:	d001      	beq.n	40035a <udi_cdc_comm_setup+0x22>
	return false;  // request Not supported
  400356:	2000      	movs	r0, #0
  400358:	4770      	bx	lr
			switch (udd_g_ctrlreq.req.bRequest) {
  40035a:	4b15      	ldr	r3, [pc, #84]	; (4003b0 <udi_cdc_comm_setup+0x78>)
  40035c:	785b      	ldrb	r3, [r3, #1]
  40035e:	2b21      	cmp	r3, #33	; 0x21
  400360:	d124      	bne.n	4003ac <udi_cdc_comm_setup+0x74>
						udd_g_ctrlreq.req.wLength)
  400362:	4b13      	ldr	r3, [pc, #76]	; (4003b0 <udi_cdc_comm_setup+0x78>)
				if (sizeof(usb_cdc_line_coding_t) !=
  400364:	88db      	ldrh	r3, [r3, #6]
  400366:	2b07      	cmp	r3, #7
  400368:	d001      	beq.n	40036e <udi_cdc_comm_setup+0x36>
					return false; // Error for USB host
  40036a:	2000      	movs	r0, #0
  40036c:	4770      	bx	lr
				udd_g_ctrlreq.payload =
  40036e:	4b10      	ldr	r3, [pc, #64]	; (4003b0 <udi_cdc_comm_setup+0x78>)
  400370:	4a10      	ldr	r2, [pc, #64]	; (4003b4 <udi_cdc_comm_setup+0x7c>)
  400372:	609a      	str	r2, [r3, #8]
				udd_g_ctrlreq.payload_size =
  400374:	2207      	movs	r2, #7
  400376:	819a      	strh	r2, [r3, #12]
				return true;
  400378:	2001      	movs	r0, #1
  40037a:	4770      	bx	lr
			switch (udd_g_ctrlreq.req.bRequest) {
  40037c:	4b0c      	ldr	r3, [pc, #48]	; (4003b0 <udi_cdc_comm_setup+0x78>)
  40037e:	7858      	ldrb	r0, [r3, #1]
  400380:	2820      	cmp	r0, #32
  400382:	d004      	beq.n	40038e <udi_cdc_comm_setup+0x56>
	return false;  // request Not supported
  400384:	2822      	cmp	r0, #34	; 0x22
  400386:	bf14      	ite	ne
  400388:	2000      	movne	r0, #0
  40038a:	2001      	moveq	r0, #1
  40038c:	4770      	bx	lr
						udd_g_ctrlreq.req.wLength)
  40038e:	4b08      	ldr	r3, [pc, #32]	; (4003b0 <udi_cdc_comm_setup+0x78>)
				if (sizeof(usb_cdc_line_coding_t) !=
  400390:	88db      	ldrh	r3, [r3, #6]
  400392:	2b07      	cmp	r3, #7
  400394:	d001      	beq.n	40039a <udi_cdc_comm_setup+0x62>
					return false; // Error for USB host
  400396:	2000      	movs	r0, #0
}
  400398:	4770      	bx	lr
				udd_g_ctrlreq.callback =
  40039a:	4b05      	ldr	r3, [pc, #20]	; (4003b0 <udi_cdc_comm_setup+0x78>)
  40039c:	4a06      	ldr	r2, [pc, #24]	; (4003b8 <udi_cdc_comm_setup+0x80>)
  40039e:	611a      	str	r2, [r3, #16]
				udd_g_ctrlreq.payload =
  4003a0:	4a04      	ldr	r2, [pc, #16]	; (4003b4 <udi_cdc_comm_setup+0x7c>)
  4003a2:	609a      	str	r2, [r3, #8]
				udd_g_ctrlreq.payload_size =
  4003a4:	2207      	movs	r2, #7
  4003a6:	819a      	strh	r2, [r3, #12]
				return true;
  4003a8:	2001      	movs	r0, #1
  4003aa:	4770      	bx	lr
	return false;  // request Not supported
  4003ac:	2000      	movs	r0, #0
  4003ae:	4770      	bx	lr
  4003b0:	20000bf4 	.word	0x20000bf4
  4003b4:	20000974 	.word	0x20000974
  4003b8:	004003bd 	.word	0x004003bd

004003bc <udi_cdc_line_coding_received>:
	}
	return port;
}

static void udi_cdc_line_coding_received(void)
{
  4003bc:	4770      	bx	lr
	...

004003c0 <udi_cdc_comm_enable>:
{
  4003c0:	b508      	push	{r3, lr}
	udi_cdc_nb_comm_enabled = 0;
  4003c2:	2000      	movs	r0, #0
  4003c4:	4b10      	ldr	r3, [pc, #64]	; (400408 <udi_cdc_comm_enable+0x48>)
  4003c6:	7018      	strb	r0, [r3, #0]
	udi_cdc_state[port] = CPU_TO_LE16(0);
  4003c8:	4b10      	ldr	r3, [pc, #64]	; (40040c <udi_cdc_comm_enable+0x4c>)
  4003ca:	8018      	strh	r0, [r3, #0]
	uid_cdc_state_msg[port].header.bmRequestType =
  4003cc:	4b10      	ldr	r3, [pc, #64]	; (400410 <udi_cdc_comm_enable+0x50>)
  4003ce:	22a1      	movs	r2, #161	; 0xa1
  4003d0:	701a      	strb	r2, [r3, #0]
	uid_cdc_state_msg[port].header.bNotification = USB_REQ_CDC_NOTIFY_SERIAL_STATE;
  4003d2:	2220      	movs	r2, #32
  4003d4:	705a      	strb	r2, [r3, #1]
	uid_cdc_state_msg[port].header.wValue = LE16(0);
  4003d6:	8058      	strh	r0, [r3, #2]
	uid_cdc_state_msg[port].header.wIndex = LE16(iface_comm_num);
  4003d8:	8098      	strh	r0, [r3, #4]
	uid_cdc_state_msg[port].header.wLength = LE16(2);
  4003da:	2202      	movs	r2, #2
  4003dc:	80da      	strh	r2, [r3, #6]
	uid_cdc_state_msg[port].value = CPU_TO_LE16(0);
  4003de:	8118      	strh	r0, [r3, #8]
	udi_cdc_line_coding[port].dwDTERate = CPU_TO_LE32(UDI_CDC_DEFAULT_RATE);
  4003e0:	4b0c      	ldr	r3, [pc, #48]	; (400414 <udi_cdc_comm_enable+0x54>)
  4003e2:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
  4003e6:	601a      	str	r2, [r3, #0]
	udi_cdc_line_coding[port].bCharFormat = UDI_CDC_DEFAULT_STOPBITS;
  4003e8:	7118      	strb	r0, [r3, #4]
	udi_cdc_line_coding[port].bParityType = UDI_CDC_DEFAULT_PARITY;
  4003ea:	7158      	strb	r0, [r3, #5]
	udi_cdc_line_coding[port].bDataBits = UDI_CDC_DEFAULT_DATABITS;
  4003ec:	2208      	movs	r2, #8
  4003ee:	719a      	strb	r2, [r3, #6]
	if (!UDI_CDC_ENABLE_EXT(port)) {
  4003f0:	4b09      	ldr	r3, [pc, #36]	; (400418 <udi_cdc_comm_enable+0x58>)
  4003f2:	4798      	blx	r3
  4003f4:	4602      	mov	r2, r0
  4003f6:	b120      	cbz	r0, 400402 <udi_cdc_comm_enable+0x42>
	udi_cdc_nb_comm_enabled++;
  4003f8:	4903      	ldr	r1, [pc, #12]	; (400408 <udi_cdc_comm_enable+0x48>)
  4003fa:	780b      	ldrb	r3, [r1, #0]
  4003fc:	3301      	adds	r3, #1
  4003fe:	b2db      	uxtb	r3, r3
  400400:	700b      	strb	r3, [r1, #0]
}
  400402:	4610      	mov	r0, r2
  400404:	bd08      	pop	{r3, pc}
  400406:	bf00      	nop
  400408:	2000097b 	.word	0x2000097b
  40040c:	20000a14 	.word	0x20000a14
  400410:	20000aac 	.word	0x20000aac
  400414:	20000974 	.word	0x20000974
  400418:	00402e21 	.word	0x00402e21

0040041c <udi_cdc_tx_send>:

#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
#endif

	if (udi_cdc_tx_trans_ongoing[port]) {
  40041c:	4b44      	ldr	r3, [pc, #272]	; (400530 <udi_cdc_tx_send+0x114>)
  40041e:	781b      	ldrb	r3, [r3, #0]
  400420:	b103      	cbz	r3, 400424 <udi_cdc_tx_send+0x8>
  400422:	4770      	bx	lr
{
  400424:	b570      	push	{r4, r5, r6, lr}
  400426:	b084      	sub	sp, #16
		return; // Already on going or wait next SOF to send next data
	}
	if (udd_is_high_speed()) {
  400428:	4b42      	ldr	r3, [pc, #264]	; (400534 <udi_cdc_tx_send+0x118>)
  40042a:	4798      	blx	r3
  40042c:	2800      	cmp	r0, #0
  40042e:	d041      	beq.n	4004b4 <udi_cdc_tx_send+0x98>
		if (udi_cdc_tx_sof_num[port] == udd_get_micro_frame_number()) {
  400430:	4b41      	ldr	r3, [pc, #260]	; (400538 <udi_cdc_tx_send+0x11c>)
  400432:	881c      	ldrh	r4, [r3, #0]
  400434:	4b41      	ldr	r3, [pc, #260]	; (40053c <udi_cdc_tx_send+0x120>)
  400436:	4798      	blx	r3
  400438:	4284      	cmp	r4, r0
  40043a:	d076      	beq.n	40052a <udi_cdc_tx_send+0x10e>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  40043c:	f3ef 8310 	mrs	r3, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = cpu_irq_is_enabled();
  400440:	fab3 f383 	clz	r3, r3
  400444:	095b      	lsrs	r3, r3, #5
  400446:	9303      	str	r3, [sp, #12]
  __ASM volatile ("cpsid i" : : : "memory");
  400448:	b672      	cpsid	i
  40044a:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  40044e:	2200      	movs	r2, #0
  400450:	4b3b      	ldr	r3, [pc, #236]	; (400540 <udi_cdc_tx_send+0x124>)
  400452:	701a      	strb	r2, [r3, #0]
	return flags;
  400454:	9d03      	ldr	r5, [sp, #12]
			return; // Wait next SOF to send next data
		}
	}

	flags = cpu_irq_save(); // to protect udi_cdc_tx_buf_sel
	buf_sel_trans = udi_cdc_tx_buf_sel[port];
  400456:	4b3b      	ldr	r3, [pc, #236]	; (400544 <udi_cdc_tx_send+0x128>)
  400458:	781c      	ldrb	r4, [r3, #0]
  40045a:	b2e4      	uxtb	r4, r4
	if (udi_cdc_tx_buf_nb[port][buf_sel_trans] == 0) {
  40045c:	4b3a      	ldr	r3, [pc, #232]	; (400548 <udi_cdc_tx_send+0x12c>)
  40045e:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
  400462:	2b00      	cmp	r3, #0
  400464:	d02d      	beq.n	4004c2 <udi_cdc_tx_send+0xa6>
				|| (udd_is_high_speed() && (sof_zlp_counter < 800))) {
			cpu_irq_restore(flags);
			return;
		}
	}
	sof_zlp_counter = 0;
  400466:	2200      	movs	r2, #0
  400468:	4b38      	ldr	r3, [pc, #224]	; (40054c <udi_cdc_tx_send+0x130>)
  40046a:	801a      	strh	r2, [r3, #0]

	if (!udi_cdc_tx_both_buf_to_send[port]) {
  40046c:	4b38      	ldr	r3, [pc, #224]	; (400550 <udi_cdc_tx_send+0x134>)
  40046e:	781b      	ldrb	r3, [r3, #0]
  400470:	2b00      	cmp	r3, #0
  400472:	d142      	bne.n	4004fa <udi_cdc_tx_send+0xde>
		// Send current Buffer
		// and switch the current buffer
		udi_cdc_tx_buf_sel[port] = (buf_sel_trans==0)?1:0;
  400474:	fab4 f384 	clz	r3, r4
  400478:	095b      	lsrs	r3, r3, #5
  40047a:	4a32      	ldr	r2, [pc, #200]	; (400544 <udi_cdc_tx_send+0x128>)
  40047c:	7013      	strb	r3, [r2, #0]
	}else{
		// Send the other Buffer
		// and no switch the current buffer
		buf_sel_trans = (buf_sel_trans==0)?1:0;
	}
	udi_cdc_tx_trans_ongoing[port] = true;
  40047e:	2201      	movs	r2, #1
  400480:	4b2b      	ldr	r3, [pc, #172]	; (400530 <udi_cdc_tx_send+0x114>)
  400482:	701a      	strb	r2, [r3, #0]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
  400484:	b125      	cbz	r5, 400490 <udi_cdc_tx_send+0x74>
		cpu_irq_enable();
  400486:	4b2e      	ldr	r3, [pc, #184]	; (400540 <udi_cdc_tx_send+0x124>)
  400488:	701a      	strb	r2, [r3, #0]
  40048a:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  40048e:	b662      	cpsie	i
	cpu_irq_restore(flags);

	b_short_packet = (udi_cdc_tx_buf_nb[port][buf_sel_trans] != UDI_CDC_TX_BUFFERS);
  400490:	4626      	mov	r6, r4
  400492:	4b2d      	ldr	r3, [pc, #180]	; (400548 <udi_cdc_tx_send+0x12c>)
  400494:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
  400498:	2b40      	cmp	r3, #64	; 0x40
  40049a:	bf14      	ite	ne
  40049c:	2501      	movne	r5, #1
  40049e:	2500      	moveq	r5, #0
	if (b_short_packet) {
  4004a0:	d034      	beq.n	40050c <udi_cdc_tx_send+0xf0>
		if (udd_is_high_speed()) {
  4004a2:	4b24      	ldr	r3, [pc, #144]	; (400534 <udi_cdc_tx_send+0x118>)
  4004a4:	4798      	blx	r3
  4004a6:	2800      	cmp	r0, #0
  4004a8:	d02b      	beq.n	400502 <udi_cdc_tx_send+0xe6>
			udi_cdc_tx_sof_num[port] = udd_get_micro_frame_number();
  4004aa:	4b24      	ldr	r3, [pc, #144]	; (40053c <udi_cdc_tx_send+0x120>)
  4004ac:	4798      	blx	r3
  4004ae:	4b22      	ldr	r3, [pc, #136]	; (400538 <udi_cdc_tx_send+0x11c>)
  4004b0:	8018      	strh	r0, [r3, #0]
  4004b2:	e02e      	b.n	400512 <udi_cdc_tx_send+0xf6>
		if (udi_cdc_tx_sof_num[port] == udd_get_frame_number()) {
  4004b4:	4b20      	ldr	r3, [pc, #128]	; (400538 <udi_cdc_tx_send+0x11c>)
  4004b6:	881c      	ldrh	r4, [r3, #0]
  4004b8:	4b26      	ldr	r3, [pc, #152]	; (400554 <udi_cdc_tx_send+0x138>)
  4004ba:	4798      	blx	r3
  4004bc:	4284      	cmp	r4, r0
  4004be:	d1bd      	bne.n	40043c <udi_cdc_tx_send+0x20>
  4004c0:	e033      	b.n	40052a <udi_cdc_tx_send+0x10e>
		sof_zlp_counter++;
  4004c2:	4a22      	ldr	r2, [pc, #136]	; (40054c <udi_cdc_tx_send+0x130>)
  4004c4:	8813      	ldrh	r3, [r2, #0]
  4004c6:	3301      	adds	r3, #1
  4004c8:	8013      	strh	r3, [r2, #0]
		if (((!udd_is_high_speed()) && (sof_zlp_counter < 100))
  4004ca:	4b1a      	ldr	r3, [pc, #104]	; (400534 <udi_cdc_tx_send+0x118>)
  4004cc:	4798      	blx	r3
  4004ce:	b918      	cbnz	r0, 4004d8 <udi_cdc_tx_send+0xbc>
  4004d0:	4b1e      	ldr	r3, [pc, #120]	; (40054c <udi_cdc_tx_send+0x130>)
  4004d2:	881b      	ldrh	r3, [r3, #0]
  4004d4:	2b63      	cmp	r3, #99	; 0x63
  4004d6:	d908      	bls.n	4004ea <udi_cdc_tx_send+0xce>
				|| (udd_is_high_speed() && (sof_zlp_counter < 800))) {
  4004d8:	4b16      	ldr	r3, [pc, #88]	; (400534 <udi_cdc_tx_send+0x118>)
  4004da:	4798      	blx	r3
  4004dc:	2800      	cmp	r0, #0
  4004de:	d0c2      	beq.n	400466 <udi_cdc_tx_send+0x4a>
  4004e0:	4b1a      	ldr	r3, [pc, #104]	; (40054c <udi_cdc_tx_send+0x130>)
  4004e2:	881b      	ldrh	r3, [r3, #0]
  4004e4:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
  4004e8:	d2bd      	bcs.n	400466 <udi_cdc_tx_send+0x4a>
	if (cpu_irq_is_enabled_flags(flags))
  4004ea:	b1f5      	cbz	r5, 40052a <udi_cdc_tx_send+0x10e>
		cpu_irq_enable();
  4004ec:	2201      	movs	r2, #1
  4004ee:	4b14      	ldr	r3, [pc, #80]	; (400540 <udi_cdc_tx_send+0x124>)
  4004f0:	701a      	strb	r2, [r3, #0]
  4004f2:	f3bf 8f5f 	dmb	sy
  4004f6:	b662      	cpsie	i
  4004f8:	e017      	b.n	40052a <udi_cdc_tx_send+0x10e>
		buf_sel_trans = (buf_sel_trans==0)?1:0;
  4004fa:	fab4 f484 	clz	r4, r4
  4004fe:	0964      	lsrs	r4, r4, #5
  400500:	e7bd      	b.n	40047e <udi_cdc_tx_send+0x62>
		}else{
			udi_cdc_tx_sof_num[port] = udd_get_frame_number();
  400502:	4b14      	ldr	r3, [pc, #80]	; (400554 <udi_cdc_tx_send+0x138>)
  400504:	4798      	blx	r3
  400506:	4b0c      	ldr	r3, [pc, #48]	; (400538 <udi_cdc_tx_send+0x11c>)
  400508:	8018      	strh	r0, [r3, #0]
  40050a:	e002      	b.n	400512 <udi_cdc_tx_send+0xf6>
		}
	}else{
		udi_cdc_tx_sof_num[port] = 0; // Force next transfer without wait SOF
  40050c:	2200      	movs	r2, #0
  40050e:	4b0a      	ldr	r3, [pc, #40]	; (400538 <udi_cdc_tx_send+0x11c>)
  400510:	801a      	strh	r2, [r3, #0]
		break;
	}
	udd_ep_run( ep,
			b_short_packet,
			udi_cdc_tx_buf[port][buf_sel_trans],
			udi_cdc_tx_buf_nb[port][buf_sel_trans],
  400512:	4b0d      	ldr	r3, [pc, #52]	; (400548 <udi_cdc_tx_send+0x12c>)
	udd_ep_run( ep,
  400514:	f833 3016 	ldrh.w	r3, [r3, r6, lsl #1]
  400518:	4a0f      	ldr	r2, [pc, #60]	; (400558 <udi_cdc_tx_send+0x13c>)
  40051a:	9200      	str	r2, [sp, #0]
  40051c:	4a0f      	ldr	r2, [pc, #60]	; (40055c <udi_cdc_tx_send+0x140>)
  40051e:	eb02 1284 	add.w	r2, r2, r4, lsl #6
  400522:	4629      	mov	r1, r5
  400524:	2081      	movs	r0, #129	; 0x81
  400526:	4c0e      	ldr	r4, [pc, #56]	; (400560 <udi_cdc_tx_send+0x144>)
  400528:	47a0      	blx	r4
			udi_cdc_data_sent);
}
  40052a:	b004      	add	sp, #16
  40052c:	bd70      	pop	{r4, r5, r6, pc}
  40052e:	bf00      	nop
  400530:	20000aa8 	.word	0x20000aa8
  400534:	00402539 	.word	0x00402539
  400538:	20000aa4 	.word	0x20000aa4
  40053c:	004025a5 	.word	0x004025a5
  400540:	20000520 	.word	0x20000520
  400544:	20000aa0 	.word	0x20000aa0
  400548:	20000a9c 	.word	0x20000a9c
  40054c:	2000096e 	.word	0x2000096e
  400550:	20000a18 	.word	0x20000a18
  400554:	00402595 	.word	0x00402595
  400558:	00400565 	.word	0x00400565
  40055c:	20000a1c 	.word	0x20000a1c
  400560:	00402901 	.word	0x00402901

00400564 <udi_cdc_data_sent>:
	if (UDD_EP_TRANSFER_OK != status) {
  400564:	b100      	cbz	r0, 400568 <udi_cdc_data_sent+0x4>
  400566:	4770      	bx	lr
{
  400568:	b508      	push	{r3, lr}
	udi_cdc_tx_buf_nb[port][(udi_cdc_tx_buf_sel[port]==0)?1:0] = 0;
  40056a:	4b07      	ldr	r3, [pc, #28]	; (400588 <udi_cdc_data_sent+0x24>)
  40056c:	781b      	ldrb	r3, [r3, #0]
  40056e:	fab3 f383 	clz	r3, r3
  400572:	095b      	lsrs	r3, r3, #5
  400574:	4a05      	ldr	r2, [pc, #20]	; (40058c <udi_cdc_data_sent+0x28>)
  400576:	f822 0013 	strh.w	r0, [r2, r3, lsl #1]
	udi_cdc_tx_both_buf_to_send[port] = false;
  40057a:	4b05      	ldr	r3, [pc, #20]	; (400590 <udi_cdc_data_sent+0x2c>)
  40057c:	7018      	strb	r0, [r3, #0]
	udi_cdc_tx_trans_ongoing[port] = false;
  40057e:	4b05      	ldr	r3, [pc, #20]	; (400594 <udi_cdc_data_sent+0x30>)
  400580:	7018      	strb	r0, [r3, #0]
	udi_cdc_tx_send(port);
  400582:	4b05      	ldr	r3, [pc, #20]	; (400598 <udi_cdc_data_sent+0x34>)
  400584:	4798      	blx	r3
  400586:	bd08      	pop	{r3, pc}
  400588:	20000aa0 	.word	0x20000aa0
  40058c:	20000a9c 	.word	0x20000a9c
  400590:	20000a18 	.word	0x20000a18
  400594:	20000aa8 	.word	0x20000aa8
  400598:	0040041d 	.word	0x0040041d

0040059c <udi_cdc_data_sof_notify>:
{
  40059c:	b508      	push	{r3, lr}
	udi_cdc_tx_send(port_notify);
  40059e:	2000      	movs	r0, #0
  4005a0:	4b01      	ldr	r3, [pc, #4]	; (4005a8 <udi_cdc_data_sof_notify+0xc>)
  4005a2:	4798      	blx	r3
  4005a4:	bd08      	pop	{r3, pc}
  4005a6:	bf00      	nop
  4005a8:	0040041d 	.word	0x0040041d

004005ac <udi_cdc_ctrl_state_notify>:
	if ((!udi_cdc_serial_state_msg_ongoing[port])
  4005ac:	4b0d      	ldr	r3, [pc, #52]	; (4005e4 <udi_cdc_ctrl_state_notify+0x38>)
  4005ae:	781b      	ldrb	r3, [r3, #0]
  4005b0:	b9bb      	cbnz	r3, 4005e2 <udi_cdc_ctrl_state_notify+0x36>
			&& (udi_cdc_state[port] != uid_cdc_state_msg[port].value)) {
  4005b2:	4b0d      	ldr	r3, [pc, #52]	; (4005e8 <udi_cdc_ctrl_state_notify+0x3c>)
  4005b4:	881b      	ldrh	r3, [r3, #0]
  4005b6:	b29b      	uxth	r3, r3
  4005b8:	4a0c      	ldr	r2, [pc, #48]	; (4005ec <udi_cdc_ctrl_state_notify+0x40>)
  4005ba:	8912      	ldrh	r2, [r2, #8]
  4005bc:	429a      	cmp	r2, r3
  4005be:	d010      	beq.n	4005e2 <udi_cdc_ctrl_state_notify+0x36>
{
  4005c0:	b510      	push	{r4, lr}
  4005c2:	b082      	sub	sp, #8
  4005c4:	4608      	mov	r0, r1
		uid_cdc_state_msg[port].value = udi_cdc_state[port];
  4005c6:	4b08      	ldr	r3, [pc, #32]	; (4005e8 <udi_cdc_ctrl_state_notify+0x3c>)
  4005c8:	881b      	ldrh	r3, [r3, #0]
  4005ca:	4a08      	ldr	r2, [pc, #32]	; (4005ec <udi_cdc_ctrl_state_notify+0x40>)
  4005cc:	8113      	strh	r3, [r2, #8]
				udd_ep_run(ep,
  4005ce:	4b08      	ldr	r3, [pc, #32]	; (4005f0 <udi_cdc_ctrl_state_notify+0x44>)
  4005d0:	9300      	str	r3, [sp, #0]
  4005d2:	230a      	movs	r3, #10
  4005d4:	2100      	movs	r1, #0
  4005d6:	4c07      	ldr	r4, [pc, #28]	; (4005f4 <udi_cdc_ctrl_state_notify+0x48>)
  4005d8:	47a0      	blx	r4
		udi_cdc_serial_state_msg_ongoing[port] =
  4005da:	4b02      	ldr	r3, [pc, #8]	; (4005e4 <udi_cdc_ctrl_state_notify+0x38>)
  4005dc:	7018      	strb	r0, [r3, #0]
}
  4005de:	b002      	add	sp, #8
  4005e0:	bd10      	pop	{r4, pc}
  4005e2:	4770      	bx	lr
  4005e4:	20000a10 	.word	0x20000a10
  4005e8:	20000a14 	.word	0x20000a14
  4005ec:	20000aac 	.word	0x20000aac
  4005f0:	00400659 	.word	0x00400659
  4005f4:	00402901 	.word	0x00402901

004005f8 <udi_cdc_ctrl_state_change>:
{
  4005f8:	b500      	push	{lr}
  4005fa:	b083      	sub	sp, #12
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  4005fc:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
  400600:	fab3 f383 	clz	r3, r3
  400604:	095b      	lsrs	r3, r3, #5
  400606:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
  400608:	b672      	cpsid	i
  40060a:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  40060e:	2000      	movs	r0, #0
  400610:	4b0e      	ldr	r3, [pc, #56]	; (40064c <udi_cdc_ctrl_state_change+0x54>)
  400612:	7018      	strb	r0, [r3, #0]
	return flags;
  400614:	9801      	ldr	r0, [sp, #4]
	if (b_set) {
  400616:	b191      	cbz	r1, 40063e <udi_cdc_ctrl_state_change+0x46>
		udi_cdc_state[port] |= bit_mask;
  400618:	490d      	ldr	r1, [pc, #52]	; (400650 <udi_cdc_ctrl_state_change+0x58>)
  40061a:	880b      	ldrh	r3, [r1, #0]
  40061c:	b29b      	uxth	r3, r3
  40061e:	431a      	orrs	r2, r3
  400620:	800a      	strh	r2, [r1, #0]
	if (cpu_irq_is_enabled_flags(flags))
  400622:	b128      	cbz	r0, 400630 <udi_cdc_ctrl_state_change+0x38>
		cpu_irq_enable();
  400624:	2201      	movs	r2, #1
  400626:	4b09      	ldr	r3, [pc, #36]	; (40064c <udi_cdc_ctrl_state_change+0x54>)
  400628:	701a      	strb	r2, [r3, #0]
  40062a:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  40062e:	b662      	cpsie	i
	udi_cdc_ctrl_state_notify(port, ep_comm);
  400630:	2183      	movs	r1, #131	; 0x83
  400632:	2000      	movs	r0, #0
  400634:	4b07      	ldr	r3, [pc, #28]	; (400654 <udi_cdc_ctrl_state_change+0x5c>)
  400636:	4798      	blx	r3
}
  400638:	b003      	add	sp, #12
  40063a:	f85d fb04 	ldr.w	pc, [sp], #4
		udi_cdc_state[port] &= ~(unsigned)bit_mask;
  40063e:	4904      	ldr	r1, [pc, #16]	; (400650 <udi_cdc_ctrl_state_change+0x58>)
  400640:	880b      	ldrh	r3, [r1, #0]
  400642:	b29b      	uxth	r3, r3
  400644:	ea23 0202 	bic.w	r2, r3, r2
  400648:	800a      	strh	r2, [r1, #0]
  40064a:	e7ea      	b.n	400622 <udi_cdc_ctrl_state_change+0x2a>
  40064c:	20000520 	.word	0x20000520
  400650:	20000a14 	.word	0x20000a14
  400654:	004005ad 	.word	0x004005ad

00400658 <udi_cdc_serial_state_msg_sent>:
{
  400658:	b508      	push	{r3, lr}
	udi_cdc_serial_state_msg_ongoing[port] = false;
  40065a:	2000      	movs	r0, #0
  40065c:	4b08      	ldr	r3, [pc, #32]	; (400680 <udi_cdc_serial_state_msg_sent+0x28>)
  40065e:	7018      	strb	r0, [r3, #0]
	udi_cdc_state[port] &= ~(CDC_SERIAL_STATE_BREAK |
  400660:	4908      	ldr	r1, [pc, #32]	; (400684 <udi_cdc_serial_state_msg_sent+0x2c>)
  400662:	880b      	ldrh	r3, [r1, #0]
  400664:	f023 037c 	bic.w	r3, r3, #124	; 0x7c
  400668:	041b      	lsls	r3, r3, #16
  40066a:	0c1b      	lsrs	r3, r3, #16
  40066c:	800b      	strh	r3, [r1, #0]
	uid_cdc_state_msg[port].value &= ~(CDC_SERIAL_STATE_BREAK |
  40066e:	4906      	ldr	r1, [pc, #24]	; (400688 <udi_cdc_serial_state_msg_sent+0x30>)
  400670:	890b      	ldrh	r3, [r1, #8]
  400672:	f023 037c 	bic.w	r3, r3, #124	; 0x7c
  400676:	810b      	strh	r3, [r1, #8]
	udi_cdc_ctrl_state_notify(port, ep);
  400678:	4611      	mov	r1, r2
  40067a:	4b04      	ldr	r3, [pc, #16]	; (40068c <udi_cdc_serial_state_msg_sent+0x34>)
  40067c:	4798      	blx	r3
  40067e:	bd08      	pop	{r3, pc}
  400680:	20000a10 	.word	0x20000a10
  400684:	20000a14 	.word	0x20000a14
  400688:	20000aac 	.word	0x20000aac
  40068c:	004005ad 	.word	0x004005ad

00400690 <udi_cdc_signal_framing_error>:
{
	udi_cdc_ctrl_state_change(0, b_set, CDC_SERIAL_STATE_DSR);
}

void udi_cdc_signal_framing_error(void)
{
  400690:	b508      	push	{r3, lr}
	udi_cdc_ctrl_state_change(0, true, CDC_SERIAL_STATE_FRAMING);
  400692:	2210      	movs	r2, #16
  400694:	2101      	movs	r1, #1
  400696:	2000      	movs	r0, #0
  400698:	4b01      	ldr	r3, [pc, #4]	; (4006a0 <udi_cdc_signal_framing_error+0x10>)
  40069a:	4798      	blx	r3
  40069c:	bd08      	pop	{r3, pc}
  40069e:	bf00      	nop
  4006a0:	004005f9 	.word	0x004005f9

004006a4 <udi_cdc_signal_overrun>:
{
	udi_cdc_ctrl_state_change(0, true, CDC_SERIAL_STATE_PARITY);
}

void udi_cdc_signal_overrun(void)
{
  4006a4:	b508      	push	{r3, lr}
	udi_cdc_ctrl_state_change(0, true, CDC_SERIAL_STATE_OVERRUN);
  4006a6:	2240      	movs	r2, #64	; 0x40
  4006a8:	2101      	movs	r1, #1
  4006aa:	2000      	movs	r0, #0
  4006ac:	4b01      	ldr	r3, [pc, #4]	; (4006b4 <udi_cdc_signal_overrun+0x10>)
  4006ae:	4798      	blx	r3
  4006b0:	bd08      	pop	{r3, pc}
  4006b2:	bf00      	nop
  4006b4:	004005f9 	.word	0x004005f9

004006b8 <udi_cdc_multi_get_nb_received_data>:
{
	udi_cdc_ctrl_state_change(port, true, CDC_SERIAL_STATE_OVERRUN);
}

iram_size_t udi_cdc_multi_get_nb_received_data(uint8_t port)
{
  4006b8:	b082      	sub	sp, #8
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  4006ba:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
  4006be:	fab3 f383 	clz	r3, r3
  4006c2:	095b      	lsrs	r3, r3, #5
  4006c4:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
  4006c6:	b672      	cpsid	i
  4006c8:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  4006cc:	2200      	movs	r2, #0
  4006ce:	4b0b      	ldr	r3, [pc, #44]	; (4006fc <udi_cdc_multi_get_nb_received_data+0x44>)
  4006d0:	701a      	strb	r2, [r3, #0]
	return flags;
  4006d2:	9901      	ldr	r1, [sp, #4]

#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
#endif
	flags = cpu_irq_save();
	pos = udi_cdc_rx_pos[port];
  4006d4:	4b0a      	ldr	r3, [pc, #40]	; (400700 <udi_cdc_multi_get_nb_received_data+0x48>)
  4006d6:	8818      	ldrh	r0, [r3, #0]
  4006d8:	b283      	uxth	r3, r0
	nb_received = udi_cdc_rx_buf_nb[port][udi_cdc_rx_buf_sel[port]] - pos;
  4006da:	4a0a      	ldr	r2, [pc, #40]	; (400704 <udi_cdc_multi_get_nb_received_data+0x4c>)
  4006dc:	7812      	ldrb	r2, [r2, #0]
  4006de:	b2d2      	uxtb	r2, r2
  4006e0:	4809      	ldr	r0, [pc, #36]	; (400708 <udi_cdc_multi_get_nb_received_data+0x50>)
  4006e2:	f830 0012 	ldrh.w	r0, [r0, r2, lsl #1]
  4006e6:	b280      	uxth	r0, r0
  4006e8:	1ac0      	subs	r0, r0, r3
	if (cpu_irq_is_enabled_flags(flags))
  4006ea:	b129      	cbz	r1, 4006f8 <udi_cdc_multi_get_nb_received_data+0x40>
		cpu_irq_enable();
  4006ec:	2201      	movs	r2, #1
  4006ee:	4b03      	ldr	r3, [pc, #12]	; (4006fc <udi_cdc_multi_get_nb_received_data+0x44>)
  4006f0:	701a      	strb	r2, [r3, #0]
  4006f2:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  4006f6:	b662      	cpsie	i
	cpu_irq_restore(flags);
	return nb_received;
}
  4006f8:	b002      	add	sp, #8
  4006fa:	4770      	bx	lr
  4006fc:	20000520 	.word	0x20000520
  400700:	20000a08 	.word	0x20000a08
  400704:	20000a04 	.word	0x20000a04
  400708:	20000a00 	.word	0x20000a00

0040070c <udi_cdc_multi_is_rx_ready>:
{
	return udi_cdc_multi_get_nb_received_data(0);
}

bool udi_cdc_multi_is_rx_ready(uint8_t port)
{
  40070c:	b508      	push	{r3, lr}
	return (udi_cdc_multi_get_nb_received_data(port) > 0);
  40070e:	4b03      	ldr	r3, [pc, #12]	; (40071c <udi_cdc_multi_is_rx_ready+0x10>)
  400710:	4798      	blx	r3
}
  400712:	3000      	adds	r0, #0
  400714:	bf18      	it	ne
  400716:	2001      	movne	r0, #1
  400718:	bd08      	pop	{r3, pc}
  40071a:	bf00      	nop
  40071c:	004006b9 	.word	0x004006b9

00400720 <udi_cdc_rx_start>:
{
  400720:	b510      	push	{r4, lr}
  400722:	b084      	sub	sp, #16
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  400724:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
  400728:	fab3 f383 	clz	r3, r3
  40072c:	095b      	lsrs	r3, r3, #5
  40072e:	9303      	str	r3, [sp, #12]
  __ASM volatile ("cpsid i" : : : "memory");
  400730:	b672      	cpsid	i
  400732:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  400736:	2200      	movs	r2, #0
  400738:	4b1e      	ldr	r3, [pc, #120]	; (4007b4 <udi_cdc_rx_start+0x94>)
  40073a:	701a      	strb	r2, [r3, #0]
	return flags;
  40073c:	9b03      	ldr	r3, [sp, #12]
	buf_sel_trans = udi_cdc_rx_buf_sel[port];
  40073e:	4a1e      	ldr	r2, [pc, #120]	; (4007b8 <udi_cdc_rx_start+0x98>)
  400740:	7814      	ldrb	r4, [r2, #0]
	if (udi_cdc_rx_trans_ongoing[port] ||
  400742:	4a1e      	ldr	r2, [pc, #120]	; (4007bc <udi_cdc_rx_start+0x9c>)
  400744:	7812      	ldrb	r2, [r2, #0]
  400746:	b94a      	cbnz	r2, 40075c <udi_cdc_rx_start+0x3c>
  400748:	b2e4      	uxtb	r4, r4
		(udi_cdc_rx_pos[port] < udi_cdc_rx_buf_nb[port][buf_sel_trans])) {
  40074a:	4a1d      	ldr	r2, [pc, #116]	; (4007c0 <udi_cdc_rx_start+0xa0>)
  40074c:	8811      	ldrh	r1, [r2, #0]
  40074e:	b289      	uxth	r1, r1
  400750:	4a1c      	ldr	r2, [pc, #112]	; (4007c4 <udi_cdc_rx_start+0xa4>)
  400752:	f832 2014 	ldrh.w	r2, [r2, r4, lsl #1]
  400756:	b292      	uxth	r2, r2
	if (udi_cdc_rx_trans_ongoing[port] ||
  400758:	4291      	cmp	r1, r2
  40075a:	d209      	bcs.n	400770 <udi_cdc_rx_start+0x50>
	if (cpu_irq_is_enabled_flags(flags))
  40075c:	b33b      	cbz	r3, 4007ae <udi_cdc_rx_start+0x8e>
		cpu_irq_enable();
  40075e:	2201      	movs	r2, #1
  400760:	4b14      	ldr	r3, [pc, #80]	; (4007b4 <udi_cdc_rx_start+0x94>)
  400762:	701a      	strb	r2, [r3, #0]
  400764:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  400768:	b662      	cpsie	i
		return false;
  40076a:	2000      	movs	r0, #0
}
  40076c:	b004      	add	sp, #16
  40076e:	bd10      	pop	{r4, pc}
	udi_cdc_rx_pos[port] = 0;
  400770:	2100      	movs	r1, #0
  400772:	4a13      	ldr	r2, [pc, #76]	; (4007c0 <udi_cdc_rx_start+0xa0>)
  400774:	8011      	strh	r1, [r2, #0]
	udi_cdc_rx_buf_sel[port] = (buf_sel_trans==0)?1:0;
  400776:	fab4 f284 	clz	r2, r4
  40077a:	0952      	lsrs	r2, r2, #5
  40077c:	490e      	ldr	r1, [pc, #56]	; (4007b8 <udi_cdc_rx_start+0x98>)
  40077e:	700a      	strb	r2, [r1, #0]
	udi_cdc_rx_trans_ongoing[port] = true;
  400780:	2101      	movs	r1, #1
  400782:	4a0e      	ldr	r2, [pc, #56]	; (4007bc <udi_cdc_rx_start+0x9c>)
  400784:	7011      	strb	r1, [r2, #0]
	if (cpu_irq_is_enabled_flags(flags))
  400786:	b123      	cbz	r3, 400792 <udi_cdc_rx_start+0x72>
		cpu_irq_enable();
  400788:	4b0a      	ldr	r3, [pc, #40]	; (4007b4 <udi_cdc_rx_start+0x94>)
  40078a:	7019      	strb	r1, [r3, #0]
  40078c:	f3bf 8f5f 	dmb	sy
  400790:	b662      	cpsie	i
	if (udi_cdc_multi_is_rx_ready(port)) {
  400792:	2000      	movs	r0, #0
  400794:	4b0c      	ldr	r3, [pc, #48]	; (4007c8 <udi_cdc_rx_start+0xa8>)
  400796:	4798      	blx	r3
	return udd_ep_run(ep,
  400798:	4b0c      	ldr	r3, [pc, #48]	; (4007cc <udi_cdc_rx_start+0xac>)
  40079a:	9300      	str	r3, [sp, #0]
  40079c:	2340      	movs	r3, #64	; 0x40
  40079e:	4a0c      	ldr	r2, [pc, #48]	; (4007d0 <udi_cdc_rx_start+0xb0>)
  4007a0:	eb02 1284 	add.w	r2, r2, r4, lsl #6
  4007a4:	2101      	movs	r1, #1
  4007a6:	2002      	movs	r0, #2
  4007a8:	4c0a      	ldr	r4, [pc, #40]	; (4007d4 <udi_cdc_rx_start+0xb4>)
  4007aa:	47a0      	blx	r4
  4007ac:	e7de      	b.n	40076c <udi_cdc_rx_start+0x4c>
		return false;
  4007ae:	2000      	movs	r0, #0
  4007b0:	e7dc      	b.n	40076c <udi_cdc_rx_start+0x4c>
  4007b2:	bf00      	nop
  4007b4:	20000520 	.word	0x20000520
  4007b8:	20000a04 	.word	0x20000a04
  4007bc:	20000a0c 	.word	0x20000a0c
  4007c0:	20000a08 	.word	0x20000a08
  4007c4:	20000a00 	.word	0x20000a00
  4007c8:	0040070d 	.word	0x0040070d
  4007cc:	0040086d 	.word	0x0040086d
  4007d0:	20000980 	.word	0x20000980
  4007d4:	00402901 	.word	0x00402901

004007d8 <udi_cdc_data_enable>:
{
  4007d8:	b510      	push	{r4, lr}
	udi_cdc_nb_data_enabled = 0;
  4007da:	2400      	movs	r4, #0
  4007dc:	4b16      	ldr	r3, [pc, #88]	; (400838 <udi_cdc_data_enable+0x60>)
  4007de:	701c      	strb	r4, [r3, #0]
	udi_cdc_tx_trans_ongoing[port] = false;
  4007e0:	4b16      	ldr	r3, [pc, #88]	; (40083c <udi_cdc_data_enable+0x64>)
  4007e2:	701c      	strb	r4, [r3, #0]
	udi_cdc_tx_both_buf_to_send[port] = false;
  4007e4:	4b16      	ldr	r3, [pc, #88]	; (400840 <udi_cdc_data_enable+0x68>)
  4007e6:	701c      	strb	r4, [r3, #0]
	udi_cdc_tx_buf_sel[port] = 0;
  4007e8:	4b16      	ldr	r3, [pc, #88]	; (400844 <udi_cdc_data_enable+0x6c>)
  4007ea:	701c      	strb	r4, [r3, #0]
	udi_cdc_tx_buf_nb[port][0] = 0;
  4007ec:	4b16      	ldr	r3, [pc, #88]	; (400848 <udi_cdc_data_enable+0x70>)
  4007ee:	801c      	strh	r4, [r3, #0]
	udi_cdc_tx_buf_nb[port][1] = 0;
  4007f0:	805c      	strh	r4, [r3, #2]
	udi_cdc_tx_sof_num[port] = 0;
  4007f2:	4b16      	ldr	r3, [pc, #88]	; (40084c <udi_cdc_data_enable+0x74>)
  4007f4:	801c      	strh	r4, [r3, #0]
	udi_cdc_tx_send(port);
  4007f6:	4620      	mov	r0, r4
  4007f8:	4b15      	ldr	r3, [pc, #84]	; (400850 <udi_cdc_data_enable+0x78>)
  4007fa:	4798      	blx	r3
	udi_cdc_rx_trans_ongoing[port] = false;
  4007fc:	4b15      	ldr	r3, [pc, #84]	; (400854 <udi_cdc_data_enable+0x7c>)
  4007fe:	701c      	strb	r4, [r3, #0]
	udi_cdc_rx_buf_sel[port] = 0;
  400800:	4b15      	ldr	r3, [pc, #84]	; (400858 <udi_cdc_data_enable+0x80>)
  400802:	701c      	strb	r4, [r3, #0]
	udi_cdc_rx_buf_nb[port][0] = 0;
  400804:	4b15      	ldr	r3, [pc, #84]	; (40085c <udi_cdc_data_enable+0x84>)
  400806:	801c      	strh	r4, [r3, #0]
	udi_cdc_rx_buf_nb[port][1] = 0;
  400808:	805c      	strh	r4, [r3, #2]
	udi_cdc_rx_pos[port] = 0;
  40080a:	4b15      	ldr	r3, [pc, #84]	; (400860 <udi_cdc_data_enable+0x88>)
  40080c:	801c      	strh	r4, [r3, #0]
	if (!udi_cdc_rx_start(port)) {
  40080e:	4620      	mov	r0, r4
  400810:	4b14      	ldr	r3, [pc, #80]	; (400864 <udi_cdc_data_enable+0x8c>)
  400812:	4798      	blx	r3
  400814:	4601      	mov	r1, r0
  400816:	b140      	cbz	r0, 40082a <udi_cdc_data_enable+0x52>
	udi_cdc_nb_data_enabled++;
  400818:	4a07      	ldr	r2, [pc, #28]	; (400838 <udi_cdc_data_enable+0x60>)
  40081a:	7813      	ldrb	r3, [r2, #0]
  40081c:	3301      	adds	r3, #1
  40081e:	b2db      	uxtb	r3, r3
  400820:	7013      	strb	r3, [r2, #0]
	if (udi_cdc_nb_data_enabled == UDI_CDC_PORT_NB) {
  400822:	7813      	ldrb	r3, [r2, #0]
  400824:	b2db      	uxtb	r3, r3
  400826:	2b01      	cmp	r3, #1
  400828:	d001      	beq.n	40082e <udi_cdc_data_enable+0x56>
}
  40082a:	4608      	mov	r0, r1
  40082c:	bd10      	pop	{r4, pc}
		udi_cdc_data_running = true;
  40082e:	2201      	movs	r2, #1
  400830:	4b0d      	ldr	r3, [pc, #52]	; (400868 <udi_cdc_data_enable+0x90>)
  400832:	701a      	strb	r2, [r3, #0]
  400834:	e7f9      	b.n	40082a <udi_cdc_data_enable+0x52>
  400836:	bf00      	nop
  400838:	2000097c 	.word	0x2000097c
  40083c:	20000aa8 	.word	0x20000aa8
  400840:	20000a18 	.word	0x20000a18
  400844:	20000aa0 	.word	0x20000aa0
  400848:	20000a9c 	.word	0x20000a9c
  40084c:	20000aa4 	.word	0x20000aa4
  400850:	0040041d 	.word	0x0040041d
  400854:	20000a0c 	.word	0x20000a0c
  400858:	20000a04 	.word	0x20000a04
  40085c:	20000a00 	.word	0x20000a00
  400860:	20000a08 	.word	0x20000a08
  400864:	00400721 	.word	0x00400721
  400868:	20000970 	.word	0x20000970

0040086c <udi_cdc_data_received>:
	if (UDD_EP_TRANSFER_OK != status) {
  40086c:	b9e8      	cbnz	r0, 4008aa <udi_cdc_data_received+0x3e>
{
  40086e:	b510      	push	{r4, lr}
  400870:	b082      	sub	sp, #8
  400872:	4610      	mov	r0, r2
	buf_sel_trans = (udi_cdc_rx_buf_sel[port]==0)?1:0;
  400874:	4b0d      	ldr	r3, [pc, #52]	; (4008ac <udi_cdc_data_received+0x40>)
  400876:	781c      	ldrb	r4, [r3, #0]
  400878:	fab4 f484 	clz	r4, r4
  40087c:	0964      	lsrs	r4, r4, #5
	if (!n) {
  40087e:	b151      	cbz	r1, 400896 <udi_cdc_data_received+0x2a>
	udi_cdc_rx_buf_nb[port][buf_sel_trans] = n;
  400880:	b289      	uxth	r1, r1
  400882:	4b0b      	ldr	r3, [pc, #44]	; (4008b0 <udi_cdc_data_received+0x44>)
  400884:	f823 1014 	strh.w	r1, [r3, r4, lsl #1]
	udi_cdc_rx_trans_ongoing[port] = false;
  400888:	2000      	movs	r0, #0
  40088a:	4b0a      	ldr	r3, [pc, #40]	; (4008b4 <udi_cdc_data_received+0x48>)
  40088c:	7018      	strb	r0, [r3, #0]
	udi_cdc_rx_start(port);
  40088e:	4b0a      	ldr	r3, [pc, #40]	; (4008b8 <udi_cdc_data_received+0x4c>)
  400890:	4798      	blx	r3
}
  400892:	b002      	add	sp, #8
  400894:	bd10      	pop	{r4, pc}
		udd_ep_run( ep,
  400896:	4b09      	ldr	r3, [pc, #36]	; (4008bc <udi_cdc_data_received+0x50>)
  400898:	9300      	str	r3, [sp, #0]
  40089a:	2340      	movs	r3, #64	; 0x40
  40089c:	4a08      	ldr	r2, [pc, #32]	; (4008c0 <udi_cdc_data_received+0x54>)
  40089e:	eb02 1284 	add.w	r2, r2, r4, lsl #6
  4008a2:	2101      	movs	r1, #1
  4008a4:	4c07      	ldr	r4, [pc, #28]	; (4008c4 <udi_cdc_data_received+0x58>)
  4008a6:	47a0      	blx	r4
		return;
  4008a8:	e7f3      	b.n	400892 <udi_cdc_data_received+0x26>
  4008aa:	4770      	bx	lr
  4008ac:	20000a04 	.word	0x20000a04
  4008b0:	20000a00 	.word	0x20000a00
  4008b4:	20000a0c 	.word	0x20000a0c
  4008b8:	00400721 	.word	0x00400721
  4008bc:	0040086d 	.word	0x0040086d
  4008c0:	20000980 	.word	0x20000980
  4008c4:	00402901 	.word	0x00402901

004008c8 <udi_cdc_is_rx_ready>:

bool udi_cdc_is_rx_ready(void)
{
  4008c8:	b508      	push	{r3, lr}
	return udi_cdc_multi_is_rx_ready(0);
  4008ca:	2000      	movs	r0, #0
  4008cc:	4b01      	ldr	r3, [pc, #4]	; (4008d4 <udi_cdc_is_rx_ready+0xc>)
  4008ce:	4798      	blx	r3
}
  4008d0:	bd08      	pop	{r3, pc}
  4008d2:	bf00      	nop
  4008d4:	0040070d 	.word	0x0040070d

004008d8 <udi_cdc_multi_getc>:

int udi_cdc_multi_getc(uint8_t port)
{
  4008d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  4008dc:	b082      	sub	sp, #8

#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
#endif

	b_databit_9 = (9 == udi_cdc_line_coding[port].bDataBits);
  4008de:	4b25      	ldr	r3, [pc, #148]	; (400974 <udi_cdc_multi_getc+0x9c>)
  4008e0:	f893 8006 	ldrb.w	r8, [r3, #6]
  4008e4:	f1b8 0f09 	cmp.w	r8, #9
  4008e8:	bf14      	ite	ne
  4008ea:	f04f 0800 	movne.w	r8, #0
  4008ee:	f04f 0801 	moveq.w	r8, #1
	int rx_data = 0;
  4008f2:	f04f 0a00 	mov.w	sl, #0
	cpu_irq_disable();
  4008f6:	4c20      	ldr	r4, [pc, #128]	; (400978 <udi_cdc_multi_getc+0xa0>)
  4008f8:	46d1      	mov	r9, sl
  4008fa:	4657      	mov	r7, sl

udi_cdc_getc_process_one_byte:
	// Check available data
	flags = cpu_irq_save();
	pos = udi_cdc_rx_pos[port];
  4008fc:	4d1f      	ldr	r5, [pc, #124]	; (40097c <udi_cdc_multi_getc+0xa4>)
	buf_sel = udi_cdc_rx_buf_sel[port];
  4008fe:	4e20      	ldr	r6, [pc, #128]	; (400980 <udi_cdc_multi_getc+0xa8>)
  400900:	e004      	b.n	40090c <udi_cdc_multi_getc+0x34>
	again = pos >= udi_cdc_rx_buf_nb[port][buf_sel];
	cpu_irq_restore(flags);
	while (again) {
  400902:	428b      	cmp	r3, r1
  400904:	d323      	bcc.n	40094e <udi_cdc_multi_getc+0x76>
		if (!udi_cdc_data_running) {
  400906:	4b1f      	ldr	r3, [pc, #124]	; (400984 <udi_cdc_multi_getc+0xac>)
  400908:	781b      	ldrb	r3, [r3, #0]
  40090a:	b1d3      	cbz	r3, 400942 <udi_cdc_multi_getc+0x6a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  40090c:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
  400910:	fab3 f383 	clz	r3, r3
  400914:	095b      	lsrs	r3, r3, #5
  400916:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
  400918:	b672      	cpsid	i
  40091a:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  40091e:	7027      	strb	r7, [r4, #0]
	return flags;
  400920:	9801      	ldr	r0, [sp, #4]
	pos = udi_cdc_rx_pos[port];
  400922:	882b      	ldrh	r3, [r5, #0]
  400924:	b29b      	uxth	r3, r3
	buf_sel = udi_cdc_rx_buf_sel[port];
  400926:	7832      	ldrb	r2, [r6, #0]
  400928:	b2d2      	uxtb	r2, r2
	again = pos >= udi_cdc_rx_buf_nb[port][buf_sel];
  40092a:	4917      	ldr	r1, [pc, #92]	; (400988 <udi_cdc_multi_getc+0xb0>)
  40092c:	f831 1012 	ldrh.w	r1, [r1, r2, lsl #1]
  400930:	b289      	uxth	r1, r1
	if (cpu_irq_is_enabled_flags(flags))
  400932:	2800      	cmp	r0, #0
  400934:	d0e5      	beq.n	400902 <udi_cdc_multi_getc+0x2a>
		cpu_irq_enable();
  400936:	2001      	movs	r0, #1
  400938:	7020      	strb	r0, [r4, #0]
  40093a:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  40093e:	b662      	cpsie	i
  400940:	e7df      	b.n	400902 <udi_cdc_multi_getc+0x2a>
			return 0;
  400942:	f04f 0a00 	mov.w	sl, #0
		b_databit_9 = false;
		rx_data = rx_data << 8;
		goto udi_cdc_getc_process_one_byte;
	}
	return rx_data;
}
  400946:	4650      	mov	r0, sl
  400948:	b002      	add	sp, #8
  40094a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	rx_data |= udi_cdc_rx_buf[port][buf_sel][pos];
  40094e:	490f      	ldr	r1, [pc, #60]	; (40098c <udi_cdc_multi_getc+0xb4>)
  400950:	eb01 1282 	add.w	r2, r1, r2, lsl #6
  400954:	5cd2      	ldrb	r2, [r2, r3]
  400956:	ea42 0a0a 	orr.w	sl, r2, sl
	udi_cdc_rx_pos[port] = pos+1;
  40095a:	3301      	adds	r3, #1
  40095c:	b29b      	uxth	r3, r3
  40095e:	802b      	strh	r3, [r5, #0]
	udi_cdc_rx_start(port);
  400960:	4648      	mov	r0, r9
  400962:	4b0b      	ldr	r3, [pc, #44]	; (400990 <udi_cdc_multi_getc+0xb8>)
  400964:	4798      	blx	r3
	if (b_databit_9) {
  400966:	f1b8 0f00 	cmp.w	r8, #0
  40096a:	d0ec      	beq.n	400946 <udi_cdc_multi_getc+0x6e>
		rx_data = rx_data << 8;
  40096c:	ea4f 2a0a 	mov.w	sl, sl, lsl #8
		b_databit_9 = false;
  400970:	46c8      	mov	r8, r9
		goto udi_cdc_getc_process_one_byte;
  400972:	e7cb      	b.n	40090c <udi_cdc_multi_getc+0x34>
  400974:	20000974 	.word	0x20000974
  400978:	20000520 	.word	0x20000520
  40097c:	20000a08 	.word	0x20000a08
  400980:	20000a04 	.word	0x20000a04
  400984:	20000970 	.word	0x20000970
  400988:	20000a00 	.word	0x20000a00
  40098c:	20000980 	.word	0x20000980
  400990:	00400721 	.word	0x00400721

00400994 <udi_cdc_getc>:

int udi_cdc_getc(void)
{
  400994:	b508      	push	{r3, lr}
	return udi_cdc_multi_getc(0);
  400996:	2000      	movs	r0, #0
  400998:	4b01      	ldr	r3, [pc, #4]	; (4009a0 <udi_cdc_getc+0xc>)
  40099a:	4798      	blx	r3
}
  40099c:	bd08      	pop	{r3, pc}
  40099e:	bf00      	nop
  4009a0:	004008d9 	.word	0x004008d9

004009a4 <udi_cdc_multi_read_buf>:

iram_size_t udi_cdc_multi_read_buf(uint8_t port, void* buf, iram_size_t size)
{
  4009a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4009a8:	b083      	sub	sp, #12
  4009aa:	4615      	mov	r5, r2
	irqflags_t flags;
	uint8_t *ptr_buf = (uint8_t *)buf;
  4009ac:	4688      	mov	r8, r1
	cpu_irq_disable();
  4009ae:	4f24      	ldr	r7, [pc, #144]	; (400a40 <udi_cdc_multi_read_buf+0x9c>)
  4009b0:	f04f 0b00 	mov.w	fp, #0
  4009b4:	46da      	mov	sl, fp
#endif

udi_cdc_read_buf_loop_wait:
	// Check available data
	flags = cpu_irq_save();
	pos = udi_cdc_rx_pos[port];
  4009b6:	4e23      	ldr	r6, [pc, #140]	; (400a44 <udi_cdc_multi_read_buf+0xa0>)
	buf_sel = udi_cdc_rx_buf_sel[port];
  4009b8:	f8df 90a0 	ldr.w	r9, [pc, #160]	; 400a5c <udi_cdc_multi_read_buf+0xb8>
  4009bc:	e01a      	b.n	4009f4 <udi_cdc_multi_read_buf+0x50>
		}
		goto udi_cdc_read_buf_loop_wait;
	}

	// Read data
	copy_nb = udi_cdc_rx_buf_nb[port][buf_sel] - pos;
  4009be:	4a22      	ldr	r2, [pc, #136]	; (400a48 <udi_cdc_multi_read_buf+0xa4>)
  4009c0:	f832 4013 	ldrh.w	r4, [r2, r3, lsl #1]
  4009c4:	b2a4      	uxth	r4, r4
  4009c6:	1a64      	subs	r4, r4, r1
  4009c8:	42ac      	cmp	r4, r5
  4009ca:	bf28      	it	cs
  4009cc:	462c      	movcs	r4, r5
	if (copy_nb>size) {
		copy_nb = size;
	}
	memcpy(ptr_buf, &udi_cdc_rx_buf[port][buf_sel][pos], copy_nb);
  4009ce:	eb01 1183 	add.w	r1, r1, r3, lsl #6
  4009d2:	4622      	mov	r2, r4
  4009d4:	4b1d      	ldr	r3, [pc, #116]	; (400a4c <udi_cdc_multi_read_buf+0xa8>)
  4009d6:	4419      	add	r1, r3
  4009d8:	4640      	mov	r0, r8
  4009da:	4b1d      	ldr	r3, [pc, #116]	; (400a50 <udi_cdc_multi_read_buf+0xac>)
  4009dc:	4798      	blx	r3
	udi_cdc_rx_pos[port] += copy_nb;
  4009de:	8833      	ldrh	r3, [r6, #0]
  4009e0:	fa14 f383 	uxtah	r3, r4, r3
  4009e4:	b29b      	uxth	r3, r3
  4009e6:	8033      	strh	r3, [r6, #0]
	ptr_buf += copy_nb;
  4009e8:	44a0      	add	r8, r4
	size -= copy_nb;
  4009ea:	1b2d      	subs	r5, r5, r4
	udi_cdc_rx_start(port);
  4009ec:	4658      	mov	r0, fp
  4009ee:	4b19      	ldr	r3, [pc, #100]	; (400a54 <udi_cdc_multi_read_buf+0xb0>)
  4009f0:	4798      	blx	r3

	if (size) {
  4009f2:	b305      	cbz	r5, 400a36 <udi_cdc_multi_read_buf+0x92>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  4009f4:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
  4009f8:	fab3 f383 	clz	r3, r3
  4009fc:	095b      	lsrs	r3, r3, #5
  4009fe:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
  400a00:	b672      	cpsid	i
  400a02:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  400a06:	f887 a000 	strb.w	sl, [r7]
	return flags;
  400a0a:	9801      	ldr	r0, [sp, #4]
	pos = udi_cdc_rx_pos[port];
  400a0c:	8831      	ldrh	r1, [r6, #0]
  400a0e:	b289      	uxth	r1, r1
	buf_sel = udi_cdc_rx_buf_sel[port];
  400a10:	f899 3000 	ldrb.w	r3, [r9]
  400a14:	b2db      	uxtb	r3, r3
	again = pos >= udi_cdc_rx_buf_nb[port][buf_sel];
  400a16:	4a0c      	ldr	r2, [pc, #48]	; (400a48 <udi_cdc_multi_read_buf+0xa4>)
  400a18:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
  400a1c:	b292      	uxth	r2, r2
	if (cpu_irq_is_enabled_flags(flags))
  400a1e:	b120      	cbz	r0, 400a2a <udi_cdc_multi_read_buf+0x86>
		cpu_irq_enable();
  400a20:	2001      	movs	r0, #1
  400a22:	7038      	strb	r0, [r7, #0]
  400a24:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  400a28:	b662      	cpsie	i
	while (again) {
  400a2a:	4291      	cmp	r1, r2
  400a2c:	d3c7      	bcc.n	4009be <udi_cdc_multi_read_buf+0x1a>
		if (!udi_cdc_data_running) {
  400a2e:	4b0a      	ldr	r3, [pc, #40]	; (400a58 <udi_cdc_multi_read_buf+0xb4>)
  400a30:	781b      	ldrb	r3, [r3, #0]
  400a32:	2b00      	cmp	r3, #0
  400a34:	d1de      	bne.n	4009f4 <udi_cdc_multi_read_buf+0x50>
		goto udi_cdc_read_buf_loop_wait;
	}
	return 0;
}
  400a36:	4628      	mov	r0, r5
  400a38:	b003      	add	sp, #12
  400a3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  400a3e:	bf00      	nop
  400a40:	20000520 	.word	0x20000520
  400a44:	20000a08 	.word	0x20000a08
  400a48:	20000a00 	.word	0x20000a00
  400a4c:	20000980 	.word	0x20000980
  400a50:	00402f61 	.word	0x00402f61
  400a54:	00400721 	.word	0x00400721
  400a58:	20000970 	.word	0x20000970
  400a5c:	20000a04 	.word	0x20000a04

00400a60 <udi_cdc_read_no_polling>:
	}
	return(nb_avail_data);
}

iram_size_t udi_cdc_read_no_polling(void* buf, iram_size_t size)
{
  400a60:	b570      	push	{r4, r5, r6, lr}
  400a62:	b082      	sub	sp, #8
	if (!udi_cdc_data_running) {
  400a64:	4b28      	ldr	r3, [pc, #160]	; (400b08 <udi_cdc_read_no_polling+0xa8>)
  400a66:	781b      	ldrb	r3, [r3, #0]
  400a68:	2b00      	cmp	r3, #0
  400a6a:	d048      	beq.n	400afe <udi_cdc_read_no_polling+0x9e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  400a6c:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
  400a70:	fab3 f383 	clz	r3, r3
  400a74:	095b      	lsrs	r3, r3, #5
  400a76:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
  400a78:	b672      	cpsid	i
  400a7a:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  400a7e:	2200      	movs	r2, #0
  400a80:	4b22      	ldr	r3, [pc, #136]	; (400b0c <udi_cdc_read_no_polling+0xac>)
  400a82:	701a      	strb	r2, [r3, #0]
	return flags;
  400a84:	9d01      	ldr	r5, [sp, #4]
	pos = udi_cdc_rx_pos[port];
  400a86:	4b22      	ldr	r3, [pc, #136]	; (400b10 <udi_cdc_read_no_polling+0xb0>)
  400a88:	881b      	ldrh	r3, [r3, #0]
  400a8a:	b29b      	uxth	r3, r3
	buf_sel = udi_cdc_rx_buf_sel[port];
  400a8c:	4a21      	ldr	r2, [pc, #132]	; (400b14 <udi_cdc_read_no_polling+0xb4>)
  400a8e:	7812      	ldrb	r2, [r2, #0]
  400a90:	b2d2      	uxtb	r2, r2
	nb_avail_data = udi_cdc_rx_buf_nb[port][buf_sel] - pos;
  400a92:	4c21      	ldr	r4, [pc, #132]	; (400b18 <udi_cdc_read_no_polling+0xb8>)
  400a94:	f834 4012 	ldrh.w	r4, [r4, r2, lsl #1]
  400a98:	b2a4      	uxth	r4, r4
  400a9a:	1ae4      	subs	r4, r4, r3
	if (cpu_irq_is_enabled_flags(flags))
  400a9c:	b12d      	cbz	r5, 400aaa <udi_cdc_read_no_polling+0x4a>
		cpu_irq_enable();
  400a9e:	2601      	movs	r6, #1
  400aa0:	4d1a      	ldr	r5, [pc, #104]	; (400b0c <udi_cdc_read_no_polling+0xac>)
  400aa2:	702e      	strb	r6, [r5, #0]
  400aa4:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  400aa8:	b662      	cpsie	i
  400aaa:	42a1      	cmp	r1, r4
  400aac:	bf28      	it	cs
  400aae:	4621      	movcs	r1, r4
  400ab0:	460d      	mov	r5, r1
	if(size>0) {
  400ab2:	b329      	cbz	r1, 400b00 <udi_cdc_read_no_polling+0xa0>
		memcpy(ptr_buf, &udi_cdc_rx_buf[port][buf_sel][pos], size);
  400ab4:	eb03 1382 	add.w	r3, r3, r2, lsl #6
  400ab8:	460a      	mov	r2, r1
  400aba:	4918      	ldr	r1, [pc, #96]	; (400b1c <udi_cdc_read_no_polling+0xbc>)
  400abc:	4419      	add	r1, r3
  400abe:	4b18      	ldr	r3, [pc, #96]	; (400b20 <udi_cdc_read_no_polling+0xc0>)
  400ac0:	4798      	blx	r3
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  400ac2:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
  400ac6:	fab3 f383 	clz	r3, r3
  400aca:	095b      	lsrs	r3, r3, #5
  400acc:	9300      	str	r3, [sp, #0]
  __ASM volatile ("cpsid i" : : : "memory");
  400ace:	b672      	cpsid	i
  400ad0:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  400ad4:	2200      	movs	r2, #0
  400ad6:	4b0d      	ldr	r3, [pc, #52]	; (400b0c <udi_cdc_read_no_polling+0xac>)
  400ad8:	701a      	strb	r2, [r3, #0]
	return flags;
  400ada:	9a00      	ldr	r2, [sp, #0]
		udi_cdc_rx_pos[port] += size;
  400adc:	4b0c      	ldr	r3, [pc, #48]	; (400b10 <udi_cdc_read_no_polling+0xb0>)
  400ade:	8819      	ldrh	r1, [r3, #0]
  400ae0:	fa15 f581 	uxtah	r5, r5, r1
  400ae4:	b2ad      	uxth	r5, r5
  400ae6:	801d      	strh	r5, [r3, #0]
	if (cpu_irq_is_enabled_flags(flags))
  400ae8:	b12a      	cbz	r2, 400af6 <udi_cdc_read_no_polling+0x96>
		cpu_irq_enable();
  400aea:	2201      	movs	r2, #1
  400aec:	4b07      	ldr	r3, [pc, #28]	; (400b0c <udi_cdc_read_no_polling+0xac>)
  400aee:	701a      	strb	r2, [r3, #0]
  400af0:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  400af4:	b662      	cpsie	i
		udi_cdc_rx_start(port);
  400af6:	2000      	movs	r0, #0
  400af8:	4b0a      	ldr	r3, [pc, #40]	; (400b24 <udi_cdc_read_no_polling+0xc4>)
  400afa:	4798      	blx	r3
  400afc:	e000      	b.n	400b00 <udi_cdc_read_no_polling+0xa0>
		return 0;
  400afe:	2400      	movs	r4, #0
	return udi_cdc_multi_read_no_polling(0, buf, size);
}
  400b00:	4620      	mov	r0, r4
  400b02:	b002      	add	sp, #8
  400b04:	bd70      	pop	{r4, r5, r6, pc}
  400b06:	bf00      	nop
  400b08:	20000970 	.word	0x20000970
  400b0c:	20000520 	.word	0x20000520
  400b10:	20000a08 	.word	0x20000a08
  400b14:	20000a04 	.word	0x20000a04
  400b18:	20000a00 	.word	0x20000a00
  400b1c:	20000980 	.word	0x20000980
  400b20:	00402f61 	.word	0x00402f61
  400b24:	00400721 	.word	0x00400721

00400b28 <udi_cdc_read_buf>:

iram_size_t udi_cdc_read_buf(void* buf, iram_size_t size)
{
  400b28:	b508      	push	{r3, lr}
	return udi_cdc_multi_read_buf(0, buf, size);
  400b2a:	460a      	mov	r2, r1
  400b2c:	4601      	mov	r1, r0
  400b2e:	2000      	movs	r0, #0
  400b30:	4b01      	ldr	r3, [pc, #4]	; (400b38 <udi_cdc_read_buf+0x10>)
  400b32:	4798      	blx	r3
}
  400b34:	bd08      	pop	{r3, pc}
  400b36:	bf00      	nop
  400b38:	004009a5 	.word	0x004009a5

00400b3c <udi_cdc_multi_get_free_tx_buffer>:

iram_size_t udi_cdc_multi_get_free_tx_buffer(uint8_t port)
{
  400b3c:	b082      	sub	sp, #8
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  400b3e:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
  400b42:	fab3 f383 	clz	r3, r3
  400b46:	095b      	lsrs	r3, r3, #5
  400b48:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
  400b4a:	b672      	cpsid	i
  400b4c:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  400b50:	2200      	movs	r2, #0
  400b52:	4b14      	ldr	r3, [pc, #80]	; (400ba4 <udi_cdc_multi_get_free_tx_buffer+0x68>)
  400b54:	701a      	strb	r2, [r3, #0]
	return flags;
  400b56:	9a01      	ldr	r2, [sp, #4]
#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
#endif

	flags = cpu_irq_save();
	buf_sel = udi_cdc_tx_buf_sel[port];
  400b58:	4b13      	ldr	r3, [pc, #76]	; (400ba8 <udi_cdc_multi_get_free_tx_buffer+0x6c>)
  400b5a:	781b      	ldrb	r3, [r3, #0]
  400b5c:	b2db      	uxtb	r3, r3
	buf_sel_nb = udi_cdc_tx_buf_nb[port][buf_sel];
  400b5e:	4913      	ldr	r1, [pc, #76]	; (400bac <udi_cdc_multi_get_free_tx_buffer+0x70>)
  400b60:	f831 0013 	ldrh.w	r0, [r1, r3, lsl #1]
	if (buf_sel_nb == UDI_CDC_TX_BUFFERS) {
  400b64:	2840      	cmp	r0, #64	; 0x40
  400b66:	d00a      	beq.n	400b7e <udi_cdc_multi_get_free_tx_buffer+0x42>
			udi_cdc_tx_both_buf_to_send[port] = true;
			udi_cdc_tx_buf_sel[port] = (buf_sel == 0)? 1 : 0;
			buf_sel_nb = 0;
		}
	}
	retval = UDI_CDC_TX_BUFFERS - buf_sel_nb;  
  400b68:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
	if (cpu_irq_is_enabled_flags(flags))
  400b6c:	b12a      	cbz	r2, 400b7a <udi_cdc_multi_get_free_tx_buffer+0x3e>
		cpu_irq_enable();
  400b6e:	2201      	movs	r2, #1
  400b70:	4b0c      	ldr	r3, [pc, #48]	; (400ba4 <udi_cdc_multi_get_free_tx_buffer+0x68>)
  400b72:	701a      	strb	r2, [r3, #0]
  400b74:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  400b78:	b662      	cpsie	i
	cpu_irq_restore(flags);
	return retval;
}
  400b7a:	b002      	add	sp, #8
  400b7c:	4770      	bx	lr
		if ((!udi_cdc_tx_trans_ongoing[port])
  400b7e:	490c      	ldr	r1, [pc, #48]	; (400bb0 <udi_cdc_multi_get_free_tx_buffer+0x74>)
  400b80:	7809      	ldrb	r1, [r1, #0]
  400b82:	2900      	cmp	r1, #0
  400b84:	d1f0      	bne.n	400b68 <udi_cdc_multi_get_free_tx_buffer+0x2c>
			&& (!udi_cdc_tx_both_buf_to_send[port])) {
  400b86:	490b      	ldr	r1, [pc, #44]	; (400bb4 <udi_cdc_multi_get_free_tx_buffer+0x78>)
  400b88:	7809      	ldrb	r1, [r1, #0]
  400b8a:	2900      	cmp	r1, #0
  400b8c:	d1ec      	bne.n	400b68 <udi_cdc_multi_get_free_tx_buffer+0x2c>
			udi_cdc_tx_both_buf_to_send[port] = true;
  400b8e:	2001      	movs	r0, #1
  400b90:	4908      	ldr	r1, [pc, #32]	; (400bb4 <udi_cdc_multi_get_free_tx_buffer+0x78>)
  400b92:	7008      	strb	r0, [r1, #0]
			udi_cdc_tx_buf_sel[port] = (buf_sel == 0)? 1 : 0;
  400b94:	fab3 f383 	clz	r3, r3
  400b98:	095b      	lsrs	r3, r3, #5
  400b9a:	4903      	ldr	r1, [pc, #12]	; (400ba8 <udi_cdc_multi_get_free_tx_buffer+0x6c>)
  400b9c:	700b      	strb	r3, [r1, #0]
			buf_sel_nb = 0;
  400b9e:	2000      	movs	r0, #0
  400ba0:	e7e2      	b.n	400b68 <udi_cdc_multi_get_free_tx_buffer+0x2c>
  400ba2:	bf00      	nop
  400ba4:	20000520 	.word	0x20000520
  400ba8:	20000aa0 	.word	0x20000aa0
  400bac:	20000a9c 	.word	0x20000a9c
  400bb0:	20000aa8 	.word	0x20000aa8
  400bb4:	20000a18 	.word	0x20000a18

00400bb8 <udi_cdc_multi_is_tx_ready>:
{
	return udi_cdc_multi_get_free_tx_buffer(0);
}

bool udi_cdc_multi_is_tx_ready(uint8_t port)
{
  400bb8:	b508      	push	{r3, lr}
	return (udi_cdc_multi_get_free_tx_buffer(port) != 0);
  400bba:	4b03      	ldr	r3, [pc, #12]	; (400bc8 <udi_cdc_multi_is_tx_ready+0x10>)
  400bbc:	4798      	blx	r3
}
  400bbe:	3000      	adds	r0, #0
  400bc0:	bf18      	it	ne
  400bc2:	2001      	movne	r0, #1
  400bc4:	bd08      	pop	{r3, pc}
  400bc6:	bf00      	nop
  400bc8:	00400b3d 	.word	0x00400b3d

00400bcc <udi_cdc_is_tx_ready>:

bool udi_cdc_is_tx_ready(void)
{
  400bcc:	b508      	push	{r3, lr}
	return udi_cdc_multi_is_tx_ready(0);
  400bce:	2000      	movs	r0, #0
  400bd0:	4b01      	ldr	r3, [pc, #4]	; (400bd8 <udi_cdc_is_tx_ready+0xc>)
  400bd2:	4798      	blx	r3
}
  400bd4:	bd08      	pop	{r3, pc}
  400bd6:	bf00      	nop
  400bd8:	00400bb9 	.word	0x00400bb9

00400bdc <udi_cdc_multi_putc>:

int udi_cdc_multi_putc(uint8_t port, int value)
{
  400bdc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  400be0:	b082      	sub	sp, #8
  400be2:	460c      	mov	r4, r1

#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
#endif

	b_databit_9 = (9 == udi_cdc_line_coding[port].bDataBits);
  400be4:	4b1d      	ldr	r3, [pc, #116]	; (400c5c <udi_cdc_multi_putc+0x80>)
  400be6:	799d      	ldrb	r5, [r3, #6]
  400be8:	2d09      	cmp	r5, #9
  400bea:	bf14      	ite	ne
  400bec:	2500      	movne	r5, #0
  400bee:	2501      	moveq	r5, #1

udi_cdc_putc_process_one_byte:
	// Check available space
	if (!udi_cdc_multi_is_tx_ready(port)) {
  400bf0:	4e1b      	ldr	r6, [pc, #108]	; (400c60 <udi_cdc_multi_putc+0x84>)
	cpu_irq_disable();
  400bf2:	4f1c      	ldr	r7, [pc, #112]	; (400c64 <udi_cdc_multi_putc+0x88>)
		goto udi_cdc_putc_process_one_byte;
	}

	// Write value
	flags = cpu_irq_save();
	buf_sel = udi_cdc_tx_buf_sel[port];
  400bf4:	f8df 807c 	ldr.w	r8, [pc, #124]	; 400c74 <udi_cdc_multi_putc+0x98>
  400bf8:	e022      	b.n	400c40 <udi_cdc_multi_putc+0x64>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  400bfa:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
  400bfe:	fab3 f383 	clz	r3, r3
  400c02:	095b      	lsrs	r3, r3, #5
  400c04:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
  400c06:	b672      	cpsid	i
  400c08:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  400c0c:	2300      	movs	r3, #0
  400c0e:	703b      	strb	r3, [r7, #0]
	return flags;
  400c10:	9801      	ldr	r0, [sp, #4]
  400c12:	f898 3000 	ldrb.w	r3, [r8]
  400c16:	b2db      	uxtb	r3, r3
	udi_cdc_tx_buf[port][buf_sel][udi_cdc_tx_buf_nb[port][buf_sel]++] = value;
  400c18:	4a13      	ldr	r2, [pc, #76]	; (400c68 <udi_cdc_multi_putc+0x8c>)
  400c1a:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
  400c1e:	f101 0e01 	add.w	lr, r1, #1
  400c22:	f822 e013 	strh.w	lr, [r2, r3, lsl #1]
  400c26:	4a11      	ldr	r2, [pc, #68]	; (400c6c <udi_cdc_multi_putc+0x90>)
  400c28:	eb02 1383 	add.w	r3, r2, r3, lsl #6
  400c2c:	545c      	strb	r4, [r3, r1]
	if (cpu_irq_is_enabled_flags(flags))
  400c2e:	b120      	cbz	r0, 400c3a <udi_cdc_multi_putc+0x5e>
		cpu_irq_enable();
  400c30:	2301      	movs	r3, #1
  400c32:	703b      	strb	r3, [r7, #0]
  400c34:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  400c38:	b662      	cpsie	i
	cpu_irq_restore(flags);

	if (b_databit_9) {
  400c3a:	b165      	cbz	r5, 400c56 <udi_cdc_multi_putc+0x7a>
		// Send MSB
		b_databit_9 = false;
		value = value >> 8;
  400c3c:	1224      	asrs	r4, r4, #8
		b_databit_9 = false;
  400c3e:	2500      	movs	r5, #0
	if (!udi_cdc_multi_is_tx_ready(port)) {
  400c40:	2000      	movs	r0, #0
  400c42:	47b0      	blx	r6
  400c44:	2800      	cmp	r0, #0
  400c46:	d1d8      	bne.n	400bfa <udi_cdc_multi_putc+0x1e>
		if (!udi_cdc_data_running) {
  400c48:	4b09      	ldr	r3, [pc, #36]	; (400c70 <udi_cdc_multi_putc+0x94>)
  400c4a:	781b      	ldrb	r3, [r3, #0]
  400c4c:	2b00      	cmp	r3, #0
  400c4e:	d1f7      	bne.n	400c40 <udi_cdc_multi_putc+0x64>
		goto udi_cdc_putc_process_one_byte;
	}
	return true;
}
  400c50:	b002      	add	sp, #8
  400c52:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return true;
  400c56:	2001      	movs	r0, #1
  400c58:	e7fa      	b.n	400c50 <udi_cdc_multi_putc+0x74>
  400c5a:	bf00      	nop
  400c5c:	20000974 	.word	0x20000974
  400c60:	00400bb9 	.word	0x00400bb9
  400c64:	20000520 	.word	0x20000520
  400c68:	20000a9c 	.word	0x20000a9c
  400c6c:	20000a1c 	.word	0x20000a1c
  400c70:	20000970 	.word	0x20000970
  400c74:	20000aa0 	.word	0x20000aa0

00400c78 <udi_cdc_putc>:

int udi_cdc_putc(int value)
{
  400c78:	b508      	push	{r3, lr}
	return udi_cdc_multi_putc(0, value);
  400c7a:	4601      	mov	r1, r0
  400c7c:	2000      	movs	r0, #0
  400c7e:	4b01      	ldr	r3, [pc, #4]	; (400c84 <udi_cdc_putc+0xc>)
  400c80:	4798      	blx	r3
}
  400c82:	bd08      	pop	{r3, pc}
  400c84:	00400bdd 	.word	0x00400bdd

00400c88 <udi_cdc_multi_write_buf>:

iram_size_t udi_cdc_multi_write_buf(uint8_t port, const void* buf, iram_size_t size)
{
  400c88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  400c8c:	b083      	sub	sp, #12
  400c8e:	4617      	mov	r7, r2

#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
#endif

	if (9 == udi_cdc_line_coding[port].bDataBits) {
  400c90:	4b22      	ldr	r3, [pc, #136]	; (400d1c <udi_cdc_multi_write_buf+0x94>)
  400c92:	799b      	ldrb	r3, [r3, #6]
  400c94:	2b09      	cmp	r3, #9
		size *=2;
  400c96:	bf08      	it	eq
  400c98:	0057      	lsleq	r7, r2, #1
{
  400c9a:	4688      	mov	r8, r1
	}

udi_cdc_write_buf_loop_wait:
	// Check available space
	if (!udi_cdc_multi_is_tx_ready(port)) {
  400c9c:	f8df a094 	ldr.w	sl, [pc, #148]	; 400d34 <udi_cdc_multi_write_buf+0xac>
  400ca0:	e030      	b.n	400d04 <udi_cdc_multi_write_buf+0x7c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  400ca2:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
  400ca6:	fab3 f383 	clz	r3, r3
  400caa:	095b      	lsrs	r3, r3, #5
  400cac:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
  400cae:	b672      	cpsid	i
  400cb0:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  400cb4:	2300      	movs	r3, #0
  400cb6:	4a1a      	ldr	r2, [pc, #104]	; (400d20 <udi_cdc_multi_write_buf+0x98>)
  400cb8:	7013      	strb	r3, [r2, #0]
	return flags;
  400cba:	f8dd b004 	ldr.w	fp, [sp, #4]
		goto udi_cdc_write_buf_loop_wait;
	}

	// Write values
	flags = cpu_irq_save();
	buf_sel = udi_cdc_tx_buf_sel[port];
  400cbe:	4b19      	ldr	r3, [pc, #100]	; (400d24 <udi_cdc_multi_write_buf+0x9c>)
  400cc0:	781d      	ldrb	r5, [r3, #0]
  400cc2:	b2ed      	uxtb	r5, r5
	buf_nb = udi_cdc_tx_buf_nb[port][buf_sel];
  400cc4:	f8df 9070 	ldr.w	r9, [pc, #112]	; 400d38 <udi_cdc_multi_write_buf+0xb0>
  400cc8:	f839 6015 	ldrh.w	r6, [r9, r5, lsl #1]
	copy_nb = UDI_CDC_TX_BUFFERS - buf_nb;
  400ccc:	f1c6 0440 	rsb	r4, r6, #64	; 0x40
  400cd0:	42bc      	cmp	r4, r7
  400cd2:	bf28      	it	cs
  400cd4:	463c      	movcs	r4, r7
	if (copy_nb > size) {
		copy_nb = size;
	}
	memcpy(&udi_cdc_tx_buf[port][buf_sel][buf_nb], ptr_buf, copy_nb);
  400cd6:	eb06 1385 	add.w	r3, r6, r5, lsl #6
  400cda:	4622      	mov	r2, r4
  400cdc:	4641      	mov	r1, r8
  400cde:	4812      	ldr	r0, [pc, #72]	; (400d28 <udi_cdc_multi_write_buf+0xa0>)
  400ce0:	4418      	add	r0, r3
  400ce2:	4b12      	ldr	r3, [pc, #72]	; (400d2c <udi_cdc_multi_write_buf+0xa4>)
  400ce4:	4798      	blx	r3
	udi_cdc_tx_buf_nb[port][buf_sel] = buf_nb + copy_nb;
  400ce6:	4426      	add	r6, r4
  400ce8:	f829 6015 	strh.w	r6, [r9, r5, lsl #1]
	if (cpu_irq_is_enabled_flags(flags))
  400cec:	f1bb 0f00 	cmp.w	fp, #0
  400cf0:	d005      	beq.n	400cfe <udi_cdc_multi_write_buf+0x76>
		cpu_irq_enable();
  400cf2:	2301      	movs	r3, #1
  400cf4:	4a0a      	ldr	r2, [pc, #40]	; (400d20 <udi_cdc_multi_write_buf+0x98>)
  400cf6:	7013      	strb	r3, [r2, #0]
  400cf8:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  400cfc:	b662      	cpsie	i
	cpu_irq_restore(flags);

	// Update buffer pointer
	ptr_buf = ptr_buf + copy_nb;
  400cfe:	44a0      	add	r8, r4
	size -= copy_nb;

	if (size) {
  400d00:	1b3f      	subs	r7, r7, r4
  400d02:	d007      	beq.n	400d14 <udi_cdc_multi_write_buf+0x8c>
	if (!udi_cdc_multi_is_tx_ready(port)) {
  400d04:	2000      	movs	r0, #0
  400d06:	47d0      	blx	sl
  400d08:	2800      	cmp	r0, #0
  400d0a:	d1ca      	bne.n	400ca2 <udi_cdc_multi_write_buf+0x1a>
		if (!udi_cdc_data_running) {
  400d0c:	4b08      	ldr	r3, [pc, #32]	; (400d30 <udi_cdc_multi_write_buf+0xa8>)
  400d0e:	781b      	ldrb	r3, [r3, #0]
  400d10:	2b00      	cmp	r3, #0
  400d12:	d1f7      	bne.n	400d04 <udi_cdc_multi_write_buf+0x7c>
		goto udi_cdc_write_buf_loop_wait;
	}

	return 0;
}
  400d14:	4638      	mov	r0, r7
  400d16:	b003      	add	sp, #12
  400d18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  400d1c:	20000974 	.word	0x20000974
  400d20:	20000520 	.word	0x20000520
  400d24:	20000aa0 	.word	0x20000aa0
  400d28:	20000a1c 	.word	0x20000a1c
  400d2c:	00402f61 	.word	0x00402f61
  400d30:	20000970 	.word	0x20000970
  400d34:	00400bb9 	.word	0x00400bb9
  400d38:	20000a9c 	.word	0x20000a9c

00400d3c <udi_cdc_write_buf>:

iram_size_t udi_cdc_write_buf(const void* buf, iram_size_t size)
{
  400d3c:	b508      	push	{r3, lr}
	return udi_cdc_multi_write_buf(0, buf, size);
  400d3e:	460a      	mov	r2, r1
  400d40:	4601      	mov	r1, r0
  400d42:	2000      	movs	r0, #0
  400d44:	4b01      	ldr	r3, [pc, #4]	; (400d4c <udi_cdc_write_buf+0x10>)
  400d46:	4798      	blx	r3
}
  400d48:	bd08      	pop	{r3, pc}
  400d4a:	bf00      	nop
  400d4c:	00400c89 	.word	0x00400c89

00400d50 <udc_next_desc_in_iface>:
 * \return address after the last byte of USB Configuration descriptor
 */
static usb_conf_desc_t UDC_DESC_STORAGE *udc_get_eof_conf(void)
{
	return (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *)
			udc_ptr_conf->desc +
  400d50:	4b10      	ldr	r3, [pc, #64]	; (400d94 <udc_next_desc_in_iface+0x44>)
  400d52:	681b      	ldr	r3, [r3, #0]
  400d54:	681a      	ldr	r2, [r3, #0]
			le16_to_cpu(udc_ptr_conf->desc->wTotalLength));
  400d56:	8853      	ldrh	r3, [r2, #2]
	return (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *)
  400d58:	441a      	add	r2, r3
	usb_conf_desc_t UDC_DESC_STORAGE *ptr_eof_desc;

	ptr_eof_desc = udc_get_eof_conf();
	// Go to next descriptor
	desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
			desc->bLength);
  400d5a:	7803      	ldrb	r3, [r0, #0]
	desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
  400d5c:	4418      	add	r0, r3
	// Check the end of configuration descriptor
	while (ptr_eof_desc > desc) {
  400d5e:	4290      	cmp	r0, r2
  400d60:	d211      	bcs.n	400d86 <udc_next_desc_in_iface+0x36>
		// If new interface descriptor is found,
		// then it is the end of the current global interface descriptor
		if (USB_DT_INTERFACE == desc->bDescriptorType) {
  400d62:	7843      	ldrb	r3, [r0, #1]
  400d64:	2b04      	cmp	r3, #4
  400d66:	d010      	beq.n	400d8a <udc_next_desc_in_iface+0x3a>
			break; // End of global interface descriptor
		}
		if (desc_id == desc->bDescriptorType) {
  400d68:	428b      	cmp	r3, r1
  400d6a:	d009      	beq.n	400d80 <udc_next_desc_in_iface+0x30>
			return desc; // Specific descriptor found
		}
		// Go to next descriptor
		desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
				desc->bLength);
  400d6c:	7803      	ldrb	r3, [r0, #0]
		desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
  400d6e:	4418      	add	r0, r3
	while (ptr_eof_desc > desc) {
  400d70:	4290      	cmp	r0, r2
  400d72:	d206      	bcs.n	400d82 <udc_next_desc_in_iface+0x32>
		if (USB_DT_INTERFACE == desc->bDescriptorType) {
  400d74:	7843      	ldrb	r3, [r0, #1]
  400d76:	2b04      	cmp	r3, #4
  400d78:	d009      	beq.n	400d8e <udc_next_desc_in_iface+0x3e>
		if (desc_id == desc->bDescriptorType) {
  400d7a:	428b      	cmp	r3, r1
  400d7c:	d1f6      	bne.n	400d6c <udc_next_desc_in_iface+0x1c>
  400d7e:	e007      	b.n	400d90 <udc_next_desc_in_iface+0x40>
  400d80:	4770      	bx	lr
	}
	return NULL; // No specific descriptor found
  400d82:	2000      	movs	r0, #0
  400d84:	4770      	bx	lr
  400d86:	2000      	movs	r0, #0
  400d88:	4770      	bx	lr
  400d8a:	2000      	movs	r0, #0
  400d8c:	4770      	bx	lr
  400d8e:	2000      	movs	r0, #0
}
  400d90:	4770      	bx	lr
  400d92:	bf00      	nop
  400d94:	20000ac4 	.word	0x20000ac4

00400d98 <udc_valid_address>:
/**
 * \brief Change the address of device
 * Callback called at the end of request set address
 */
static void udc_valid_address(void)
{
  400d98:	b508      	push	{r3, lr}
	udd_set_address(udd_g_ctrlreq.req.wValue & 0x7F);
  400d9a:	4b03      	ldr	r3, [pc, #12]	; (400da8 <udc_valid_address+0x10>)
  400d9c:	7898      	ldrb	r0, [r3, #2]
  400d9e:	f000 007f 	and.w	r0, r0, #127	; 0x7f
  400da2:	4b02      	ldr	r3, [pc, #8]	; (400dac <udc_valid_address+0x14>)
  400da4:	4798      	blx	r3
  400da6:	bd08      	pop	{r3, pc}
  400da8:	20000bf4 	.word	0x20000bf4
  400dac:	0040253d 	.word	0x0040253d

00400db0 <udc_update_iface_desc>:
	if (0 == udc_num_configuration) {
  400db0:	4b19      	ldr	r3, [pc, #100]	; (400e18 <udc_update_iface_desc+0x68>)
  400db2:	781b      	ldrb	r3, [r3, #0]
  400db4:	b34b      	cbz	r3, 400e0a <udc_update_iface_desc+0x5a>
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
  400db6:	4b19      	ldr	r3, [pc, #100]	; (400e1c <udc_update_iface_desc+0x6c>)
  400db8:	681b      	ldr	r3, [r3, #0]
  400dba:	681b      	ldr	r3, [r3, #0]
  400dbc:	791a      	ldrb	r2, [r3, #4]
  400dbe:	4282      	cmp	r2, r0
  400dc0:	d925      	bls.n	400e0e <udc_update_iface_desc+0x5e>
{
  400dc2:	b470      	push	{r4, r5, r6}
	udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *)
  400dc4:	4a16      	ldr	r2, [pc, #88]	; (400e20 <udc_update_iface_desc+0x70>)
  400dc6:	6013      	str	r3, [r2, #0]
			le16_to_cpu(udc_ptr_conf->desc->wTotalLength));
  400dc8:	885c      	ldrh	r4, [r3, #2]
	return (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *)
  400dca:	441c      	add	r4, r3
	while (ptr_end_desc >
  400dcc:	42a3      	cmp	r3, r4
  400dce:	d220      	bcs.n	400e12 <udc_update_iface_desc+0x62>
  400dd0:	2500      	movs	r5, #0
  400dd2:	2601      	movs	r6, #1
  400dd4:	e007      	b.n	400de6 <udc_update_iface_desc+0x36>
  400dd6:	4a12      	ldr	r2, [pc, #72]	; (400e20 <udc_update_iface_desc+0x70>)
  400dd8:	6013      	str	r3, [r2, #0]
  400dda:	e00f      	b.n	400dfc <udc_update_iface_desc+0x4c>
				udc_ptr_iface->bLength);
  400ddc:	781a      	ldrb	r2, [r3, #0]
		udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *) (
  400dde:	4413      	add	r3, r2
  400de0:	4635      	mov	r5, r6
	while (ptr_end_desc >
  400de2:	42a3      	cmp	r3, r4
  400de4:	d20c      	bcs.n	400e00 <udc_update_iface_desc+0x50>
		if (USB_DT_INTERFACE == udc_ptr_iface->bDescriptorType) {
  400de6:	785a      	ldrb	r2, [r3, #1]
  400de8:	2a04      	cmp	r2, #4
  400dea:	d1f7      	bne.n	400ddc <udc_update_iface_desc+0x2c>
			if ((iface_num == udc_ptr_iface->bInterfaceNumber) &&
  400dec:	789a      	ldrb	r2, [r3, #2]
  400dee:	4282      	cmp	r2, r0
  400df0:	d1f4      	bne.n	400ddc <udc_update_iface_desc+0x2c>
  400df2:	78da      	ldrb	r2, [r3, #3]
  400df4:	428a      	cmp	r2, r1
  400df6:	d1f1      	bne.n	400ddc <udc_update_iface_desc+0x2c>
  400df8:	2d00      	cmp	r5, #0
  400dfa:	d1ec      	bne.n	400dd6 <udc_update_iface_desc+0x26>
				return true; // Interface found
  400dfc:	2001      	movs	r0, #1
  400dfe:	e002      	b.n	400e06 <udc_update_iface_desc+0x56>
  400e00:	4a07      	ldr	r2, [pc, #28]	; (400e20 <udc_update_iface_desc+0x70>)
  400e02:	6013      	str	r3, [r2, #0]
	return false; // Interface not found
  400e04:	2000      	movs	r0, #0
}
  400e06:	bc70      	pop	{r4, r5, r6}
  400e08:	4770      	bx	lr
		return false;
  400e0a:	2000      	movs	r0, #0
  400e0c:	4770      	bx	lr
		return false;
  400e0e:	2000      	movs	r0, #0
  400e10:	4770      	bx	lr
	return false; // Interface not found
  400e12:	2000      	movs	r0, #0
  400e14:	e7f7      	b.n	400e06 <udc_update_iface_desc+0x56>
  400e16:	bf00      	nop
  400e18:	20000ac0 	.word	0x20000ac0
  400e1c:	20000ac4 	.word	0x20000ac4
  400e20:	20000ac8 	.word	0x20000ac8

00400e24 <udc_iface_disable>:
{
  400e24:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  400e28:	4604      	mov	r4, r0
	if (!udc_update_iface_desc(iface_num, 0)) {
  400e2a:	2100      	movs	r1, #0
  400e2c:	4b13      	ldr	r3, [pc, #76]	; (400e7c <udc_iface_disable+0x58>)
  400e2e:	4798      	blx	r3
  400e30:	4680      	mov	r8, r0
  400e32:	b910      	cbnz	r0, 400e3a <udc_iface_disable+0x16>
}
  400e34:	4640      	mov	r0, r8
  400e36:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	udi_api = udc_ptr_conf->udi_apis[iface_num];
  400e3a:	4b11      	ldr	r3, [pc, #68]	; (400e80 <udc_iface_disable+0x5c>)
  400e3c:	681b      	ldr	r3, [r3, #0]
  400e3e:	685b      	ldr	r3, [r3, #4]
  400e40:	f853 9024 	ldr.w	r9, [r3, r4, lsl #2]
	if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
  400e44:	f8d9 300c 	ldr.w	r3, [r9, #12]
  400e48:	4798      	blx	r3
  400e4a:	4601      	mov	r1, r0
  400e4c:	4620      	mov	r0, r4
  400e4e:	4b0b      	ldr	r3, [pc, #44]	; (400e7c <udc_iface_disable+0x58>)
  400e50:	4798      	blx	r3
  400e52:	4680      	mov	r8, r0
  400e54:	2800      	cmp	r0, #0
  400e56:	d0ed      	beq.n	400e34 <udc_iface_disable+0x10>
		ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *) udc_ptr_iface;
  400e58:	4b0a      	ldr	r3, [pc, #40]	; (400e84 <udc_iface_disable+0x60>)
  400e5a:	681c      	ldr	r4, [r3, #0]
			ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
  400e5c:	2605      	movs	r6, #5
  400e5e:	4d0a      	ldr	r5, [pc, #40]	; (400e88 <udc_iface_disable+0x64>)
			udd_ep_free(ep_desc->bEndpointAddress);
  400e60:	4f0a      	ldr	r7, [pc, #40]	; (400e8c <udc_iface_disable+0x68>)
			ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
  400e62:	4631      	mov	r1, r6
  400e64:	4620      	mov	r0, r4
  400e66:	47a8      	blx	r5
			if (NULL == ep_desc) {
  400e68:	4604      	mov	r4, r0
  400e6a:	b110      	cbz	r0, 400e72 <udc_iface_disable+0x4e>
			udd_ep_free(ep_desc->bEndpointAddress);
  400e6c:	7880      	ldrb	r0, [r0, #2]
  400e6e:	47b8      	blx	r7
			ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
  400e70:	e7f7      	b.n	400e62 <udc_iface_disable+0x3e>
	udi_api->disable();
  400e72:	f8d9 3004 	ldr.w	r3, [r9, #4]
  400e76:	4798      	blx	r3
	return true;
  400e78:	e7dc      	b.n	400e34 <udc_iface_disable+0x10>
  400e7a:	bf00      	nop
  400e7c:	00400db1 	.word	0x00400db1
  400e80:	20000ac4 	.word	0x20000ac4
  400e84:	20000ac8 	.word	0x20000ac8
  400e88:	00400d51 	.word	0x00400d51
  400e8c:	004026ad 	.word	0x004026ad

00400e90 <udc_iface_enable>:
{
  400e90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  400e94:	4680      	mov	r8, r0
	if (!udc_update_iface_desc(iface_num, setting_num)) {
  400e96:	4b10      	ldr	r3, [pc, #64]	; (400ed8 <udc_iface_enable+0x48>)
  400e98:	4798      	blx	r3
  400e9a:	4603      	mov	r3, r0
  400e9c:	b1c8      	cbz	r0, 400ed2 <udc_iface_enable+0x42>
	ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *) udc_ptr_iface;
  400e9e:	4b0f      	ldr	r3, [pc, #60]	; (400edc <udc_iface_enable+0x4c>)
  400ea0:	681c      	ldr	r4, [r3, #0]
		ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
  400ea2:	2605      	movs	r6, #5
  400ea4:	4d0e      	ldr	r5, [pc, #56]	; (400ee0 <udc_iface_enable+0x50>)
		if (!udd_ep_alloc(ep_desc->bEndpointAddress,
  400ea6:	4f0f      	ldr	r7, [pc, #60]	; (400ee4 <udc_iface_enable+0x54>)
		ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
  400ea8:	4631      	mov	r1, r6
  400eaa:	4620      	mov	r0, r4
  400eac:	47a8      	blx	r5
		if (NULL == ep_desc)
  400eae:	4604      	mov	r4, r0
  400eb0:	b138      	cbz	r0, 400ec2 <udc_iface_enable+0x32>
		if (!udd_ep_alloc(ep_desc->bEndpointAddress,
  400eb2:	8882      	ldrh	r2, [r0, #4]
  400eb4:	78c1      	ldrb	r1, [r0, #3]
  400eb6:	7880      	ldrb	r0, [r0, #2]
  400eb8:	47b8      	blx	r7
  400eba:	4603      	mov	r3, r0
  400ebc:	2800      	cmp	r0, #0
  400ebe:	d1f3      	bne.n	400ea8 <udc_iface_enable+0x18>
  400ec0:	e007      	b.n	400ed2 <udc_iface_enable+0x42>
	return udc_ptr_conf->udi_apis[iface_num]->enable();
  400ec2:	4b09      	ldr	r3, [pc, #36]	; (400ee8 <udc_iface_enable+0x58>)
  400ec4:	681b      	ldr	r3, [r3, #0]
  400ec6:	685b      	ldr	r3, [r3, #4]
  400ec8:	f853 3028 	ldr.w	r3, [r3, r8, lsl #2]
  400ecc:	681b      	ldr	r3, [r3, #0]
  400ece:	4798      	blx	r3
  400ed0:	4603      	mov	r3, r0
}
  400ed2:	4618      	mov	r0, r3
  400ed4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  400ed8:	00400db1 	.word	0x00400db1
  400edc:	20000ac8 	.word	0x20000ac8
  400ee0:	00400d51 	.word	0x00400d51
  400ee4:	004025b5 	.word	0x004025b5
  400ee8:	20000ac4 	.word	0x20000ac4

00400eec <udc_start>:
{
  400eec:	b508      	push	{r3, lr}
	udd_enable();
  400eee:	4b01      	ldr	r3, [pc, #4]	; (400ef4 <udc_start+0x8>)
  400ef0:	4798      	blx	r3
  400ef2:	bd08      	pop	{r3, pc}
  400ef4:	00402491 	.word	0x00402491

00400ef8 <udc_reset>:
{
  400ef8:	b570      	push	{r4, r5, r6, lr}
	if (udc_num_configuration) {
  400efa:	4b0d      	ldr	r3, [pc, #52]	; (400f30 <udc_reset+0x38>)
  400efc:	781b      	ldrb	r3, [r3, #0]
  400efe:	b183      	cbz	r3, 400f22 <udc_reset+0x2a>
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
  400f00:	4b0c      	ldr	r3, [pc, #48]	; (400f34 <udc_reset+0x3c>)
  400f02:	681b      	ldr	r3, [r3, #0]
  400f04:	681b      	ldr	r3, [r3, #0]
		for (iface_num = 0;
  400f06:	791b      	ldrb	r3, [r3, #4]
  400f08:	b15b      	cbz	r3, 400f22 <udc_reset+0x2a>
  400f0a:	2400      	movs	r4, #0
			udc_iface_disable(iface_num);
  400f0c:	4e0a      	ldr	r6, [pc, #40]	; (400f38 <udc_reset+0x40>)
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
  400f0e:	4d09      	ldr	r5, [pc, #36]	; (400f34 <udc_reset+0x3c>)
			udc_iface_disable(iface_num);
  400f10:	4620      	mov	r0, r4
  400f12:	47b0      	blx	r6
				iface_num++) {
  400f14:	3401      	adds	r4, #1
  400f16:	b2e4      	uxtb	r4, r4
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
  400f18:	682b      	ldr	r3, [r5, #0]
  400f1a:	681b      	ldr	r3, [r3, #0]
		for (iface_num = 0;
  400f1c:	791b      	ldrb	r3, [r3, #4]
  400f1e:	42a3      	cmp	r3, r4
  400f20:	d8f6      	bhi.n	400f10 <udc_reset+0x18>
	udc_num_configuration = 0;
  400f22:	2200      	movs	r2, #0
  400f24:	4b02      	ldr	r3, [pc, #8]	; (400f30 <udc_reset+0x38>)
  400f26:	701a      	strb	r2, [r3, #0]
	udc_device_status =
  400f28:	2201      	movs	r2, #1
  400f2a:	4b04      	ldr	r3, [pc, #16]	; (400f3c <udc_reset+0x44>)
  400f2c:	801a      	strh	r2, [r3, #0]
  400f2e:	bd70      	pop	{r4, r5, r6, pc}
  400f30:	20000ac0 	.word	0x20000ac0
  400f34:	20000ac4 	.word	0x20000ac4
  400f38:	00400e25 	.word	0x00400e25
  400f3c:	20000ab6 	.word	0x20000ab6

00400f40 <udc_sof_notify>:
{
  400f40:	b538      	push	{r3, r4, r5, lr}
	if (udc_num_configuration) {
  400f42:	4b0d      	ldr	r3, [pc, #52]	; (400f78 <udc_sof_notify+0x38>)
  400f44:	781b      	ldrb	r3, [r3, #0]
  400f46:	b1b3      	cbz	r3, 400f76 <udc_sof_notify+0x36>
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
  400f48:	4b0c      	ldr	r3, [pc, #48]	; (400f7c <udc_sof_notify+0x3c>)
  400f4a:	681b      	ldr	r3, [r3, #0]
  400f4c:	681a      	ldr	r2, [r3, #0]
		for (iface_num = 0;
  400f4e:	7912      	ldrb	r2, [r2, #4]
  400f50:	b18a      	cbz	r2, 400f76 <udc_sof_notify+0x36>
  400f52:	2400      	movs	r4, #0
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
  400f54:	4d09      	ldr	r5, [pc, #36]	; (400f7c <udc_sof_notify+0x3c>)
  400f56:	e006      	b.n	400f66 <udc_sof_notify+0x26>
				iface_num++) {
  400f58:	3401      	adds	r4, #1
  400f5a:	b2e4      	uxtb	r4, r4
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
  400f5c:	682b      	ldr	r3, [r5, #0]
  400f5e:	681a      	ldr	r2, [r3, #0]
		for (iface_num = 0;
  400f60:	7912      	ldrb	r2, [r2, #4]
  400f62:	42a2      	cmp	r2, r4
  400f64:	d907      	bls.n	400f76 <udc_sof_notify+0x36>
			if (udc_ptr_conf->udi_apis[iface_num]->sof_notify != NULL) {
  400f66:	685b      	ldr	r3, [r3, #4]
  400f68:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
  400f6c:	691b      	ldr	r3, [r3, #16]
  400f6e:	2b00      	cmp	r3, #0
  400f70:	d0f2      	beq.n	400f58 <udc_sof_notify+0x18>
				udc_ptr_conf->udi_apis[iface_num]->sof_notify();
  400f72:	4798      	blx	r3
  400f74:	e7f0      	b.n	400f58 <udc_sof_notify+0x18>
  400f76:	bd38      	pop	{r3, r4, r5, pc}
  400f78:	20000ac0 	.word	0x20000ac0
  400f7c:	20000ac4 	.word	0x20000ac4

00400f80 <udc_process_setup>:
 * sent to a specific application callback.
 *
 * \return true if the request is supported, else the request is stalled by UDD
 */
bool udc_process_setup(void)
{
  400f80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	// By default no data (receive/send) and no callbacks registered
	udd_g_ctrlreq.payload_size = 0;
  400f82:	4b88      	ldr	r3, [pc, #544]	; (4011a4 <udc_process_setup+0x224>)
  400f84:	2200      	movs	r2, #0
  400f86:	819a      	strh	r2, [r3, #12]
	udd_g_ctrlreq.callback = NULL;
  400f88:	611a      	str	r2, [r3, #16]
	udd_g_ctrlreq.over_under_run = NULL;
  400f8a:	615a      	str	r2, [r3, #20]

	if (Udd_setup_is_in()) {
  400f8c:	781b      	ldrb	r3, [r3, #0]
  400f8e:	f013 0f80 	tst.w	r3, #128	; 0x80
  400f92:	d114      	bne.n	400fbe <udc_process_setup+0x3e>
			return false; // Error from USB host
		}
	}

	// If standard request then try to decode it in UDC
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
  400f94:	f013 0f60 	tst.w	r3, #96	; 0x60
  400f98:	f000 80d5 	beq.w	401146 <udc_process_setup+0x1c6>
			return true;
		}
	}

	// If interface request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_INTERFACE) {
  400f9c:	4b81      	ldr	r3, [pc, #516]	; (4011a4 <udc_process_setup+0x224>)
  400f9e:	781b      	ldrb	r3, [r3, #0]
  400fa0:	f003 031f 	and.w	r3, r3, #31
  400fa4:	2b01      	cmp	r3, #1
  400fa6:	f000 816e 	beq.w	401286 <udc_process_setup+0x306>
			return true;
		}
	}

	// If endpoint request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_ENDPOINT) {
  400faa:	4b7e      	ldr	r3, [pc, #504]	; (4011a4 <udc_process_setup+0x224>)
  400fac:	781b      	ldrb	r3, [r3, #0]
  400fae:	f003 031f 	and.w	r3, r3, #31
  400fb2:	2b02      	cmp	r3, #2
  400fb4:	f000 81c9 	beq.w	40134a <udc_process_setup+0x3ca>
	// Here SETUP request unknown by UDC and UDIs
#ifdef USB_DEVICE_SPECIFIC_REQUEST
	// Try to decode it in specific callback
	return USB_DEVICE_SPECIFIC_REQUEST(); // Ex: Vendor request,...
#else
	return false;
  400fb8:	2300      	movs	r3, #0
#endif
}
  400fba:	4618      	mov	r0, r3
  400fbc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (udd_g_ctrlreq.req.wLength == 0) {
  400fbe:	4a79      	ldr	r2, [pc, #484]	; (4011a4 <udc_process_setup+0x224>)
  400fc0:	88d2      	ldrh	r2, [r2, #6]
  400fc2:	2a00      	cmp	r2, #0
  400fc4:	f000 81ea 	beq.w	40139c <udc_process_setup+0x41c>
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
  400fc8:	f013 0f60 	tst.w	r3, #96	; 0x60
  400fcc:	d1e6      	bne.n	400f9c <udc_process_setup+0x1c>
		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
  400fce:	f013 031f 	ands.w	r3, r3, #31
  400fd2:	d106      	bne.n	400fe2 <udc_process_setup+0x62>
			switch (udd_g_ctrlreq.req.bRequest) {
  400fd4:	4973      	ldr	r1, [pc, #460]	; (4011a4 <udc_process_setup+0x224>)
  400fd6:	7849      	ldrb	r1, [r1, #1]
  400fd8:	2906      	cmp	r1, #6
  400fda:	d014      	beq.n	401006 <udc_process_setup+0x86>
  400fdc:	2908      	cmp	r1, #8
  400fde:	d074      	beq.n	4010ca <udc_process_setup+0x14a>
  400fe0:	b151      	cbz	r1, 400ff8 <udc_process_setup+0x78>
		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
  400fe2:	2b01      	cmp	r3, #1
  400fe4:	d079      	beq.n	4010da <udc_process_setup+0x15a>
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
  400fe6:	2b02      	cmp	r3, #2
  400fe8:	d1d8      	bne.n	400f9c <udc_process_setup+0x1c>
			switch (udd_g_ctrlreq.req.bRequest) {
  400fea:	4b6e      	ldr	r3, [pc, #440]	; (4011a4 <udc_process_setup+0x224>)
  400fec:	785b      	ldrb	r3, [r3, #1]
  400fee:	2b00      	cmp	r3, #0
  400ff0:	f000 809b 	beq.w	40112a <udc_process_setup+0x1aa>
	return false;
  400ff4:	2300      	movs	r3, #0
  400ff6:	e18a      	b.n	40130e <udc_process_setup+0x38e>
	if (udd_g_ctrlreq.req.wLength != sizeof(udc_device_status)) {
  400ff8:	2a02      	cmp	r2, #2
  400ffa:	d1d6      	bne.n	400faa <udc_process_setup+0x2a>
	udd_set_setup_payload( (uint8_t *) & udc_device_status,
  400ffc:	2102      	movs	r1, #2
  400ffe:	486a      	ldr	r0, [pc, #424]	; (4011a8 <udc_process_setup+0x228>)
  401000:	4b6a      	ldr	r3, [pc, #424]	; (4011ac <udc_process_setup+0x22c>)
  401002:	4798      	blx	r3
  401004:	e0bb      	b.n	40117e <udc_process_setup+0x1fe>
	conf_num = udd_g_ctrlreq.req.wValue & 0xff;
  401006:	4b67      	ldr	r3, [pc, #412]	; (4011a4 <udc_process_setup+0x224>)
  401008:	885a      	ldrh	r2, [r3, #2]
	switch ((uint8_t) (udd_g_ctrlreq.req.wValue >> 8)) {
  40100a:	0a13      	lsrs	r3, r2, #8
  40100c:	3b01      	subs	r3, #1
  40100e:	2b0e      	cmp	r3, #14
  401010:	f200 817a 	bhi.w	401308 <udc_process_setup+0x388>
  401014:	e8df f013 	tbh	[pc, r3, lsl #1]
  401018:	001d000f 	.word	0x001d000f
  40101c:	01780037 	.word	0x01780037
  401020:	01780178 	.word	0x01780178
  401024:	01780178 	.word	0x01780178
  401028:	01780178 	.word	0x01780178
  40102c:	01780178 	.word	0x01780178
  401030:	01780178 	.word	0x01780178
  401034:	002f      	.short	0x002f
				(uint8_t *) udc_config.confdev_lsfs,
  401036:	4b5e      	ldr	r3, [pc, #376]	; (4011b0 <udc_process_setup+0x230>)
  401038:	6818      	ldr	r0, [r3, #0]
			udd_set_setup_payload(
  40103a:	7801      	ldrb	r1, [r0, #0]
  40103c:	4b5b      	ldr	r3, [pc, #364]	; (4011ac <udc_process_setup+0x22c>)
  40103e:	4798      	blx	r3
	if (udd_g_ctrlreq.req.wLength < udd_g_ctrlreq.payload_size) {
  401040:	4b58      	ldr	r3, [pc, #352]	; (4011a4 <udc_process_setup+0x224>)
  401042:	88da      	ldrh	r2, [r3, #6]
  401044:	899b      	ldrh	r3, [r3, #12]
  401046:	4293      	cmp	r3, r2
  401048:	f240 8099 	bls.w	40117e <udc_process_setup+0x1fe>
		udd_g_ctrlreq.payload_size = udd_g_ctrlreq.req.wLength;
  40104c:	4b55      	ldr	r3, [pc, #340]	; (4011a4 <udc_process_setup+0x224>)
  40104e:	819a      	strh	r2, [r3, #12]
  401050:	e095      	b.n	40117e <udc_process_setup+0x1fe>
	conf_num = udd_g_ctrlreq.req.wValue & 0xff;
  401052:	b2d2      	uxtb	r2, r2
			if (conf_num >= udc_config.confdev_lsfs->
  401054:	4b56      	ldr	r3, [pc, #344]	; (4011b0 <udc_process_setup+0x230>)
  401056:	681b      	ldr	r3, [r3, #0]
  401058:	7c5b      	ldrb	r3, [r3, #17]
  40105a:	4293      	cmp	r3, r2
  40105c:	d9a5      	bls.n	400faa <udc_process_setup+0x2a>
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
  40105e:	4b54      	ldr	r3, [pc, #336]	; (4011b0 <udc_process_setup+0x230>)
  401060:	685b      	ldr	r3, [r3, #4]
  401062:	f853 0032 	ldr.w	r0, [r3, r2, lsl #3]
			udd_set_setup_payload(
  401066:	8841      	ldrh	r1, [r0, #2]
  401068:	4b50      	ldr	r3, [pc, #320]	; (4011ac <udc_process_setup+0x22c>)
  40106a:	4798      	blx	r3
		((usb_conf_desc_t *) udd_g_ctrlreq.payload)->bDescriptorType =
  40106c:	4b4d      	ldr	r3, [pc, #308]	; (4011a4 <udc_process_setup+0x224>)
  40106e:	689b      	ldr	r3, [r3, #8]
  401070:	2202      	movs	r2, #2
  401072:	705a      	strb	r2, [r3, #1]
  401074:	e7e4      	b.n	401040 <udc_process_setup+0xc0>
		if (udc_config.conf_bos == NULL) {
  401076:	4b4e      	ldr	r3, [pc, #312]	; (4011b0 <udc_process_setup+0x230>)
  401078:	6898      	ldr	r0, [r3, #8]
  40107a:	2800      	cmp	r0, #0
  40107c:	d095      	beq.n	400faa <udc_process_setup+0x2a>
		udd_set_setup_payload( (uint8_t *) udc_config.conf_bos,
  40107e:	8841      	ldrh	r1, [r0, #2]
  401080:	4b4a      	ldr	r3, [pc, #296]	; (4011ac <udc_process_setup+0x22c>)
  401082:	4798      	blx	r3
  401084:	e7dc      	b.n	401040 <udc_process_setup+0xc0>
	switch (udd_g_ctrlreq.req.wValue & 0xff) {
  401086:	b2d2      	uxtb	r2, r2
  401088:	2a01      	cmp	r2, #1
  40108a:	d01b      	beq.n	4010c4 <udc_process_setup+0x144>
  40108c:	b1aa      	cbz	r2, 4010ba <udc_process_setup+0x13a>
  40108e:	2a02      	cmp	r2, #2
  401090:	d184      	bne.n	400f9c <udc_process_setup+0x1c>
		str = udc_string_product_name;
  401092:	4a48      	ldr	r2, [pc, #288]	; (4011b4 <udc_process_setup+0x234>)
		str_length = USB_DEVICE_PRODUCT_NAME_SIZE;
  401094:	210f      	movs	r1, #15
  401096:	3a01      	subs	r2, #1
  401098:	4847      	ldr	r0, [pc, #284]	; (4011b8 <udc_process_setup+0x238>)
  40109a:	2300      	movs	r3, #0
			udc_string_desc.string[i] = cpu_to_le16((le16_t)str[i]);
  40109c:	f812 4f01 	ldrb.w	r4, [r2, #1]!
  4010a0:	f820 4b02 	strh.w	r4, [r0], #2
		for(i = 0; i < str_length; i++) {
  4010a4:	3301      	adds	r3, #1
  4010a6:	b2db      	uxtb	r3, r3
  4010a8:	428b      	cmp	r3, r1
  4010aa:	d3f7      	bcc.n	40109c <udc_process_setup+0x11c>
		udc_string_desc.header.bLength = 2 + (str_length) * 2;
  4010ac:	0049      	lsls	r1, r1, #1
  4010ae:	3102      	adds	r1, #2
  4010b0:	4842      	ldr	r0, [pc, #264]	; (4011bc <udc_process_setup+0x23c>)
  4010b2:	7001      	strb	r1, [r0, #0]
		udd_set_setup_payload(
  4010b4:	4b3d      	ldr	r3, [pc, #244]	; (4011ac <udc_process_setup+0x22c>)
  4010b6:	4798      	blx	r3
  4010b8:	e7c2      	b.n	401040 <udc_process_setup+0xc0>
		udd_set_setup_payload((uint8_t *) &udc_string_desc_languageid,
  4010ba:	2104      	movs	r1, #4
  4010bc:	4840      	ldr	r0, [pc, #256]	; (4011c0 <udc_process_setup+0x240>)
  4010be:	4b3b      	ldr	r3, [pc, #236]	; (4011ac <udc_process_setup+0x22c>)
  4010c0:	4798      	blx	r3
  4010c2:	e7bd      	b.n	401040 <udc_process_setup+0xc0>
		str = udc_string_manufacturer_name;
  4010c4:	4a3f      	ldr	r2, [pc, #252]	; (4011c4 <udc_process_setup+0x244>)
		str_length = USB_DEVICE_MANUFACTURE_NAME_SIZE;
  4010c6:	2109      	movs	r1, #9
  4010c8:	e7e5      	b.n	401096 <udc_process_setup+0x116>
	if (udd_g_ctrlreq.req.wLength != 1) {
  4010ca:	2a01      	cmp	r2, #1
  4010cc:	f47f af6d 	bne.w	400faa <udc_process_setup+0x2a>
	udd_set_setup_payload(&udc_num_configuration,1);
  4010d0:	2101      	movs	r1, #1
  4010d2:	483d      	ldr	r0, [pc, #244]	; (4011c8 <udc_process_setup+0x248>)
  4010d4:	4b35      	ldr	r3, [pc, #212]	; (4011ac <udc_process_setup+0x22c>)
  4010d6:	4798      	blx	r3
  4010d8:	e051      	b.n	40117e <udc_process_setup+0x1fe>
			switch (udd_g_ctrlreq.req.bRequest) {
  4010da:	4932      	ldr	r1, [pc, #200]	; (4011a4 <udc_process_setup+0x224>)
  4010dc:	7849      	ldrb	r1, [r1, #1]
  4010de:	290a      	cmp	r1, #10
  4010e0:	d181      	bne.n	400fe6 <udc_process_setup+0x66>
	if (udd_g_ctrlreq.req.wLength != 1) {
  4010e2:	2a01      	cmp	r2, #1
  4010e4:	f040 80cf 	bne.w	401286 <udc_process_setup+0x306>
	if (!udc_num_configuration) {
  4010e8:	4b37      	ldr	r3, [pc, #220]	; (4011c8 <udc_process_setup+0x248>)
  4010ea:	781b      	ldrb	r3, [r3, #0]
  4010ec:	2b00      	cmp	r3, #0
  4010ee:	f000 80ca 	beq.w	401286 <udc_process_setup+0x306>
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
  4010f2:	4b2c      	ldr	r3, [pc, #176]	; (4011a4 <udc_process_setup+0x224>)
  4010f4:	791c      	ldrb	r4, [r3, #4]
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
  4010f6:	4b35      	ldr	r3, [pc, #212]	; (4011cc <udc_process_setup+0x24c>)
  4010f8:	681d      	ldr	r5, [r3, #0]
  4010fa:	682b      	ldr	r3, [r5, #0]
  4010fc:	791b      	ldrb	r3, [r3, #4]
  4010fe:	42a3      	cmp	r3, r4
  401100:	f240 80c1 	bls.w	401286 <udc_process_setup+0x306>
	if (!udc_update_iface_desc(iface_num, 0)) {
  401104:	2100      	movs	r1, #0
  401106:	4620      	mov	r0, r4
  401108:	4b31      	ldr	r3, [pc, #196]	; (4011d0 <udc_process_setup+0x250>)
  40110a:	4798      	blx	r3
  40110c:	2800      	cmp	r0, #0
  40110e:	f43f af45 	beq.w	400f9c <udc_process_setup+0x1c>
	udi_api = udc_ptr_conf->udi_apis[iface_num];
  401112:	686b      	ldr	r3, [r5, #4]
	udc_iface_setting = udi_api->getsetting();
  401114:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
  401118:	68db      	ldr	r3, [r3, #12]
  40111a:	4798      	blx	r3
  40111c:	4b2d      	ldr	r3, [pc, #180]	; (4011d4 <udc_process_setup+0x254>)
  40111e:	7018      	strb	r0, [r3, #0]
	udd_set_setup_payload(&udc_iface_setting,1);
  401120:	2101      	movs	r1, #1
  401122:	4618      	mov	r0, r3
  401124:	4b21      	ldr	r3, [pc, #132]	; (4011ac <udc_process_setup+0x22c>)
  401126:	4798      	blx	r3
  401128:	e029      	b.n	40117e <udc_process_setup+0x1fe>
	if (udd_g_ctrlreq.req.wLength != sizeof(udc_ep_status)) {
  40112a:	2a02      	cmp	r2, #2
  40112c:	f47f af3d 	bne.w	400faa <udc_process_setup+0x2a>
	udc_ep_status = udd_ep_is_halted(udd_g_ctrlreq.req.
  401130:	4b1c      	ldr	r3, [pc, #112]	; (4011a4 <udc_process_setup+0x224>)
  401132:	7918      	ldrb	r0, [r3, #4]
  401134:	4b28      	ldr	r3, [pc, #160]	; (4011d8 <udc_process_setup+0x258>)
  401136:	4798      	blx	r3
  401138:	4b28      	ldr	r3, [pc, #160]	; (4011dc <udc_process_setup+0x25c>)
			wIndex & 0xFF) ? CPU_TO_LE16(USB_EP_STATUS_HALTED) : 0;
  40113a:	8018      	strh	r0, [r3, #0]
	udd_set_setup_payload( (uint8_t *) & udc_ep_status,
  40113c:	2102      	movs	r1, #2
  40113e:	4618      	mov	r0, r3
  401140:	4b1a      	ldr	r3, [pc, #104]	; (4011ac <udc_process_setup+0x22c>)
  401142:	4798      	blx	r3
  401144:	e01b      	b.n	40117e <udc_process_setup+0x1fe>
		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
  401146:	f013 031f 	ands.w	r3, r3, #31
  40114a:	f040 8085 	bne.w	401258 <udc_process_setup+0x2d8>
			switch (udd_g_ctrlreq.req.bRequest) {
  40114e:	4a15      	ldr	r2, [pc, #84]	; (4011a4 <udc_process_setup+0x224>)
  401150:	7852      	ldrb	r2, [r2, #1]
  401152:	3a01      	subs	r2, #1
  401154:	2a08      	cmp	r2, #8
  401156:	d87f      	bhi.n	401258 <udc_process_setup+0x2d8>
  401158:	e8df f012 	tbh	[pc, r2, lsl #1]
  40115c:	007e0013 	.word	0x007e0013
  401160:	007e00d8 	.word	0x007e00d8
  401164:	007e0009 	.word	0x007e0009
  401168:	007e007e 	.word	0x007e007e
  40116c:	0044      	.short	0x0044
	if (udd_g_ctrlreq.req.wLength) {
  40116e:	4b0d      	ldr	r3, [pc, #52]	; (4011a4 <udc_process_setup+0x224>)
  401170:	88db      	ldrh	r3, [r3, #6]
  401172:	2b00      	cmp	r3, #0
  401174:	f47f af19 	bne.w	400faa <udc_process_setup+0x2a>
	udd_g_ctrlreq.callback = udc_valid_address;
  401178:	4a19      	ldr	r2, [pc, #100]	; (4011e0 <udc_process_setup+0x260>)
  40117a:	4b0a      	ldr	r3, [pc, #40]	; (4011a4 <udc_process_setup+0x224>)
  40117c:	611a      	str	r2, [r3, #16]
			return true;
  40117e:	2301      	movs	r3, #1
  401180:	e71b      	b.n	400fba <udc_process_setup+0x3a>
	if (udd_g_ctrlreq.req.wLength) {
  401182:	4b08      	ldr	r3, [pc, #32]	; (4011a4 <udc_process_setup+0x224>)
  401184:	88db      	ldrh	r3, [r3, #6]
  401186:	2b00      	cmp	r3, #0
  401188:	f47f af0f 	bne.w	400faa <udc_process_setup+0x2a>
	if (udd_g_ctrlreq.req.wValue == USB_DEV_FEATURE_REMOTE_WAKEUP) {
  40118c:	4b05      	ldr	r3, [pc, #20]	; (4011a4 <udc_process_setup+0x224>)
  40118e:	885b      	ldrh	r3, [r3, #2]
  401190:	2b01      	cmp	r3, #1
  401192:	f47f af0a 	bne.w	400faa <udc_process_setup+0x2a>
		udc_device_status &= CPU_TO_LE16(~(uint32_t)USB_DEV_STATUS_REMOTEWAKEUP);
  401196:	4a04      	ldr	r2, [pc, #16]	; (4011a8 <udc_process_setup+0x228>)
  401198:	8813      	ldrh	r3, [r2, #0]
  40119a:	f023 0302 	bic.w	r3, r3, #2
  40119e:	8013      	strh	r3, [r2, #0]
  4011a0:	e7ed      	b.n	40117e <udc_process_setup+0x1fe>
  4011a2:	bf00      	nop
  4011a4:	20000bf4 	.word	0x20000bf4
  4011a8:	20000ab6 	.word	0x20000ab6
  4011ac:	004025a9 	.word	0x004025a9
  4011b0:	2000046c 	.word	0x2000046c
  4011b4:	20000510 	.word	0x20000510
  4011b8:	200004e2 	.word	0x200004e2
  4011bc:	200004e0 	.word	0x200004e0
  4011c0:	20000500 	.word	0x20000500
  4011c4:	20000504 	.word	0x20000504
  4011c8:	20000ac0 	.word	0x20000ac0
  4011cc:	20000ac4 	.word	0x20000ac4
  4011d0:	00400db1 	.word	0x00400db1
  4011d4:	20000abc 	.word	0x20000abc
  4011d8:	00402705 	.word	0x00402705
  4011dc:	20000ab8 	.word	0x20000ab8
  4011e0:	00400d99 	.word	0x00400d99
	if (udd_g_ctrlreq.req.wLength) {
  4011e4:	4b6f      	ldr	r3, [pc, #444]	; (4013a4 <udc_process_setup+0x424>)
  4011e6:	88db      	ldrh	r3, [r3, #6]
  4011e8:	2b00      	cmp	r3, #0
  4011ea:	f47f aede 	bne.w	400faa <udc_process_setup+0x2a>
	if (!udd_getaddress()) {
  4011ee:	4b6e      	ldr	r3, [pc, #440]	; (4013a8 <udc_process_setup+0x428>)
  4011f0:	4798      	blx	r3
  4011f2:	2800      	cmp	r0, #0
  4011f4:	f43f aed2 	beq.w	400f9c <udc_process_setup+0x1c>
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
  4011f8:	4b6a      	ldr	r3, [pc, #424]	; (4013a4 <udc_process_setup+0x424>)
  4011fa:	789a      	ldrb	r2, [r3, #2]
				udc_config.confdev_lsfs->bNumConfigurations) {
  4011fc:	4b6b      	ldr	r3, [pc, #428]	; (4013ac <udc_process_setup+0x42c>)
  4011fe:	681b      	ldr	r3, [r3, #0]
  401200:	7c5b      	ldrb	r3, [r3, #17]
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
  401202:	429a      	cmp	r2, r3
  401204:	f73f aeca 	bgt.w	400f9c <udc_process_setup+0x1c>
	udc_reset();
  401208:	4b69      	ldr	r3, [pc, #420]	; (4013b0 <udc_process_setup+0x430>)
  40120a:	4798      	blx	r3
	udc_num_configuration = udd_g_ctrlreq.req.wValue & 0xFF;
  40120c:	4b65      	ldr	r3, [pc, #404]	; (4013a4 <udc_process_setup+0x424>)
  40120e:	789b      	ldrb	r3, [r3, #2]
  401210:	4a68      	ldr	r2, [pc, #416]	; (4013b4 <udc_process_setup+0x434>)
  401212:	7013      	strb	r3, [r2, #0]
	if (udc_num_configuration == 0) {
  401214:	2b00      	cmp	r3, #0
  401216:	d0b2      	beq.n	40117e <udc_process_setup+0x1fe>
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
  401218:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
  40121c:	3b01      	subs	r3, #1
  40121e:	4a63      	ldr	r2, [pc, #396]	; (4013ac <udc_process_setup+0x42c>)
  401220:	6852      	ldr	r2, [r2, #4]
  401222:	eb02 00c3 	add.w	r0, r2, r3, lsl #3
  401226:	4964      	ldr	r1, [pc, #400]	; (4013b8 <udc_process_setup+0x438>)
  401228:	6008      	str	r0, [r1, #0]
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
  40122a:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
  40122e:	791b      	ldrb	r3, [r3, #4]
  401230:	2b00      	cmp	r3, #0
  401232:	d0a4      	beq.n	40117e <udc_process_setup+0x1fe>
  401234:	2400      	movs	r4, #0
		if (!udc_iface_enable(iface_num, 0)) {
  401236:	4626      	mov	r6, r4
  401238:	4d60      	ldr	r5, [pc, #384]	; (4013bc <udc_process_setup+0x43c>)
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
  40123a:	460f      	mov	r7, r1
		if (!udc_iface_enable(iface_num, 0)) {
  40123c:	4631      	mov	r1, r6
  40123e:	4620      	mov	r0, r4
  401240:	47a8      	blx	r5
  401242:	2800      	cmp	r0, #0
  401244:	f43f aeaa 	beq.w	400f9c <udc_process_setup+0x1c>
			iface_num++) {
  401248:	3401      	adds	r4, #1
  40124a:	b2e4      	uxtb	r4, r4
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
  40124c:	683b      	ldr	r3, [r7, #0]
  40124e:	681b      	ldr	r3, [r3, #0]
  401250:	791b      	ldrb	r3, [r3, #4]
  401252:	42a3      	cmp	r3, r4
  401254:	d8f2      	bhi.n	40123c <udc_process_setup+0x2bc>
  401256:	e792      	b.n	40117e <udc_process_setup+0x1fe>
		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
  401258:	2b01      	cmp	r3, #1
  40125a:	d00a      	beq.n	401272 <udc_process_setup+0x2f2>
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
  40125c:	2b02      	cmp	r3, #2
  40125e:	f47f ae9d 	bne.w	400f9c <udc_process_setup+0x1c>
			switch (udd_g_ctrlreq.req.bRequest) {
  401262:	4b50      	ldr	r3, [pc, #320]	; (4013a4 <udc_process_setup+0x424>)
  401264:	785b      	ldrb	r3, [r3, #1]
  401266:	2b01      	cmp	r3, #1
  401268:	d02b      	beq.n	4012c2 <udc_process_setup+0x342>
  40126a:	2b03      	cmp	r3, #3
  40126c:	d039      	beq.n	4012e2 <udc_process_setup+0x362>
	return false;
  40126e:	2300      	movs	r3, #0
  401270:	e04d      	b.n	40130e <udc_process_setup+0x38e>
			switch (udd_g_ctrlreq.req.bRequest) {
  401272:	4a4c      	ldr	r2, [pc, #304]	; (4013a4 <udc_process_setup+0x424>)
  401274:	7852      	ldrb	r2, [r2, #1]
  401276:	2a0b      	cmp	r2, #11
  401278:	d1f0      	bne.n	40125c <udc_process_setup+0x2dc>
	if (udd_g_ctrlreq.req.wLength) {
  40127a:	4b4a      	ldr	r3, [pc, #296]	; (4013a4 <udc_process_setup+0x424>)
  40127c:	88db      	ldrh	r3, [r3, #6]
  40127e:	b913      	cbnz	r3, 401286 <udc_process_setup+0x306>
	if (!udc_num_configuration) {
  401280:	4b4c      	ldr	r3, [pc, #304]	; (4013b4 <udc_process_setup+0x434>)
  401282:	781b      	ldrb	r3, [r3, #0]
  401284:	b973      	cbnz	r3, 4012a4 <udc_process_setup+0x324>
	if (0 == udc_num_configuration) {
  401286:	4b4b      	ldr	r3, [pc, #300]	; (4013b4 <udc_process_setup+0x434>)
  401288:	781b      	ldrb	r3, [r3, #0]
  40128a:	2b00      	cmp	r3, #0
  40128c:	f000 8088 	beq.w	4013a0 <udc_process_setup+0x420>
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
  401290:	4b44      	ldr	r3, [pc, #272]	; (4013a4 <udc_process_setup+0x424>)
  401292:	791c      	ldrb	r4, [r3, #4]
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
  401294:	4b48      	ldr	r3, [pc, #288]	; (4013b8 <udc_process_setup+0x438>)
  401296:	681d      	ldr	r5, [r3, #0]
  401298:	682b      	ldr	r3, [r5, #0]
  40129a:	791b      	ldrb	r3, [r3, #4]
  40129c:	42a3      	cmp	r3, r4
  40129e:	d83a      	bhi.n	401316 <udc_process_setup+0x396>
	return false;
  4012a0:	2300      	movs	r3, #0
  4012a2:	e68a      	b.n	400fba <udc_process_setup+0x3a>
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
  4012a4:	4b3f      	ldr	r3, [pc, #252]	; (4013a4 <udc_process_setup+0x424>)
  4012a6:	791c      	ldrb	r4, [r3, #4]
	setting_num = udd_g_ctrlreq.req.wValue & 0xFF;
  4012a8:	885d      	ldrh	r5, [r3, #2]
	if (!udc_iface_disable(iface_num)) {
  4012aa:	4620      	mov	r0, r4
  4012ac:	4b44      	ldr	r3, [pc, #272]	; (4013c0 <udc_process_setup+0x440>)
  4012ae:	4798      	blx	r3
  4012b0:	2800      	cmp	r0, #0
  4012b2:	f43f ae73 	beq.w	400f9c <udc_process_setup+0x1c>
	return udc_iface_enable(iface_num, setting_num);
  4012b6:	b2e9      	uxtb	r1, r5
  4012b8:	4620      	mov	r0, r4
  4012ba:	4b40      	ldr	r3, [pc, #256]	; (4013bc <udc_process_setup+0x43c>)
  4012bc:	4798      	blx	r3
  4012be:	4603      	mov	r3, r0
  4012c0:	e025      	b.n	40130e <udc_process_setup+0x38e>
	if (udd_g_ctrlreq.req.wLength) {
  4012c2:	4b38      	ldr	r3, [pc, #224]	; (4013a4 <udc_process_setup+0x424>)
  4012c4:	88db      	ldrh	r3, [r3, #6]
  4012c6:	2b00      	cmp	r3, #0
  4012c8:	f47f ae6f 	bne.w	400faa <udc_process_setup+0x2a>
	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
  4012cc:	4b35      	ldr	r3, [pc, #212]	; (4013a4 <udc_process_setup+0x424>)
  4012ce:	885b      	ldrh	r3, [r3, #2]
  4012d0:	2b00      	cmp	r3, #0
  4012d2:	f47f ae6a 	bne.w	400faa <udc_process_setup+0x2a>
		return udd_ep_clear_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
  4012d6:	4b33      	ldr	r3, [pc, #204]	; (4013a4 <udc_process_setup+0x424>)
  4012d8:	7918      	ldrb	r0, [r3, #4]
  4012da:	4b3a      	ldr	r3, [pc, #232]	; (4013c4 <udc_process_setup+0x444>)
  4012dc:	4798      	blx	r3
  4012de:	4603      	mov	r3, r0
  4012e0:	e015      	b.n	40130e <udc_process_setup+0x38e>
	if (udd_g_ctrlreq.req.wLength) {
  4012e2:	4b30      	ldr	r3, [pc, #192]	; (4013a4 <udc_process_setup+0x424>)
  4012e4:	88db      	ldrh	r3, [r3, #6]
  4012e6:	2b00      	cmp	r3, #0
  4012e8:	f47f ae5f 	bne.w	400faa <udc_process_setup+0x2a>
	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
  4012ec:	4b2d      	ldr	r3, [pc, #180]	; (4013a4 <udc_process_setup+0x424>)
  4012ee:	885b      	ldrh	r3, [r3, #2]
  4012f0:	2b00      	cmp	r3, #0
  4012f2:	f47f ae5a 	bne.w	400faa <udc_process_setup+0x2a>
		udd_ep_abort(udd_g_ctrlreq.req.wIndex & 0xFF);
  4012f6:	4c2b      	ldr	r4, [pc, #172]	; (4013a4 <udc_process_setup+0x424>)
  4012f8:	7920      	ldrb	r0, [r4, #4]
  4012fa:	4b33      	ldr	r3, [pc, #204]	; (4013c8 <udc_process_setup+0x448>)
  4012fc:	4798      	blx	r3
		return udd_ep_set_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
  4012fe:	7920      	ldrb	r0, [r4, #4]
  401300:	4b32      	ldr	r3, [pc, #200]	; (4013cc <udc_process_setup+0x44c>)
  401302:	4798      	blx	r3
  401304:	4603      	mov	r3, r0
  401306:	e002      	b.n	40130e <udc_process_setup+0x38e>
		return false;
  401308:	2300      	movs	r3, #0
  40130a:	e000      	b.n	40130e <udc_process_setup+0x38e>
				return udc_req_std_dev_set_feature();
  40130c:	2300      	movs	r3, #0
		if (udc_reqstd()) {
  40130e:	2b00      	cmp	r3, #0
  401310:	f47f ae53 	bne.w	400fba <udc_process_setup+0x3a>
  401314:	e642      	b.n	400f9c <udc_process_setup+0x1c>
	if (!udc_update_iface_desc(iface_num, 0)) {
  401316:	2100      	movs	r1, #0
  401318:	4620      	mov	r0, r4
  40131a:	4b2d      	ldr	r3, [pc, #180]	; (4013d0 <udc_process_setup+0x450>)
  40131c:	4798      	blx	r3
  40131e:	2800      	cmp	r0, #0
  401320:	f43f ae43 	beq.w	400faa <udc_process_setup+0x2a>
	udi_api = udc_ptr_conf->udi_apis[iface_num];
  401324:	686b      	ldr	r3, [r5, #4]
  401326:	f853 5024 	ldr.w	r5, [r3, r4, lsl #2]
	if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
  40132a:	68eb      	ldr	r3, [r5, #12]
  40132c:	4798      	blx	r3
  40132e:	4601      	mov	r1, r0
  401330:	4620      	mov	r0, r4
  401332:	4b27      	ldr	r3, [pc, #156]	; (4013d0 <udc_process_setup+0x450>)
  401334:	4798      	blx	r3
  401336:	2800      	cmp	r0, #0
  401338:	f43f ae37 	beq.w	400faa <udc_process_setup+0x2a>
	return udi_api->setup();
  40133c:	68ab      	ldr	r3, [r5, #8]
  40133e:	4798      	blx	r3
		if (udc_req_iface()) {
  401340:	4603      	mov	r3, r0
  401342:	2800      	cmp	r0, #0
  401344:	f47f ae39 	bne.w	400fba <udc_process_setup+0x3a>
  401348:	e62f      	b.n	400faa <udc_process_setup+0x2a>
	if (0 == udc_num_configuration) {
  40134a:	4b1a      	ldr	r3, [pc, #104]	; (4013b4 <udc_process_setup+0x434>)
  40134c:	781b      	ldrb	r3, [r3, #0]
  40134e:	b30b      	cbz	r3, 401394 <udc_process_setup+0x414>
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
  401350:	4b19      	ldr	r3, [pc, #100]	; (4013b8 <udc_process_setup+0x438>)
  401352:	681a      	ldr	r2, [r3, #0]
  401354:	6813      	ldr	r3, [r2, #0]
  401356:	791b      	ldrb	r3, [r3, #4]
  401358:	b1f3      	cbz	r3, 401398 <udc_process_setup+0x418>
  40135a:	2400      	movs	r4, #0
		if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
  40135c:	4e1c      	ldr	r6, [pc, #112]	; (4013d0 <udc_process_setup+0x450>)
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
  40135e:	4f16      	ldr	r7, [pc, #88]	; (4013b8 <udc_process_setup+0x438>)
		udi_api = udc_ptr_conf->udi_apis[iface_num];
  401360:	6853      	ldr	r3, [r2, #4]
  401362:	f853 5024 	ldr.w	r5, [r3, r4, lsl #2]
		if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
  401366:	68eb      	ldr	r3, [r5, #12]
  401368:	4798      	blx	r3
  40136a:	4601      	mov	r1, r0
  40136c:	4620      	mov	r0, r4
  40136e:	47b0      	blx	r6
  401370:	4603      	mov	r3, r0
  401372:	2800      	cmp	r0, #0
  401374:	f43f ae21 	beq.w	400fba <udc_process_setup+0x3a>
		if (udi_api->setup()) {
  401378:	68ab      	ldr	r3, [r5, #8]
  40137a:	4798      	blx	r3
  40137c:	4603      	mov	r3, r0
  40137e:	2800      	cmp	r0, #0
  401380:	f47f ae1b 	bne.w	400fba <udc_process_setup+0x3a>
			iface_num++) {
  401384:	3401      	adds	r4, #1
  401386:	b2e4      	uxtb	r4, r4
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
  401388:	683a      	ldr	r2, [r7, #0]
  40138a:	6811      	ldr	r1, [r2, #0]
  40138c:	7909      	ldrb	r1, [r1, #4]
  40138e:	42a1      	cmp	r1, r4
  401390:	d8e6      	bhi.n	401360 <udc_process_setup+0x3e0>
  401392:	e612      	b.n	400fba <udc_process_setup+0x3a>
		return false; // The device is not is configured state yet
  401394:	2300      	movs	r3, #0
  401396:	e610      	b.n	400fba <udc_process_setup+0x3a>
	return false;
  401398:	2300      	movs	r3, #0
  40139a:	e60e      	b.n	400fba <udc_process_setup+0x3a>
			return false; // Error from USB host
  40139c:	2300      	movs	r3, #0
  40139e:	e60c      	b.n	400fba <udc_process_setup+0x3a>
	return false;
  4013a0:	2300      	movs	r3, #0
  4013a2:	e60a      	b.n	400fba <udc_process_setup+0x3a>
  4013a4:	20000bf4 	.word	0x20000bf4
  4013a8:	00402579 	.word	0x00402579
  4013ac:	2000046c 	.word	0x2000046c
  4013b0:	00400ef9 	.word	0x00400ef9
  4013b4:	20000ac0 	.word	0x20000ac0
  4013b8:	20000ac4 	.word	0x20000ac4
  4013bc:	00400e91 	.word	0x00400e91
  4013c0:	00400e25 	.word	0x00400e25
  4013c4:	00402829 	.word	0x00402829
  4013c8:	00402a7d 	.word	0x00402a7d
  4013cc:	00402745 	.word	0x00402745
  4013d0:	00400db1 	.word	0x00400db1

004013d4 <efc_init>:
 * \param ul_fws The number of wait states in cycle (no shift).
 *
 * \return 0 if successful.
 */
uint32_t efc_init(Efc *p_efc, uint32_t ul_access_mode, uint32_t ul_fws)
{
  4013d4:	b508      	push	{r3, lr}
#if (SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || \
	 SAMV71 || SAMV70 || SAMS70 || SAME70)
	efc_write_fmr(p_efc, ul_access_mode | EEFC_FMR_FWS(ul_fws) | EEFC_FMR_CLOE);
  4013d6:	0212      	lsls	r2, r2, #8
  4013d8:	f402 6270 	and.w	r2, r2, #3840	; 0xf00
  4013dc:	f041 6180 	orr.w	r1, r1, #67108864	; 0x4000000
  4013e0:	4311      	orrs	r1, r2
  4013e2:	4b02      	ldr	r3, [pc, #8]	; (4013ec <efc_init+0x18>)
  4013e4:	4798      	blx	r3
#else
	efc_write_fmr(p_efc, ul_access_mode | EEFC_FMR_FWS(ul_fws));
#endif
	return EFC_RC_OK;
}
  4013e6:	2000      	movs	r0, #0
  4013e8:	bd08      	pop	{r3, pc}
  4013ea:	bf00      	nop
  4013ec:	20000425 	.word	0x20000425

004013f0 <matrix_set_usb_device>:
 */
void matrix_set_usb_device(void)
{
	Matrix *p_matrix = MATRIX;

	p_matrix->CCFG_SYSIO &= ~(CCFG_SYSIO_SYSIO10 | CCFG_SYSIO_SYSIO11);
  4013f0:	4b06      	ldr	r3, [pc, #24]	; (40140c <matrix_set_usb_device+0x1c>)
  4013f2:	f8d3 2114 	ldr.w	r2, [r3, #276]	; 0x114
  4013f6:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
  4013fa:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114

	p_matrix->CCFG_USBMR |= CCFG_USBMR_DEVICE;
  4013fe:	f8d3 2120 	ldr.w	r2, [r3, #288]	; 0x120
  401402:	f042 0201 	orr.w	r2, r2, #1
  401406:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
  40140a:	4770      	bx	lr
  40140c:	400e0200 	.word	0x400e0200

00401410 <pio_get_interrupt_status>:
 *
 * \return The interrupt status value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
	return p_pio->PIO_ISR;
  401410:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
}
  401412:	4770      	bx	lr

00401414 <pio_get_interrupt_mask>:
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
	return p_pio->PIO_IMR;
  401414:	6c80      	ldr	r0, [r0, #72]	; 0x48
}
  401416:	4770      	bx	lr

00401418 <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
  401418:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40141c:	4604      	mov	r4, r0
  40141e:	4688      	mov	r8, r1
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
  401420:	4b0e      	ldr	r3, [pc, #56]	; (40145c <pio_handler_process+0x44>)
  401422:	4798      	blx	r3
  401424:	4605      	mov	r5, r0
	status &= pio_get_interrupt_mask(p_pio);
  401426:	4620      	mov	r0, r4
  401428:	4b0d      	ldr	r3, [pc, #52]	; (401460 <pio_handler_process+0x48>)
  40142a:	4798      	blx	r3

	/* Check pending events */
	if (status != 0) {
  40142c:	4005      	ands	r5, r0
  40142e:	d013      	beq.n	401458 <pio_handler_process+0x40>
  401430:	4c0c      	ldr	r4, [pc, #48]	; (401464 <pio_handler_process+0x4c>)
  401432:	f104 0660 	add.w	r6, r4, #96	; 0x60
  401436:	e003      	b.n	401440 <pio_handler_process+0x28>
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
				}
			}
			i++;
			if (i >= MAX_INTERRUPT_SOURCES) {
  401438:	42b4      	cmp	r4, r6
  40143a:	d00d      	beq.n	401458 <pio_handler_process+0x40>
  40143c:	3410      	adds	r4, #16
		while (status != 0) {
  40143e:	b15d      	cbz	r5, 401458 <pio_handler_process+0x40>
			if (gs_interrupt_sources[i].id == ul_id) {
  401440:	6820      	ldr	r0, [r4, #0]
  401442:	4540      	cmp	r0, r8
  401444:	d1f8      	bne.n	401438 <pio_handler_process+0x20>
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  401446:	6861      	ldr	r1, [r4, #4]
  401448:	4229      	tst	r1, r5
  40144a:	d0f5      	beq.n	401438 <pio_handler_process+0x20>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  40144c:	68e3      	ldr	r3, [r4, #12]
  40144e:	4798      	blx	r3
					status &= ~(gs_interrupt_sources[i].mask);
  401450:	6863      	ldr	r3, [r4, #4]
  401452:	ea25 0503 	bic.w	r5, r5, r3
  401456:	e7ef      	b.n	401438 <pio_handler_process+0x20>
  401458:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40145c:	00401411 	.word	0x00401411
  401460:	00401415 	.word	0x00401415
  401464:	20000acc 	.word	0x20000acc

00401468 <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
  401468:	b508      	push	{r3, lr}
	pio_handler_process(PIOA, ID_PIOA);
  40146a:	210b      	movs	r1, #11
  40146c:	4801      	ldr	r0, [pc, #4]	; (401474 <PIOA_Handler+0xc>)
  40146e:	4b02      	ldr	r3, [pc, #8]	; (401478 <PIOA_Handler+0x10>)
  401470:	4798      	blx	r3
  401472:	bd08      	pop	{r3, pc}
  401474:	400e0e00 	.word	0x400e0e00
  401478:	00401419 	.word	0x00401419

0040147c <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
  40147c:	b508      	push	{r3, lr}
    pio_handler_process(PIOB, ID_PIOB);
  40147e:	210c      	movs	r1, #12
  401480:	4801      	ldr	r0, [pc, #4]	; (401488 <PIOB_Handler+0xc>)
  401482:	4b02      	ldr	r3, [pc, #8]	; (40148c <PIOB_Handler+0x10>)
  401484:	4798      	blx	r3
  401486:	bd08      	pop	{r3, pc}
  401488:	400e1000 	.word	0x400e1000
  40148c:	00401419 	.word	0x00401419

00401490 <pmc_switch_sclk_to_32kxtal>:
 * \param ul_bypass 0 for Xtal, 1 for bypass.
 */
void pmc_switch_sclk_to_32kxtal(uint32_t ul_bypass)
{
	/* Set Bypass mode if required */
	if (ul_bypass == 1) {
  401490:	2801      	cmp	r0, #1
  401492:	d003      	beq.n	40149c <pmc_switch_sclk_to_32kxtal+0xc>
		SUPC->SUPC_MR |= SUPC_MR_KEY_PASSWD |
			SUPC_MR_OSCBYPASS;
	}

	SUPC->SUPC_CR = SUPC_CR_KEY_PASSWD | SUPC_CR_XTALSEL;
  401494:	4a05      	ldr	r2, [pc, #20]	; (4014ac <pmc_switch_sclk_to_32kxtal+0x1c>)
  401496:	4b06      	ldr	r3, [pc, #24]	; (4014b0 <pmc_switch_sclk_to_32kxtal+0x20>)
  401498:	601a      	str	r2, [r3, #0]
  40149a:	4770      	bx	lr
		SUPC->SUPC_MR |= SUPC_MR_KEY_PASSWD |
  40149c:	4a04      	ldr	r2, [pc, #16]	; (4014b0 <pmc_switch_sclk_to_32kxtal+0x20>)
  40149e:	6893      	ldr	r3, [r2, #8]
  4014a0:	f043 4325 	orr.w	r3, r3, #2768240640	; 0xa5000000
  4014a4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
  4014a8:	6093      	str	r3, [r2, #8]
  4014aa:	e7f3      	b.n	401494 <pmc_switch_sclk_to_32kxtal+0x4>
  4014ac:	a5000008 	.word	0xa5000008
  4014b0:	400e1410 	.word	0x400e1410

004014b4 <pmc_osc_is_ready_32kxtal>:
 * \retval 1 External 32k Xtal is ready.
 * \retval 0 External 32k Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_32kxtal(void)
{
	return ((SUPC->SUPC_SR & SUPC_SR_OSCSEL)
  4014b4:	4b05      	ldr	r3, [pc, #20]	; (4014cc <pmc_osc_is_ready_32kxtal+0x18>)
  4014b6:	695b      	ldr	r3, [r3, #20]
			&& (PMC->PMC_SR & PMC_SR_OSCSELS));
  4014b8:	f013 0f80 	tst.w	r3, #128	; 0x80
  4014bc:	bf1d      	ittte	ne
  4014be:	4b04      	ldrne	r3, [pc, #16]	; (4014d0 <pmc_osc_is_ready_32kxtal+0x1c>)
  4014c0:	6e98      	ldrne	r0, [r3, #104]	; 0x68
  4014c2:	f3c0 10c0 	ubfxne	r0, r0, #7, #1
  4014c6:	2000      	moveq	r0, #0
}
  4014c8:	4770      	bx	lr
  4014ca:	bf00      	nop
  4014cc:	400e1410 	.word	0x400e1410
  4014d0:	400e0400 	.word	0x400e0400

004014d4 <pmc_disable_pllbck>:
/**
 * \brief Disable PLLB clock.
 */
void pmc_disable_pllbck(void)
{
	PMC->CKGR_PLLBR = CKGR_PLLBR_MULB(0);
  4014d4:	2200      	movs	r2, #0
  4014d6:	4b01      	ldr	r3, [pc, #4]	; (4014dc <pmc_disable_pllbck+0x8>)
  4014d8:	62da      	str	r2, [r3, #44]	; 0x2c
  4014da:	4770      	bx	lr
  4014dc:	400e0400 	.word	0x400e0400

004014e0 <pmc_is_locked_pllbck>:
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllbck(void)
{
	return (PMC->PMC_SR & PMC_SR_LOCKB);
  4014e0:	4b02      	ldr	r3, [pc, #8]	; (4014ec <pmc_is_locked_pllbck+0xc>)
  4014e2:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  4014e4:	f000 0004 	and.w	r0, r0, #4
  4014e8:	4770      	bx	lr
  4014ea:	bf00      	nop
  4014ec:	400e0400 	.word	0x400e0400

004014f0 <pmc_enable_periph_clk>:
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
  4014f0:	2832      	cmp	r0, #50	; 0x32
  4014f2:	d81e      	bhi.n	401532 <pmc_enable_periph_clk+0x42>
		return 1;
	}

	if (ul_id < 32) {
  4014f4:	281f      	cmp	r0, #31
  4014f6:	d80c      	bhi.n	401512 <pmc_enable_periph_clk+0x22>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
  4014f8:	4b11      	ldr	r3, [pc, #68]	; (401540 <pmc_enable_periph_clk+0x50>)
  4014fa:	699a      	ldr	r2, [r3, #24]
  4014fc:	2301      	movs	r3, #1
  4014fe:	4083      	lsls	r3, r0
  401500:	4393      	bics	r3, r2
  401502:	d018      	beq.n	401536 <pmc_enable_periph_clk+0x46>
			PMC->PMC_PCER0 = 1 << ul_id;
  401504:	2301      	movs	r3, #1
  401506:	fa03 f000 	lsl.w	r0, r3, r0
  40150a:	4b0d      	ldr	r3, [pc, #52]	; (401540 <pmc_enable_periph_clk+0x50>)
  40150c:	6118      	str	r0, [r3, #16]
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
  40150e:	2000      	movs	r0, #0
  401510:	4770      	bx	lr
		ul_id -= 32;
  401512:	3820      	subs	r0, #32
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
  401514:	4b0a      	ldr	r3, [pc, #40]	; (401540 <pmc_enable_periph_clk+0x50>)
  401516:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
  40151a:	2301      	movs	r3, #1
  40151c:	4083      	lsls	r3, r0
  40151e:	4393      	bics	r3, r2
  401520:	d00b      	beq.n	40153a <pmc_enable_periph_clk+0x4a>
			PMC->PMC_PCER1 = 1 << ul_id;
  401522:	2301      	movs	r3, #1
  401524:	fa03 f000 	lsl.w	r0, r3, r0
  401528:	4b05      	ldr	r3, [pc, #20]	; (401540 <pmc_enable_periph_clk+0x50>)
  40152a:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
	return 0;
  40152e:	2000      	movs	r0, #0
  401530:	4770      	bx	lr
		return 1;
  401532:	2001      	movs	r0, #1
  401534:	4770      	bx	lr
	return 0;
  401536:	2000      	movs	r0, #0
  401538:	4770      	bx	lr
  40153a:	2000      	movs	r0, #0
}
  40153c:	4770      	bx	lr
  40153e:	bf00      	nop
  401540:	400e0400 	.word	0x400e0400

00401544 <pmc_disable_periph_clk>:
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_disable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
  401544:	2832      	cmp	r0, #50	; 0x32
  401546:	d822      	bhi.n	40158e <pmc_disable_periph_clk+0x4a>
		return 1;
	}

	if (ul_id < 32) {
  401548:	281f      	cmp	r0, #31
  40154a:	d80e      	bhi.n	40156a <pmc_disable_periph_clk+0x26>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) == (1u << ul_id)) {
  40154c:	4b11      	ldr	r3, [pc, #68]	; (401594 <pmc_disable_periph_clk+0x50>)
  40154e:	699a      	ldr	r2, [r3, #24]
  401550:	2301      	movs	r3, #1
  401552:	4083      	lsls	r3, r0
  401554:	4393      	bics	r3, r2
  401556:	d001      	beq.n	40155c <pmc_disable_periph_clk+0x18>
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) == (1u << ul_id)) {
			PMC->PMC_PCDR1 = 1 << ul_id;
		}
#endif
	}
	return 0;
  401558:	2000      	movs	r0, #0
  40155a:	4770      	bx	lr
			PMC->PMC_PCDR0 = 1 << ul_id;
  40155c:	2301      	movs	r3, #1
  40155e:	fa03 f000 	lsl.w	r0, r3, r0
  401562:	4b0c      	ldr	r3, [pc, #48]	; (401594 <pmc_disable_periph_clk+0x50>)
  401564:	6158      	str	r0, [r3, #20]
	return 0;
  401566:	2000      	movs	r0, #0
  401568:	4770      	bx	lr
		ul_id -= 32;
  40156a:	3820      	subs	r0, #32
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) == (1u << ul_id)) {
  40156c:	4b09      	ldr	r3, [pc, #36]	; (401594 <pmc_disable_periph_clk+0x50>)
  40156e:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
  401572:	2301      	movs	r3, #1
  401574:	4083      	lsls	r3, r0
  401576:	4393      	bics	r3, r2
  401578:	d001      	beq.n	40157e <pmc_disable_periph_clk+0x3a>
	return 0;
  40157a:	2000      	movs	r0, #0
}
  40157c:	4770      	bx	lr
			PMC->PMC_PCDR1 = 1 << ul_id;
  40157e:	2301      	movs	r3, #1
  401580:	fa03 f000 	lsl.w	r0, r3, r0
  401584:	4b03      	ldr	r3, [pc, #12]	; (401594 <pmc_disable_periph_clk+0x50>)
  401586:	f8c3 0104 	str.w	r0, [r3, #260]	; 0x104
	return 0;
  40158a:	2000      	movs	r0, #0
  40158c:	4770      	bx	lr
		return 1;
  40158e:	2001      	movs	r0, #1
  401590:	4770      	bx	lr
  401592:	bf00      	nop
  401594:	400e0400 	.word	0x400e0400

00401598 <pmc_switch_udpck_to_pllbck>:
 *
 * \param ul_usbdiv Clock divisor.
 */
void pmc_switch_udpck_to_pllbck(uint32_t ul_usbdiv)
{
	PMC->PMC_USB = PMC_USB_USBDIV(ul_usbdiv) | PMC_USB_USBS;
  401598:	0200      	lsls	r0, r0, #8
  40159a:	f400 6070 	and.w	r0, r0, #3840	; 0xf00
  40159e:	f040 0001 	orr.w	r0, r0, #1
  4015a2:	4b01      	ldr	r3, [pc, #4]	; (4015a8 <pmc_switch_udpck_to_pllbck+0x10>)
  4015a4:	6398      	str	r0, [r3, #56]	; 0x38
  4015a6:	4770      	bx	lr
  4015a8:	400e0400 	.word	0x400e0400

004015ac <pmc_enable_udpck>:
 * \brief Enable UDP (USB) clock.
 */
void pmc_enable_udpck(void)
{
#if (SAM3S || SAM4S || SAM4E || SAMG55)
	PMC->PMC_SCER = PMC_SCER_UDP;
  4015ac:	2280      	movs	r2, #128	; 0x80
  4015ae:	4b01      	ldr	r3, [pc, #4]	; (4015b4 <pmc_enable_udpck+0x8>)
  4015b0:	601a      	str	r2, [r3, #0]
  4015b2:	4770      	bx	lr
  4015b4:	400e0400 	.word	0x400e0400

004015b8 <pmc_set_fast_startup_input>:
 * \param ul_inputs Wake up inputs to enable.
 */
void pmc_set_fast_startup_input(uint32_t ul_inputs)
{
	ul_inputs &= PMC_FAST_STARTUP_Msk;
	PMC->PMC_FSMR |= ul_inputs;
  4015b8:	4b03      	ldr	r3, [pc, #12]	; (4015c8 <pmc_set_fast_startup_input+0x10>)
  4015ba:	6f1a      	ldr	r2, [r3, #112]	; 0x70
	ul_inputs &= PMC_FAST_STARTUP_Msk;
  4015bc:	f3c0 0012 	ubfx	r0, r0, #0, #19
	PMC->PMC_FSMR |= ul_inputs;
  4015c0:	4310      	orrs	r0, r2
  4015c2:	6718      	str	r0, [r3, #112]	; 0x70
  4015c4:	4770      	bx	lr
  4015c6:	bf00      	nop
  4015c8:	400e0400 	.word	0x400e0400

004015cc <pmc_is_wakeup_clocks_restored>:
	}
}

bool pmc_is_wakeup_clocks_restored(void)
{
	return !b_is_sleep_clock_used;
  4015cc:	4b02      	ldr	r3, [pc, #8]	; (4015d8 <pmc_is_wakeup_clocks_restored+0xc>)
  4015ce:	7818      	ldrb	r0, [r3, #0]
}
  4015d0:	f080 0001 	eor.w	r0, r0, #1
  4015d4:	4770      	bx	lr
  4015d6:	bf00      	nop
  4015d8:	20000b3c 	.word	0x20000b3c

004015dc <udd_ctrl_init>:
	cpu_irq_restore(flags);
}

static void udd_ctrl_init(void)
{
	udd_g_ctrlreq.callback = NULL;
  4015dc:	4a03      	ldr	r2, [pc, #12]	; (4015ec <udd_ctrl_init+0x10>)
  4015de:	2300      	movs	r3, #0
  4015e0:	6113      	str	r3, [r2, #16]
	udd_g_ctrlreq.over_under_run = NULL;
  4015e2:	6153      	str	r3, [r2, #20]
	udd_g_ctrlreq.payload_size = 0;
  4015e4:	8193      	strh	r3, [r2, #12]
	udd_ep_control_state = UDD_EPCTRL_SETUP;
  4015e6:	4a02      	ldr	r2, [pc, #8]	; (4015f0 <udd_ctrl_init+0x14>)
  4015e8:	7013      	strb	r3, [r2, #0]
  4015ea:	4770      	bx	lr
  4015ec:	20000bf4 	.word	0x20000bf4
  4015f0:	20000b44 	.word	0x20000b44

004015f4 <udd_ctrl_stall_data>:
	udd_ack_bank0_received(0);
}


static void udd_ctrl_stall_data(void)
{
  4015f4:	b082      	sub	sp, #8
	// Stall all packets on IN & OUT control endpoint
	udd_ep_control_state = UDD_EPCTRL_STALL_REQ;
  4015f6:	2205      	movs	r2, #5
  4015f8:	4b0a      	ldr	r3, [pc, #40]	; (401624 <udd_ctrl_stall_data+0x30>)
  4015fa:	701a      	strb	r2, [r3, #0]
	udd_enable_stall_handshake(0);
  4015fc:	4a0a      	ldr	r2, [pc, #40]	; (401628 <udd_ctrl_stall_data+0x34>)
  4015fe:	6b13      	ldr	r3, [r2, #48]	; 0x30
  401600:	9301      	str	r3, [sp, #4]
  401602:	9b01      	ldr	r3, [sp, #4]
  401604:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  401608:	9301      	str	r3, [sp, #4]
  40160a:	9b01      	ldr	r3, [sp, #4]
  40160c:	f043 0320 	orr.w	r3, r3, #32
  401610:	9301      	str	r3, [sp, #4]
  401612:	9b01      	ldr	r3, [sp, #4]
  401614:	6313      	str	r3, [r2, #48]	; 0x30
  401616:	6b13      	ldr	r3, [r2, #48]	; 0x30
  401618:	f013 0f20 	tst.w	r3, #32
  40161c:	d0fb      	beq.n	401616 <udd_ctrl_stall_data+0x22>
}
  40161e:	b002      	add	sp, #8
  401620:	4770      	bx	lr
  401622:	bf00      	nop
  401624:	20000b44 	.word	0x20000b44
  401628:	40044000 	.word	0x40044000

0040162c <udd_ctrl_send_zlp_in>:


static void udd_ctrl_send_zlp_in(void)
{
  40162c:	b082      	sub	sp, #8
	udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP;
  40162e:	2203      	movs	r2, #3
  401630:	4b0a      	ldr	r3, [pc, #40]	; (40165c <udd_ctrl_send_zlp_in+0x30>)
  401632:	701a      	strb	r2, [r3, #0]
	// Validate and send empty IN packet on control endpoint
	// Send ZLP on IN endpoint
	udd_set_transmit_ready(0);
  401634:	4a0a      	ldr	r2, [pc, #40]	; (401660 <udd_ctrl_send_zlp_in+0x34>)
  401636:	6b13      	ldr	r3, [r2, #48]	; 0x30
  401638:	9301      	str	r3, [sp, #4]
  40163a:	9b01      	ldr	r3, [sp, #4]
  40163c:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  401640:	9301      	str	r3, [sp, #4]
  401642:	9b01      	ldr	r3, [sp, #4]
  401644:	f043 0310 	orr.w	r3, r3, #16
  401648:	9301      	str	r3, [sp, #4]
  40164a:	9b01      	ldr	r3, [sp, #4]
  40164c:	6313      	str	r3, [r2, #48]	; 0x30
  40164e:	6b13      	ldr	r3, [r2, #48]	; 0x30
  401650:	f013 0f10 	tst.w	r3, #16
  401654:	d0fb      	beq.n	40164e <udd_ctrl_send_zlp_in+0x22>
}
  401656:	b002      	add	sp, #8
  401658:	4770      	bx	lr
  40165a:	bf00      	nop
  40165c:	20000b44 	.word	0x20000b44
  401660:	40044000 	.word	0x40044000

00401664 <udd_ctrl_endofrequest>:
	// because the buffer of control endpoint is already free
}


static void udd_ctrl_endofrequest(void)
{
  401664:	b508      	push	{r3, lr}
	// If a callback is registered then call it
	if (udd_g_ctrlreq.callback) {
  401666:	4b02      	ldr	r3, [pc, #8]	; (401670 <udd_ctrl_endofrequest+0xc>)
  401668:	691b      	ldr	r3, [r3, #16]
  40166a:	b103      	cbz	r3, 40166e <udd_ctrl_endofrequest+0xa>
		udd_g_ctrlreq.callback();
  40166c:	4798      	blx	r3
  40166e:	bd08      	pop	{r3, pc}
  401670:	20000bf4 	.word	0x20000bf4

00401674 <udd_ctrl_in_sent>:
{
  401674:	b530      	push	{r4, r5, lr}
  401676:	b087      	sub	sp, #28
	if (UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP == udd_ep_control_state) {
  401678:	4b63      	ldr	r3, [pc, #396]	; (401808 <udd_ctrl_in_sent+0x194>)
  40167a:	781b      	ldrb	r3, [r3, #0]
  40167c:	2b03      	cmp	r3, #3
  40167e:	d029      	beq.n	4016d4 <udd_ctrl_in_sent+0x60>
	nb_remain = udd_g_ctrlreq.payload_size - udd_ctrl_payload_nb_trans;
  401680:	4b62      	ldr	r3, [pc, #392]	; (40180c <udd_ctrl_in_sent+0x198>)
  401682:	881b      	ldrh	r3, [r3, #0]
  401684:	4a62      	ldr	r2, [pc, #392]	; (401810 <udd_ctrl_in_sent+0x19c>)
  401686:	8994      	ldrh	r4, [r2, #12]
  401688:	1ae4      	subs	r4, r4, r3
  40168a:	b2a4      	uxth	r4, r4
	if (0 == nb_remain) {
  40168c:	2c00      	cmp	r4, #0
  40168e:	d144      	bne.n	40171a <udd_ctrl_in_sent+0xa6>
		udd_ctrl_prev_payload_nb_trans += udd_ctrl_payload_nb_trans;
  401690:	4a60      	ldr	r2, [pc, #384]	; (401814 <udd_ctrl_in_sent+0x1a0>)
  401692:	8811      	ldrh	r1, [r2, #0]
  401694:	440b      	add	r3, r1
  401696:	b29b      	uxth	r3, r3
  401698:	8013      	strh	r3, [r2, #0]
		if ((udd_g_ctrlreq.req.wLength == udd_ctrl_prev_payload_nb_trans)
  40169a:	4a5d      	ldr	r2, [pc, #372]	; (401810 <udd_ctrl_in_sent+0x19c>)
  40169c:	88d2      	ldrh	r2, [r2, #6]
  40169e:	429a      	cmp	r2, r3
  4016a0:	d003      	beq.n	4016aa <udd_ctrl_in_sent+0x36>
				|| b_shortpacket) {
  4016a2:	4b5d      	ldr	r3, [pc, #372]	; (401818 <udd_ctrl_in_sent+0x1a4>)
  4016a4:	781b      	ldrb	r3, [r3, #0]
  4016a6:	2b00      	cmp	r3, #0
  4016a8:	d02b      	beq.n	401702 <udd_ctrl_in_sent+0x8e>
	udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
  4016aa:	2204      	movs	r2, #4
  4016ac:	4b56      	ldr	r3, [pc, #344]	; (401808 <udd_ctrl_in_sent+0x194>)
  4016ae:	701a      	strb	r2, [r3, #0]
			udd_ack_in_sent(0);
  4016b0:	4a5a      	ldr	r2, [pc, #360]	; (40181c <udd_ctrl_in_sent+0x1a8>)
  4016b2:	6b13      	ldr	r3, [r2, #48]	; 0x30
  4016b4:	9301      	str	r3, [sp, #4]
  4016b6:	9b01      	ldr	r3, [sp, #4]
  4016b8:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  4016bc:	9301      	str	r3, [sp, #4]
  4016be:	9b01      	ldr	r3, [sp, #4]
  4016c0:	f023 0301 	bic.w	r3, r3, #1
  4016c4:	9301      	str	r3, [sp, #4]
  4016c6:	9b01      	ldr	r3, [sp, #4]
  4016c8:	6313      	str	r3, [r2, #48]	; 0x30
  4016ca:	6b13      	ldr	r3, [r2, #48]	; 0x30
  4016cc:	f013 0f01 	tst.w	r3, #1
  4016d0:	d1fb      	bne.n	4016ca <udd_ctrl_in_sent+0x56>
  4016d2:	e014      	b.n	4016fe <udd_ctrl_in_sent+0x8a>
		udd_ack_in_sent(0);
  4016d4:	4a51      	ldr	r2, [pc, #324]	; (40181c <udd_ctrl_in_sent+0x1a8>)
  4016d6:	6b13      	ldr	r3, [r2, #48]	; 0x30
  4016d8:	9300      	str	r3, [sp, #0]
  4016da:	9b00      	ldr	r3, [sp, #0]
  4016dc:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  4016e0:	9300      	str	r3, [sp, #0]
  4016e2:	9b00      	ldr	r3, [sp, #0]
  4016e4:	f023 0301 	bic.w	r3, r3, #1
  4016e8:	9300      	str	r3, [sp, #0]
  4016ea:	9b00      	ldr	r3, [sp, #0]
  4016ec:	6313      	str	r3, [r2, #48]	; 0x30
  4016ee:	6b13      	ldr	r3, [r2, #48]	; 0x30
  4016f0:	f013 0f01 	tst.w	r3, #1
  4016f4:	d1fb      	bne.n	4016ee <udd_ctrl_in_sent+0x7a>
		udd_ctrl_endofrequest();
  4016f6:	4b4a      	ldr	r3, [pc, #296]	; (401820 <udd_ctrl_in_sent+0x1ac>)
  4016f8:	4798      	blx	r3
		udd_ctrl_init();
  4016fa:	4b4a      	ldr	r3, [pc, #296]	; (401824 <udd_ctrl_in_sent+0x1b0>)
  4016fc:	4798      	blx	r3
}
  4016fe:	b007      	add	sp, #28
  401700:	bd30      	pop	{r4, r5, pc}
		if ((!udd_g_ctrlreq.over_under_run)
  401702:	4b43      	ldr	r3, [pc, #268]	; (401810 <udd_ctrl_in_sent+0x19c>)
  401704:	695b      	ldr	r3, [r3, #20]
  401706:	2b00      	cmp	r3, #0
  401708:	d05d      	beq.n	4017c6 <udd_ctrl_in_sent+0x152>
				|| (!udd_g_ctrlreq.over_under_run())) {
  40170a:	4798      	blx	r3
  40170c:	2800      	cmp	r0, #0
  40170e:	d05a      	beq.n	4017c6 <udd_ctrl_in_sent+0x152>
			udd_ctrl_payload_nb_trans = 0;
  401710:	2200      	movs	r2, #0
  401712:	4b3e      	ldr	r3, [pc, #248]	; (40180c <udd_ctrl_in_sent+0x198>)
  401714:	801a      	strh	r2, [r3, #0]
			nb_remain = udd_g_ctrlreq.payload_size;
  401716:	4b3e      	ldr	r3, [pc, #248]	; (401810 <udd_ctrl_in_sent+0x19c>)
  401718:	899c      	ldrh	r4, [r3, #12]
	if (nb_remain >= USB_DEVICE_EP_CTRL_SIZE) {
  40171a:	2c3f      	cmp	r4, #63	; 0x3f
  40171c:	d953      	bls.n	4017c6 <udd_ctrl_in_sent+0x152>
		b_shortpacket = false;
  40171e:	2200      	movs	r2, #0
  401720:	4b3d      	ldr	r3, [pc, #244]	; (401818 <udd_ctrl_in_sent+0x1a4>)
  401722:	701a      	strb	r2, [r3, #0]
		nb_remain = USB_DEVICE_EP_CTRL_SIZE;
  401724:	2440      	movs	r4, #64	; 0x40
	ptr_src = udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans;
  401726:	4b3a      	ldr	r3, [pc, #232]	; (401810 <udd_ctrl_in_sent+0x19c>)
  401728:	6899      	ldr	r1, [r3, #8]
  40172a:	4b38      	ldr	r3, [pc, #224]	; (40180c <udd_ctrl_in_sent+0x198>)
  40172c:	8818      	ldrh	r0, [r3, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  40172e:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
  401732:	fab3 f383 	clz	r3, r3
  401736:	095b      	lsrs	r3, r3, #5
  401738:	9305      	str	r3, [sp, #20]
  __ASM volatile ("cpsid i" : : : "memory");
  40173a:	b672      	cpsid	i
  40173c:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  401740:	2200      	movs	r2, #0
  401742:	4b39      	ldr	r3, [pc, #228]	; (401828 <udd_ctrl_in_sent+0x1b4>)
  401744:	701a      	strb	r2, [r3, #0]
	return flags;
  401746:	9d05      	ldr	r5, [sp, #20]
	if (Is_udd_bank0_received(0)) {
  401748:	4b34      	ldr	r3, [pc, #208]	; (40181c <udd_ctrl_in_sent+0x1a8>)
  40174a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  40174c:	f013 0f02 	tst.w	r3, #2
  401750:	d13d      	bne.n	4017ce <udd_ctrl_in_sent+0x15a>
	for (i = 0; i < nb_remain; i++) {
  401752:	b14c      	cbz	r4, 401768 <udd_ctrl_in_sent+0xf4>
	ptr_src = udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans;
  401754:	4401      	add	r1, r0
  401756:	460a      	mov	r2, r1
		udd_endpoint_fifo_write(0, *ptr_src++);
  401758:	4830      	ldr	r0, [pc, #192]	; (40181c <udd_ctrl_in_sent+0x1a8>)
  40175a:	f812 3b01 	ldrb.w	r3, [r2], #1
  40175e:	6503      	str	r3, [r0, #80]	; 0x50
	for (i = 0; i < nb_remain; i++) {
  401760:	1a53      	subs	r3, r2, r1
  401762:	b2db      	uxtb	r3, r3
  401764:	42a3      	cmp	r3, r4
  401766:	d3f8      	bcc.n	40175a <udd_ctrl_in_sent+0xe6>
	udd_ctrl_payload_nb_trans += nb_remain;
  401768:	4b28      	ldr	r3, [pc, #160]	; (40180c <udd_ctrl_in_sent+0x198>)
  40176a:	881a      	ldrh	r2, [r3, #0]
  40176c:	4414      	add	r4, r2
  40176e:	801c      	strh	r4, [r3, #0]
	udd_set_transmit_ready(0);
  401770:	4a2a      	ldr	r2, [pc, #168]	; (40181c <udd_ctrl_in_sent+0x1a8>)
  401772:	6b13      	ldr	r3, [r2, #48]	; 0x30
  401774:	9303      	str	r3, [sp, #12]
  401776:	9b03      	ldr	r3, [sp, #12]
  401778:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  40177c:	9303      	str	r3, [sp, #12]
  40177e:	9b03      	ldr	r3, [sp, #12]
  401780:	f043 0310 	orr.w	r3, r3, #16
  401784:	9303      	str	r3, [sp, #12]
  401786:	9b03      	ldr	r3, [sp, #12]
  401788:	6313      	str	r3, [r2, #48]	; 0x30
  40178a:	6b13      	ldr	r3, [r2, #48]	; 0x30
  40178c:	f013 0f10 	tst.w	r3, #16
  401790:	d0fb      	beq.n	40178a <udd_ctrl_in_sent+0x116>
	udd_ack_in_sent(0);
  401792:	4a22      	ldr	r2, [pc, #136]	; (40181c <udd_ctrl_in_sent+0x1a8>)
  401794:	6b13      	ldr	r3, [r2, #48]	; 0x30
  401796:	9304      	str	r3, [sp, #16]
  401798:	9b04      	ldr	r3, [sp, #16]
  40179a:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  40179e:	9304      	str	r3, [sp, #16]
  4017a0:	9b04      	ldr	r3, [sp, #16]
  4017a2:	f023 0301 	bic.w	r3, r3, #1
  4017a6:	9304      	str	r3, [sp, #16]
  4017a8:	9b04      	ldr	r3, [sp, #16]
  4017aa:	6313      	str	r3, [r2, #48]	; 0x30
  4017ac:	6b13      	ldr	r3, [r2, #48]	; 0x30
  4017ae:	f013 0f01 	tst.w	r3, #1
  4017b2:	d1fb      	bne.n	4017ac <udd_ctrl_in_sent+0x138>
	if (cpu_irq_is_enabled_flags(flags))
  4017b4:	2d00      	cmp	r5, #0
  4017b6:	d0a2      	beq.n	4016fe <udd_ctrl_in_sent+0x8a>
		cpu_irq_enable();
  4017b8:	2201      	movs	r2, #1
  4017ba:	4b1b      	ldr	r3, [pc, #108]	; (401828 <udd_ctrl_in_sent+0x1b4>)
  4017bc:	701a      	strb	r2, [r3, #0]
  4017be:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  4017c2:	b662      	cpsie	i
  4017c4:	e79b      	b.n	4016fe <udd_ctrl_in_sent+0x8a>
		b_shortpacket = true;
  4017c6:	2201      	movs	r2, #1
  4017c8:	4b13      	ldr	r3, [pc, #76]	; (401818 <udd_ctrl_in_sent+0x1a4>)
  4017ca:	701a      	strb	r2, [r3, #0]
  4017cc:	e7ab      	b.n	401726 <udd_ctrl_in_sent+0xb2>
	if (cpu_irq_is_enabled_flags(flags))
  4017ce:	b12d      	cbz	r5, 4017dc <udd_ctrl_in_sent+0x168>
		cpu_irq_enable();
  4017d0:	2201      	movs	r2, #1
  4017d2:	4b15      	ldr	r3, [pc, #84]	; (401828 <udd_ctrl_in_sent+0x1b4>)
  4017d4:	701a      	strb	r2, [r3, #0]
  4017d6:	f3bf 8f5f 	dmb	sy
  4017da:	b662      	cpsie	i
		udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
  4017dc:	2204      	movs	r2, #4
  4017de:	4b0a      	ldr	r3, [pc, #40]	; (401808 <udd_ctrl_in_sent+0x194>)
  4017e0:	701a      	strb	r2, [r3, #0]
		udd_ack_in_sent(0);
  4017e2:	4a0e      	ldr	r2, [pc, #56]	; (40181c <udd_ctrl_in_sent+0x1a8>)
  4017e4:	6b13      	ldr	r3, [r2, #48]	; 0x30
  4017e6:	9302      	str	r3, [sp, #8]
  4017e8:	9b02      	ldr	r3, [sp, #8]
  4017ea:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  4017ee:	9302      	str	r3, [sp, #8]
  4017f0:	9b02      	ldr	r3, [sp, #8]
  4017f2:	f023 0301 	bic.w	r3, r3, #1
  4017f6:	9302      	str	r3, [sp, #8]
  4017f8:	9b02      	ldr	r3, [sp, #8]
  4017fa:	6313      	str	r3, [r2, #48]	; 0x30
  4017fc:	6b13      	ldr	r3, [r2, #48]	; 0x30
  4017fe:	f013 0f01 	tst.w	r3, #1
  401802:	d1fb      	bne.n	4017fc <udd_ctrl_in_sent+0x188>
  401804:	e77b      	b.n	4016fe <udd_ctrl_in_sent+0x8a>
  401806:	bf00      	nop
  401808:	20000b44 	.word	0x20000b44
  40180c:	20000b40 	.word	0x20000b40
  401810:	20000bf4 	.word	0x20000bf4
  401814:	20000b42 	.word	0x20000b42
  401818:	20000b3d 	.word	0x20000b3d
  40181c:	40044000 	.word	0x40044000
  401820:	00401665 	.word	0x00401665
  401824:	004015dd 	.word	0x004015dd
  401828:	20000520 	.word	0x20000520

0040182c <udd_ep_finish_job>:
}


static void udd_ep_finish_job(udd_ep_job_t * ptr_job, int status,
		uint8_t ep_num)
{
  40182c:	b538      	push	{r3, r4, r5, lr}
	if (ptr_job->busy == false) {
  40182e:	7c43      	ldrb	r3, [r0, #17]
  401830:	f013 0f10 	tst.w	r3, #16
  401834:	d016      	beq.n	401864 <udd_ep_finish_job+0x38>
  401836:	460d      	mov	r5, r1
		return; // No on-going job
	}
	ptr_job->busy = false;
  401838:	7c43      	ldrb	r3, [r0, #17]
  40183a:	f36f 1304 	bfc	r3, #4, #1
  40183e:	7443      	strb	r3, [r0, #17]
	if (NULL == ptr_job->call_trans) {
  401840:	6804      	ldr	r4, [r0, #0]
  401842:	b17c      	cbz	r4, 401864 <udd_ep_finish_job+0x38>
		return; // No callback linked to job
	}
	if (Is_udd_endpoint_type_in(ep_num)) {
  401844:	f102 030c 	add.w	r3, r2, #12
  401848:	4907      	ldr	r1, [pc, #28]	; (401868 <udd_ep_finish_job+0x3c>)
  40184a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
  40184e:	f413 6f80 	tst.w	r3, #1024	; 0x400
		ep_num |= USB_EP_DIR_IN;
  401852:	bf18      	it	ne
  401854:	f042 0280 	orrne.w	r2, r2, #128	; 0x80
	}	
	ptr_job->call_trans((status == UDD_EP_TRANSFER_ABORT) ?
  401858:	6881      	ldr	r1, [r0, #8]
  40185a:	2d01      	cmp	r5, #1
  40185c:	bf14      	ite	ne
  40185e:	2000      	movne	r0, #0
  401860:	2001      	moveq	r0, #1
  401862:	47a0      	blx	r4
  401864:	bd38      	pop	{r3, r4, r5, pc}
  401866:	bf00      	nop
  401868:	40044000 	.word	0x40044000

0040186c <udd_ep_ack_out_received>:
		UDD_EP_TRANSFER_ABORT : UDD_EP_TRANSFER_OK, ptr_job->buf_size, ep_num);
}


static void udd_ep_ack_out_received(udd_ep_id_t ep)
{
  40186c:	b430      	push	{r4, r5}
  40186e:	b082      	sub	sp, #8
	bool bank0_received, bank1_received;
	udd_ep_job_t *ptr_job = &udd_ep_job[ep - 1];
  401870:	1e41      	subs	r1, r0, #1
  401872:	0083      	lsls	r3, r0, #2
  401874:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
  401878:	f503 2380 	add.w	r3, r3, #262144	; 0x40000

	bank0_received = Is_udd_bank0_received(ep);
  40187c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
	bank1_received = Is_udd_bank1_received(ep);
  40187e:	6b1c      	ldr	r4, [r3, #48]	; 0x30

	if (bank0_received && bank1_received) {
  401880:	f012 0f02 	tst.w	r2, #2
  401884:	d032      	beq.n	4018ec <udd_ep_ack_out_received+0x80>
  401886:	f014 0f40 	tst.w	r4, #64	; 0x40
  40188a:	d108      	bne.n	40189e <udd_ep_ack_out_received+0x32>
		// The only way is to use ptr_job->bank
	} else if (bank0_received) {
		// Must be bank0
		ptr_job->bank = 0;
  40188c:	eb01 0281 	add.w	r2, r1, r1, lsl #2
  401890:	4c2a      	ldr	r4, [pc, #168]	; (40193c <udd_ep_ack_out_received+0xd0>)
  401892:	eb04 0282 	add.w	r2, r4, r2, lsl #2
  401896:	7c54      	ldrb	r4, [r2, #17]
  401898:	f36f 0483 	bfc	r4, #2, #2
  40189c:	7454      	strb	r4, [r2, #17]
	} else {
		// Must be bank1
		ptr_job->bank = 1;
	}
	if (ptr_job->bank == 0) {
  40189e:	eb01 0281 	add.w	r2, r1, r1, lsl #2
  4018a2:	4c26      	ldr	r4, [pc, #152]	; (40193c <udd_ep_ack_out_received+0xd0>)
  4018a4:	eb04 0282 	add.w	r2, r4, r2, lsl #2
  4018a8:	7c52      	ldrb	r2, [r2, #17]
  4018aa:	f012 0f0c 	tst.w	r2, #12
  4018ae:	d128      	bne.n	401902 <udd_ep_ack_out_received+0x96>
		udd_ack_bank0_received(ep);
  4018b0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  4018b2:	9200      	str	r2, [sp, #0]
  4018b4:	9a00      	ldr	r2, [sp, #0]
  4018b6:	f042 024f 	orr.w	r2, r2, #79	; 0x4f
  4018ba:	9200      	str	r2, [sp, #0]
  4018bc:	9a00      	ldr	r2, [sp, #0]
  4018be:	f022 0202 	bic.w	r2, r2, #2
  4018c2:	9200      	str	r2, [sp, #0]
  4018c4:	9a00      	ldr	r2, [sp, #0]
  4018c6:	631a      	str	r2, [r3, #48]	; 0x30
  4018c8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  4018ca:	f012 0f02 	tst.w	r2, #2
  4018ce:	d1fb      	bne.n	4018c8 <udd_ep_ack_out_received+0x5c>
		if (udd_get_endpoint_bank_max_nbr(ep) > 1) {
  4018d0:	b380      	cbz	r0, 401934 <udd_ep_ack_out_received+0xc8>
  4018d2:	2803      	cmp	r0, #3
  4018d4:	d02e      	beq.n	401934 <udd_ep_ack_out_received+0xc8>
			ptr_job->bank = 1;
  4018d6:	eb01 0181 	add.w	r1, r1, r1, lsl #2
  4018da:	4b18      	ldr	r3, [pc, #96]	; (40193c <udd_ep_ack_out_received+0xd0>)
  4018dc:	eb03 0381 	add.w	r3, r3, r1, lsl #2
  4018e0:	7c5a      	ldrb	r2, [r3, #17]
  4018e2:	2101      	movs	r1, #1
  4018e4:	f361 0283 	bfi	r2, r1, #2, #2
  4018e8:	745a      	strb	r2, [r3, #17]
  4018ea:	e023      	b.n	401934 <udd_ep_ack_out_received+0xc8>
		ptr_job->bank = 1;
  4018ec:	eb01 0281 	add.w	r2, r1, r1, lsl #2
  4018f0:	4c12      	ldr	r4, [pc, #72]	; (40193c <udd_ep_ack_out_received+0xd0>)
  4018f2:	eb04 0282 	add.w	r2, r4, r2, lsl #2
  4018f6:	7c54      	ldrb	r4, [r2, #17]
  4018f8:	2501      	movs	r5, #1
  4018fa:	f365 0483 	bfi	r4, r5, #2, #2
  4018fe:	7454      	strb	r4, [r2, #17]
  401900:	e7cd      	b.n	40189e <udd_ep_ack_out_received+0x32>
		}
	} else {
		udd_ack_bank1_received(ep);
  401902:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  401904:	9201      	str	r2, [sp, #4]
  401906:	9a01      	ldr	r2, [sp, #4]
  401908:	f042 024f 	orr.w	r2, r2, #79	; 0x4f
  40190c:	9201      	str	r2, [sp, #4]
  40190e:	9a01      	ldr	r2, [sp, #4]
  401910:	f022 0240 	bic.w	r2, r2, #64	; 0x40
  401914:	9201      	str	r2, [sp, #4]
  401916:	9a01      	ldr	r2, [sp, #4]
  401918:	631a      	str	r2, [r3, #48]	; 0x30
  40191a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  40191c:	f012 0f40 	tst.w	r2, #64	; 0x40
  401920:	d1fb      	bne.n	40191a <udd_ep_ack_out_received+0xae>
		ptr_job->bank = 0;
  401922:	eb01 0181 	add.w	r1, r1, r1, lsl #2
  401926:	4b05      	ldr	r3, [pc, #20]	; (40193c <udd_ep_ack_out_received+0xd0>)
  401928:	eb03 0181 	add.w	r1, r3, r1, lsl #2
  40192c:	7c4b      	ldrb	r3, [r1, #17]
  40192e:	f36f 0383 	bfc	r3, #2, #2
  401932:	744b      	strb	r3, [r1, #17]
	}
}
  401934:	b002      	add	sp, #8
  401936:	bc30      	pop	{r4, r5}
  401938:	4770      	bx	lr
  40193a:	bf00      	nop
  40193c:	20000b48 	.word	0x20000b48

00401940 <udd_ep_in_sent>:
	return is_short_pkt;
}


static bool udd_ep_in_sent(udd_ep_id_t ep, bool b_tx)
{
  401940:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  401944:	b083      	sub	sp, #12
  401946:	4688      	mov	r8, r1
	bool b_shortpacket;
	udd_ep_job_t *ptr_job = &udd_ep_job[ep - 1];
  401948:	4681      	mov	r9, r0
  40194a:	1e46      	subs	r6, r0, #1

	// All banks are full
	if (ptr_job->bank >= udd_get_endpoint_bank_max_nbr(ep)) {
  40194c:	eb06 0286 	add.w	r2, r6, r6, lsl #2
  401950:	4b66      	ldr	r3, [pc, #408]	; (401aec <udd_ep_in_sent+0x1ac>)
  401952:	eb03 0382 	add.w	r3, r3, r2, lsl #2
  401956:	f893 c011 	ldrb.w	ip, [r3, #17]
  40195a:	f3cc 0c81 	ubfx	ip, ip, #2, #2
  40195e:	2800      	cmp	r0, #0
  401960:	f000 80b7 	beq.w	401ad2 <udd_ep_in_sent+0x192>
  401964:	2803      	cmp	r0, #3
  401966:	bf0c      	ite	eq
  401968:	2301      	moveq	r3, #1
  40196a:	2302      	movne	r3, #2
  40196c:	4563      	cmp	r3, ip
  40196e:	f340 80b2 	ble.w	401ad6 <udd_ep_in_sent+0x196>
		return true; // Data pending
	}

	// No more data in buffer
	if (ptr_job->buf_cnt >= ptr_job->buf_size && !ptr_job->b_shortpacket) {
  401972:	eb06 0386 	add.w	r3, r6, r6, lsl #2
  401976:	4a5d      	ldr	r2, [pc, #372]	; (401aec <udd_ep_in_sent+0x1ac>)
  401978:	eb02 0383 	add.w	r3, r2, r3, lsl #2
  40197c:	68da      	ldr	r2, [r3, #12]
  40197e:	689b      	ldr	r3, [r3, #8]
  401980:	429a      	cmp	r2, r3
  401982:	d309      	bcc.n	401998 <udd_ep_in_sent+0x58>
  401984:	eb06 0186 	add.w	r1, r6, r6, lsl #2
  401988:	4c58      	ldr	r4, [pc, #352]	; (401aec <udd_ep_in_sent+0x1ac>)
  40198a:	eb04 0181 	add.w	r1, r4, r1, lsl #2
  40198e:	7c49      	ldrb	r1, [r1, #17]
  401990:	f011 0f40 	tst.w	r1, #64	; 0x40
  401994:	f000 80a3 	beq.w	401ade <udd_ep_in_sent+0x19e>
	uint8_t *ptr_src = &ptr_job->buf[ptr_job->buf_cnt];
  401998:	eb06 0586 	add.w	r5, r6, r6, lsl #2
  40199c:	4953      	ldr	r1, [pc, #332]	; (401aec <udd_ep_in_sent+0x1ac>)
  40199e:	eb01 0585 	add.w	r5, r1, r5, lsl #2
  4019a2:	686c      	ldr	r4, [r5, #4]
  4019a4:	4414      	add	r4, r2
	uint32_t nb_remain = ptr_job->buf_size - ptr_job->buf_cnt;
  4019a6:	1a99      	subs	r1, r3, r2
	uint32_t pkt_size = ptr_job->size;
  4019a8:	8a2b      	ldrh	r3, [r5, #16]
  4019aa:	f3c3 0709 	ubfx	r7, r3, #0, #10
	if (nb_remain < pkt_size) {
  4019ae:	42b9      	cmp	r1, r7
		pkt_size = nb_remain;
  4019b0:	bf3a      	itte	cc
  4019b2:	460f      	movcc	r7, r1
		is_short_pkt = true;
  4019b4:	f04f 0e01 	movcc.w	lr, #1
	bool is_short_pkt = false;
  4019b8:	f04f 0e00 	movcs.w	lr, #0
	ptr_job->buf_cnt += pkt_size;
  4019bc:	eb06 0386 	add.w	r3, r6, r6, lsl #2
  4019c0:	494a      	ldr	r1, [pc, #296]	; (401aec <udd_ep_in_sent+0x1ac>)
  4019c2:	eb01 0383 	add.w	r3, r1, r3, lsl #2
  4019c6:	443a      	add	r2, r7
  4019c8:	60da      	str	r2, [r3, #12]
	for (; pkt_size >= 8; pkt_size -= 8) {
  4019ca:	2f07      	cmp	r7, #7
  4019cc:	d92b      	bls.n	401a26 <udd_ep_in_sent+0xe6>
  4019ce:	f104 0308 	add.w	r3, r4, #8
  4019d2:	463d      	mov	r5, r7
  4019d4:	0082      	lsls	r2, r0, #2
  4019d6:	f102 2240 	add.w	r2, r2, #1073758208	; 0x40004000
  4019da:	f502 2280 	add.w	r2, r2, #262144	; 0x40000
		udd_endpoint_fifo_write(ep, *ptr_src++);
  4019de:	f813 1c08 	ldrb.w	r1, [r3, #-8]
  4019e2:	6511      	str	r1, [r2, #80]	; 0x50
		udd_endpoint_fifo_write(ep, *ptr_src++);
  4019e4:	f813 1c07 	ldrb.w	r1, [r3, #-7]
  4019e8:	6511      	str	r1, [r2, #80]	; 0x50
		udd_endpoint_fifo_write(ep, *ptr_src++);
  4019ea:	f813 1c06 	ldrb.w	r1, [r3, #-6]
  4019ee:	6511      	str	r1, [r2, #80]	; 0x50
		udd_endpoint_fifo_write(ep, *ptr_src++);
  4019f0:	f813 1c05 	ldrb.w	r1, [r3, #-5]
  4019f4:	6511      	str	r1, [r2, #80]	; 0x50
		udd_endpoint_fifo_write(ep, *ptr_src++);
  4019f6:	f813 1c04 	ldrb.w	r1, [r3, #-4]
  4019fa:	6511      	str	r1, [r2, #80]	; 0x50
		udd_endpoint_fifo_write(ep, *ptr_src++);
  4019fc:	f813 1c03 	ldrb.w	r1, [r3, #-3]
  401a00:	6511      	str	r1, [r2, #80]	; 0x50
		udd_endpoint_fifo_write(ep, *ptr_src++);
  401a02:	f813 1c02 	ldrb.w	r1, [r3, #-2]
  401a06:	6511      	str	r1, [r2, #80]	; 0x50
		udd_endpoint_fifo_write(ep, *ptr_src++);
  401a08:	f813 1c01 	ldrb.w	r1, [r3, #-1]
  401a0c:	6511      	str	r1, [r2, #80]	; 0x50
	for (; pkt_size >= 8; pkt_size -= 8) {
  401a0e:	3d08      	subs	r5, #8
  401a10:	3308      	adds	r3, #8
  401a12:	2d07      	cmp	r5, #7
  401a14:	d8e3      	bhi.n	4019de <udd_ep_in_sent+0x9e>
  401a16:	f1a7 0308 	sub.w	r3, r7, #8
  401a1a:	f023 0307 	bic.w	r3, r3, #7
  401a1e:	3308      	adds	r3, #8
  401a20:	441c      	add	r4, r3
  401a22:	f007 0707 	and.w	r7, r7, #7
	for (; pkt_size; pkt_size--) {
  401a26:	b14f      	cbz	r7, 401a3c <udd_ep_in_sent+0xfc>
  401a28:	19e3      	adds	r3, r4, r7
		udd_endpoint_fifo_write(ep, *ptr_src++);
  401a2a:	4931      	ldr	r1, [pc, #196]	; (401af0 <udd_ep_in_sent+0x1b0>)
  401a2c:	f109 0914 	add.w	r9, r9, #20
  401a30:	f814 2b01 	ldrb.w	r2, [r4], #1
  401a34:	f841 2029 	str.w	r2, [r1, r9, lsl #2]
	for (; pkt_size; pkt_size--) {
  401a38:	429c      	cmp	r4, r3
  401a3a:	d1f9      	bne.n	401a30 <udd_ep_in_sent+0xf0>
	ptr_job->bank++;
  401a3c:	eb06 0386 	add.w	r3, r6, r6, lsl #2
  401a40:	4a2a      	ldr	r2, [pc, #168]	; (401aec <udd_ep_in_sent+0x1ac>)
  401a42:	eb02 0383 	add.w	r3, r2, r3, lsl #2
  401a46:	f10c 0c01 	add.w	ip, ip, #1
  401a4a:	7c5a      	ldrb	r2, [r3, #17]
  401a4c:	f36c 0283 	bfi	r2, ip, #2, #2
  401a50:	745a      	strb	r2, [r3, #17]

	// Fill FIFO
	b_shortpacket = udd_ep_write_fifo(ep);

	// Data is ready to send
	if (b_tx) {
  401a52:	f1b8 0f00 	cmp.w	r8, #0
  401a56:	d014      	beq.n	401a82 <udd_ep_in_sent+0x142>
  401a58:	0080      	lsls	r0, r0, #2
  401a5a:	f100 2040 	add.w	r0, r0, #1073758208	; 0x40004000
  401a5e:	f500 2080 	add.w	r0, r0, #262144	; 0x40000
		udd_set_transmit_ready(ep);
  401a62:	6b03      	ldr	r3, [r0, #48]	; 0x30
  401a64:	9301      	str	r3, [sp, #4]
  401a66:	9b01      	ldr	r3, [sp, #4]
  401a68:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  401a6c:	9301      	str	r3, [sp, #4]
  401a6e:	9b01      	ldr	r3, [sp, #4]
  401a70:	f043 0310 	orr.w	r3, r3, #16
  401a74:	9301      	str	r3, [sp, #4]
  401a76:	9b01      	ldr	r3, [sp, #4]
  401a78:	6303      	str	r3, [r0, #48]	; 0x30
  401a7a:	6b03      	ldr	r3, [r0, #48]	; 0x30
  401a7c:	f013 0f10 	tst.w	r3, #16
  401a80:	d0fb      	beq.n	401a7a <udd_ep_in_sent+0x13a>
	}
	// Short PKT? no need to send it again.
	if (b_shortpacket) {
  401a82:	f1be 0f00 	cmp.w	lr, #0
  401a86:	d008      	beq.n	401a9a <udd_ep_in_sent+0x15a>
		ptr_job->b_shortpacket = false;
  401a88:	eb06 0386 	add.w	r3, r6, r6, lsl #2
  401a8c:	4a17      	ldr	r2, [pc, #92]	; (401aec <udd_ep_in_sent+0x1ac>)
  401a8e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
  401a92:	7c5a      	ldrb	r2, [r3, #17]
  401a94:	f36f 1286 	bfc	r2, #6, #1
  401a98:	745a      	strb	r2, [r3, #17]
	}
	// All transfer done, including ZLP, Finish Job
	if ((ptr_job->buf_cnt >= ptr_job->buf_size)
  401a9a:	eb06 0386 	add.w	r3, r6, r6, lsl #2
  401a9e:	4a13      	ldr	r2, [pc, #76]	; (401aec <udd_ep_in_sent+0x1ac>)
  401aa0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
  401aa4:	68da      	ldr	r2, [r3, #12]
  401aa6:	689b      	ldr	r3, [r3, #8]
  401aa8:	429a      	cmp	r2, r3
  401aaa:	d31a      	bcc.n	401ae2 <udd_ep_in_sent+0x1a2>
			&& (!ptr_job->b_shortpacket)) {
  401aac:	eb06 0386 	add.w	r3, r6, r6, lsl #2
  401ab0:	4a0e      	ldr	r2, [pc, #56]	; (401aec <udd_ep_in_sent+0x1ac>)
  401ab2:	eb02 0383 	add.w	r3, r2, r3, lsl #2
  401ab6:	7c5b      	ldrb	r3, [r3, #17]
  401ab8:	f013 0f40 	tst.w	r3, #64	; 0x40
  401abc:	d113      	bne.n	401ae6 <udd_ep_in_sent+0x1a6>
		ptr_job->b_buf_end = true;
  401abe:	eb06 0686 	add.w	r6, r6, r6, lsl #2
  401ac2:	eb02 0686 	add.w	r6, r2, r6, lsl #2
  401ac6:	7c73      	ldrb	r3, [r6, #17]
  401ac8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  401acc:	7473      	strb	r3, [r6, #17]
		return false;
  401ace:	2000      	movs	r0, #0
  401ad0:	e002      	b.n	401ad8 <udd_ep_in_sent+0x198>
	if (ptr_job->bank >= udd_get_endpoint_bank_max_nbr(ep)) {
  401ad2:	2301      	movs	r3, #1
  401ad4:	e74a      	b.n	40196c <udd_ep_in_sent+0x2c>
		return true; // Data pending
  401ad6:	2001      	movs	r0, #1
	}
	return true; // Pending
}
  401ad8:	b003      	add	sp, #12
  401ada:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		return false;
  401ade:	2000      	movs	r0, #0
  401ae0:	e7fa      	b.n	401ad8 <udd_ep_in_sent+0x198>
	return true; // Pending
  401ae2:	2001      	movs	r0, #1
  401ae4:	e7f8      	b.n	401ad8 <udd_ep_in_sent+0x198>
  401ae6:	2001      	movs	r0, #1
  401ae8:	e7f6      	b.n	401ad8 <udd_ep_in_sent+0x198>
  401aea:	bf00      	nop
  401aec:	20000b48 	.word	0x20000b48
  401af0:	40044000 	.word	0x40044000

00401af4 <UDP_Handler>:
{
  401af4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  401af8:	b09b      	sub	sp, #108	; 0x6c
	if (!pmc_is_wakeup_clocks_restored() && !Is_udd_suspend()) {
  401afa:	4b87      	ldr	r3, [pc, #540]	; (401d18 <UDP_Handler+0x224>)
  401afc:	4798      	blx	r3
  401afe:	b920      	cbnz	r0, 401b0a <UDP_Handler+0x16>
  401b00:	4b86      	ldr	r3, [pc, #536]	; (401d1c <UDP_Handler+0x228>)
  401b02:	69db      	ldr	r3, [r3, #28]
  401b04:	f413 7f80 	tst.w	r3, #256	; 0x100
  401b08:	d03b      	beq.n	401b82 <UDP_Handler+0x8e>
	udd_enable_periph_ck();
  401b0a:	2030      	movs	r0, #48	; 0x30
  401b0c:	4b84      	ldr	r3, [pc, #528]	; (401d20 <UDP_Handler+0x22c>)
  401b0e:	4798      	blx	r3
	if (Is_udd_sof_interrupt_enabled() && Is_udd_sof()) {
  401b10:	4b82      	ldr	r3, [pc, #520]	; (401d1c <UDP_Handler+0x228>)
  401b12:	699b      	ldr	r3, [r3, #24]
  401b14:	f413 6f00 	tst.w	r3, #2048	; 0x800
  401b18:	d004      	beq.n	401b24 <UDP_Handler+0x30>
  401b1a:	4b80      	ldr	r3, [pc, #512]	; (401d1c <UDP_Handler+0x228>)
  401b1c:	69db      	ldr	r3, [r3, #28]
  401b1e:	f413 6f00 	tst.w	r3, #2048	; 0x800
  401b22:	d137      	bne.n	401b94 <UDP_Handler+0xa0>
	if (!Is_udd_endpoint_interrupt(0))
  401b24:	4b7d      	ldr	r3, [pc, #500]	; (401d1c <UDP_Handler+0x228>)
  401b26:	69db      	ldr	r3, [r3, #28]
  401b28:	f013 0f01 	tst.w	r3, #1
  401b2c:	f000 81ba 	beq.w	401ea4 <UDP_Handler+0x3b0>
	if (Is_udd_setup_received(0)) {
  401b30:	4b7a      	ldr	r3, [pc, #488]	; (401d1c <UDP_Handler+0x228>)
  401b32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  401b34:	f013 0f04 	tst.w	r3, #4
  401b38:	d135      	bne.n	401ba6 <UDP_Handler+0xb2>
	if (Is_udd_in_sent(0)) {
  401b3a:	4b78      	ldr	r3, [pc, #480]	; (401d1c <UDP_Handler+0x228>)
  401b3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  401b3e:	f013 0f01 	tst.w	r3, #1
  401b42:	f040 80c5 	bne.w	401cd0 <UDP_Handler+0x1dc>
	if (Is_udd_bank0_received(0)) {
  401b46:	4b75      	ldr	r3, [pc, #468]	; (401d1c <UDP_Handler+0x228>)
  401b48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  401b4a:	f013 0f02 	tst.w	r3, #2
  401b4e:	f040 80c2 	bne.w	401cd6 <UDP_Handler+0x1e2>
	if (Is_udd_stall(0)) {
  401b52:	4b72      	ldr	r3, [pc, #456]	; (401d1c <UDP_Handler+0x228>)
  401b54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  401b56:	f013 0f08 	tst.w	r3, #8
  401b5a:	f000 81a3 	beq.w	401ea4 <UDP_Handler+0x3b0>
		udd_ack_stall(0);
  401b5e:	4a6f      	ldr	r2, [pc, #444]	; (401d1c <UDP_Handler+0x228>)
  401b60:	6b13      	ldr	r3, [r2, #48]	; 0x30
  401b62:	9300      	str	r3, [sp, #0]
  401b64:	9b00      	ldr	r3, [sp, #0]
  401b66:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  401b6a:	9300      	str	r3, [sp, #0]
  401b6c:	9b00      	ldr	r3, [sp, #0]
  401b6e:	f023 0308 	bic.w	r3, r3, #8
  401b72:	9300      	str	r3, [sp, #0]
  401b74:	9b00      	ldr	r3, [sp, #0]
  401b76:	6313      	str	r3, [r2, #48]	; 0x30
  401b78:	6b13      	ldr	r3, [r2, #48]	; 0x30
  401b7a:	f013 0f08 	tst.w	r3, #8
  401b7e:	d1fb      	bne.n	401b78 <UDP_Handler+0x84>
  401b80:	e005      	b.n	401b8e <UDP_Handler+0x9a>
  __ASM volatile ("cpsid i" : : : "memory");
  401b82:	b672      	cpsid	i
  401b84:	f3bf 8f5f 	dmb	sy
		cpu_irq_disable();
  401b88:	2200      	movs	r2, #0
  401b8a:	4b66      	ldr	r3, [pc, #408]	; (401d24 <UDP_Handler+0x230>)
  401b8c:	701a      	strb	r2, [r3, #0]
}
  401b8e:	b01b      	add	sp, #108	; 0x6c
  401b90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		udd_ack_sof();
  401b94:	f44f 6200 	mov.w	r2, #2048	; 0x800
  401b98:	4b60      	ldr	r3, [pc, #384]	; (401d1c <UDP_Handler+0x228>)
  401b9a:	621a      	str	r2, [r3, #32]
		udc_sof_notify();
  401b9c:	4b62      	ldr	r3, [pc, #392]	; (401d28 <UDP_Handler+0x234>)
  401b9e:	4798      	blx	r3
		UDC_SOF_EVENT();
  401ba0:	4b62      	ldr	r3, [pc, #392]	; (401d2c <UDP_Handler+0x238>)
  401ba2:	4798      	blx	r3
		goto udd_interrupt_sof_end;
  401ba4:	e7f3      	b.n	401b8e <UDP_Handler+0x9a>
	if (UDD_EPCTRL_SETUP != udd_ep_control_state) {
  401ba6:	4b62      	ldr	r3, [pc, #392]	; (401d30 <UDP_Handler+0x23c>)
  401ba8:	781b      	ldrb	r3, [r3, #0]
  401baa:	b9cb      	cbnz	r3, 401be0 <UDP_Handler+0xec>
	if (8 != udd_byte_count(0)) {
  401bac:	4b5b      	ldr	r3, [pc, #364]	; (401d1c <UDP_Handler+0x228>)
  401bae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  401bb0:	f3c3 430a 	ubfx	r3, r3, #16, #11
  401bb4:	2b08      	cmp	r3, #8
  401bb6:	d018      	beq.n	401bea <UDP_Handler+0xf6>
		udd_ack_setup_received(0);
  401bb8:	4a58      	ldr	r2, [pc, #352]	; (401d1c <UDP_Handler+0x228>)
  401bba:	6b13      	ldr	r3, [r2, #48]	; 0x30
  401bbc:	9301      	str	r3, [sp, #4]
  401bbe:	9b01      	ldr	r3, [sp, #4]
  401bc0:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  401bc4:	9301      	str	r3, [sp, #4]
  401bc6:	9b01      	ldr	r3, [sp, #4]
  401bc8:	f023 0304 	bic.w	r3, r3, #4
  401bcc:	9301      	str	r3, [sp, #4]
  401bce:	9b01      	ldr	r3, [sp, #4]
  401bd0:	6313      	str	r3, [r2, #48]	; 0x30
  401bd2:	6b13      	ldr	r3, [r2, #48]	; 0x30
  401bd4:	f013 0f04 	tst.w	r3, #4
  401bd8:	d1fb      	bne.n	401bd2 <UDP_Handler+0xde>
		udd_ctrl_stall_data();
  401bda:	4b56      	ldr	r3, [pc, #344]	; (401d34 <UDP_Handler+0x240>)
  401bdc:	4798      	blx	r3
  401bde:	e7d6      	b.n	401b8e <UDP_Handler+0x9a>
		udd_ctrl_endofrequest();
  401be0:	4b55      	ldr	r3, [pc, #340]	; (401d38 <UDP_Handler+0x244>)
  401be2:	4798      	blx	r3
		udd_ctrl_init();
  401be4:	4b55      	ldr	r3, [pc, #340]	; (401d3c <UDP_Handler+0x248>)
  401be6:	4798      	blx	r3
  401be8:	e7e0      	b.n	401bac <UDP_Handler+0xb8>
  401bea:	4b55      	ldr	r3, [pc, #340]	; (401d40 <UDP_Handler+0x24c>)
  401bec:	f103 0008 	add.w	r0, r3, #8
			udd_endpoint_fifo_read(0);
  401bf0:	494a      	ldr	r1, [pc, #296]	; (401d1c <UDP_Handler+0x228>)
  401bf2:	6d0a      	ldr	r2, [r1, #80]	; 0x50
		((uint8_t *) & udd_g_ctrlreq.req)[i] =
  401bf4:	f803 2f01 	strb.w	r2, [r3, #1]!
	for (i = 0; i < 8; i++) {
  401bf8:	4283      	cmp	r3, r0
  401bfa:	d1fa      	bne.n	401bf2 <UDP_Handler+0xfe>
	if (udc_process_setup() == false) {
  401bfc:	4b51      	ldr	r3, [pc, #324]	; (401d44 <UDP_Handler+0x250>)
  401bfe:	4798      	blx	r3
  401c00:	b998      	cbnz	r0, 401c2a <UDP_Handler+0x136>
		udd_ack_setup_received(0);
  401c02:	4a46      	ldr	r2, [pc, #280]	; (401d1c <UDP_Handler+0x228>)
  401c04:	6b13      	ldr	r3, [r2, #48]	; 0x30
  401c06:	9302      	str	r3, [sp, #8]
  401c08:	9b02      	ldr	r3, [sp, #8]
  401c0a:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  401c0e:	9302      	str	r3, [sp, #8]
  401c10:	9b02      	ldr	r3, [sp, #8]
  401c12:	f023 0304 	bic.w	r3, r3, #4
  401c16:	9302      	str	r3, [sp, #8]
  401c18:	9b02      	ldr	r3, [sp, #8]
  401c1a:	6313      	str	r3, [r2, #48]	; 0x30
  401c1c:	6b13      	ldr	r3, [r2, #48]	; 0x30
  401c1e:	f013 0f04 	tst.w	r3, #4
  401c22:	d1fb      	bne.n	401c1c <UDP_Handler+0x128>
		udd_ctrl_stall_data();
  401c24:	4b43      	ldr	r3, [pc, #268]	; (401d34 <UDP_Handler+0x240>)
  401c26:	4798      	blx	r3
  401c28:	e7b1      	b.n	401b8e <UDP_Handler+0x9a>
	if (Udd_setup_is_in()) {
  401c2a:	4b47      	ldr	r3, [pc, #284]	; (401d48 <UDP_Handler+0x254>)
  401c2c:	f993 3000 	ldrsb.w	r3, [r3]
  401c30:	2b00      	cmp	r3, #0
  401c32:	db1d      	blt.n	401c70 <UDP_Handler+0x17c>
		udd_ack_setup_received(0);
  401c34:	4a39      	ldr	r2, [pc, #228]	; (401d1c <UDP_Handler+0x228>)
  401c36:	6b13      	ldr	r3, [r2, #48]	; 0x30
  401c38:	9305      	str	r3, [sp, #20]
  401c3a:	9b05      	ldr	r3, [sp, #20]
  401c3c:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  401c40:	9305      	str	r3, [sp, #20]
  401c42:	9b05      	ldr	r3, [sp, #20]
  401c44:	f023 0304 	bic.w	r3, r3, #4
  401c48:	9305      	str	r3, [sp, #20]
  401c4a:	9b05      	ldr	r3, [sp, #20]
  401c4c:	6313      	str	r3, [r2, #48]	; 0x30
  401c4e:	6b13      	ldr	r3, [r2, #48]	; 0x30
  401c50:	f013 0f04 	tst.w	r3, #4
  401c54:	d1fb      	bne.n	401c4e <UDP_Handler+0x15a>
		if (0 == udd_g_ctrlreq.req.wLength) {
  401c56:	4b3c      	ldr	r3, [pc, #240]	; (401d48 <UDP_Handler+0x254>)
  401c58:	88db      	ldrh	r3, [r3, #6]
  401c5a:	2b00      	cmp	r3, #0
  401c5c:	d035      	beq.n	401cca <UDP_Handler+0x1d6>
		udd_ctrl_prev_payload_nb_trans = 0;
  401c5e:	2300      	movs	r3, #0
  401c60:	4a3a      	ldr	r2, [pc, #232]	; (401d4c <UDP_Handler+0x258>)
  401c62:	8013      	strh	r3, [r2, #0]
		udd_ctrl_payload_nb_trans = 0;
  401c64:	4a3a      	ldr	r2, [pc, #232]	; (401d50 <UDP_Handler+0x25c>)
  401c66:	8013      	strh	r3, [r2, #0]
		udd_ep_control_state = UDD_EPCTRL_DATA_OUT;
  401c68:	2201      	movs	r2, #1
  401c6a:	4b31      	ldr	r3, [pc, #196]	; (401d30 <UDP_Handler+0x23c>)
  401c6c:	701a      	strb	r2, [r3, #0]
  401c6e:	e78e      	b.n	401b8e <UDP_Handler+0x9a>
		udd_set_endpoint_direction_in(0);
  401c70:	4a2a      	ldr	r2, [pc, #168]	; (401d1c <UDP_Handler+0x228>)
  401c72:	6b13      	ldr	r3, [r2, #48]	; 0x30
  401c74:	9303      	str	r3, [sp, #12]
  401c76:	9b03      	ldr	r3, [sp, #12]
  401c78:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  401c7c:	9303      	str	r3, [sp, #12]
  401c7e:	9b03      	ldr	r3, [sp, #12]
  401c80:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  401c84:	9303      	str	r3, [sp, #12]
  401c86:	9b03      	ldr	r3, [sp, #12]
  401c88:	6313      	str	r3, [r2, #48]	; 0x30
  401c8a:	6b13      	ldr	r3, [r2, #48]	; 0x30
  401c8c:	f013 0f80 	tst.w	r3, #128	; 0x80
  401c90:	d0fb      	beq.n	401c8a <UDP_Handler+0x196>
		udd_ack_setup_received(0);
  401c92:	4a22      	ldr	r2, [pc, #136]	; (401d1c <UDP_Handler+0x228>)
  401c94:	6b13      	ldr	r3, [r2, #48]	; 0x30
  401c96:	9304      	str	r3, [sp, #16]
  401c98:	9b04      	ldr	r3, [sp, #16]
  401c9a:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  401c9e:	9304      	str	r3, [sp, #16]
  401ca0:	9b04      	ldr	r3, [sp, #16]
  401ca2:	f023 0304 	bic.w	r3, r3, #4
  401ca6:	9304      	str	r3, [sp, #16]
  401ca8:	9b04      	ldr	r3, [sp, #16]
  401caa:	6313      	str	r3, [r2, #48]	; 0x30
  401cac:	6b13      	ldr	r3, [r2, #48]	; 0x30
  401cae:	f013 0f04 	tst.w	r3, #4
  401cb2:	d1fb      	bne.n	401cac <UDP_Handler+0x1b8>
		udd_ctrl_prev_payload_nb_trans = 0;
  401cb4:	2300      	movs	r3, #0
  401cb6:	4a25      	ldr	r2, [pc, #148]	; (401d4c <UDP_Handler+0x258>)
  401cb8:	8013      	strh	r3, [r2, #0]
		udd_ctrl_payload_nb_trans = 0;
  401cba:	4a25      	ldr	r2, [pc, #148]	; (401d50 <UDP_Handler+0x25c>)
  401cbc:	8013      	strh	r3, [r2, #0]
		udd_ep_control_state = UDD_EPCTRL_DATA_IN;
  401cbe:	2202      	movs	r2, #2
  401cc0:	4b1b      	ldr	r3, [pc, #108]	; (401d30 <UDP_Handler+0x23c>)
  401cc2:	701a      	strb	r2, [r3, #0]
		udd_ctrl_in_sent(); // Send first data transfer
  401cc4:	4b23      	ldr	r3, [pc, #140]	; (401d54 <UDP_Handler+0x260>)
  401cc6:	4798      	blx	r3
  401cc8:	e761      	b.n	401b8e <UDP_Handler+0x9a>
			udd_ctrl_send_zlp_in();
  401cca:	4b23      	ldr	r3, [pc, #140]	; (401d58 <UDP_Handler+0x264>)
  401ccc:	4798      	blx	r3
  401cce:	e75e      	b.n	401b8e <UDP_Handler+0x9a>
		udd_ctrl_in_sent();
  401cd0:	4b20      	ldr	r3, [pc, #128]	; (401d54 <UDP_Handler+0x260>)
  401cd2:	4798      	blx	r3
  401cd4:	e75b      	b.n	401b8e <UDP_Handler+0x9a>
	if (UDD_EPCTRL_DATA_OUT != udd_ep_control_state) {
  401cd6:	4b16      	ldr	r3, [pc, #88]	; (401d30 <UDP_Handler+0x23c>)
  401cd8:	781b      	ldrb	r3, [r3, #0]
  401cda:	2b01      	cmp	r3, #1
  401cdc:	d03e      	beq.n	401d5c <UDP_Handler+0x268>
		if ((UDD_EPCTRL_DATA_IN == udd_ep_control_state)
  401cde:	2b02      	cmp	r3, #2
  401ce0:	d004      	beq.n	401cec <UDP_Handler+0x1f8>
				|| (UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP ==
  401ce2:	2b04      	cmp	r3, #4
  401ce4:	d002      	beq.n	401cec <UDP_Handler+0x1f8>
			udd_ctrl_stall_data();
  401ce6:	4b13      	ldr	r3, [pc, #76]	; (401d34 <UDP_Handler+0x240>)
  401ce8:	4798      	blx	r3
  401cea:	e001      	b.n	401cf0 <UDP_Handler+0x1fc>
			udd_ctrl_endofrequest();
  401cec:	4b12      	ldr	r3, [pc, #72]	; (401d38 <UDP_Handler+0x244>)
  401cee:	4798      	blx	r3
		udd_ack_bank0_received(0);
  401cf0:	4a0a      	ldr	r2, [pc, #40]	; (401d1c <UDP_Handler+0x228>)
  401cf2:	6b13      	ldr	r3, [r2, #48]	; 0x30
  401cf4:	9306      	str	r3, [sp, #24]
  401cf6:	9b06      	ldr	r3, [sp, #24]
  401cf8:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  401cfc:	9306      	str	r3, [sp, #24]
  401cfe:	9b06      	ldr	r3, [sp, #24]
  401d00:	f023 0302 	bic.w	r3, r3, #2
  401d04:	9306      	str	r3, [sp, #24]
  401d06:	9b06      	ldr	r3, [sp, #24]
  401d08:	6313      	str	r3, [r2, #48]	; 0x30
  401d0a:	6b13      	ldr	r3, [r2, #48]	; 0x30
  401d0c:	f013 0f02 	tst.w	r3, #2
  401d10:	d1fb      	bne.n	401d0a <UDP_Handler+0x216>
		udd_ctrl_init();
  401d12:	4b0a      	ldr	r3, [pc, #40]	; (401d3c <UDP_Handler+0x248>)
  401d14:	4798      	blx	r3
  401d16:	e73a      	b.n	401b8e <UDP_Handler+0x9a>
  401d18:	004015cd 	.word	0x004015cd
  401d1c:	40044000 	.word	0x40044000
  401d20:	004014f1 	.word	0x004014f1
  401d24:	20000520 	.word	0x20000520
  401d28:	00400f41 	.word	0x00400f41
  401d2c:	00402e1d 	.word	0x00402e1d
  401d30:	20000b44 	.word	0x20000b44
  401d34:	004015f5 	.word	0x004015f5
  401d38:	00401665 	.word	0x00401665
  401d3c:	004015dd 	.word	0x004015dd
  401d40:	20000bf3 	.word	0x20000bf3
  401d44:	00400f81 	.word	0x00400f81
  401d48:	20000bf4 	.word	0x20000bf4
  401d4c:	20000b42 	.word	0x20000b42
  401d50:	20000b40 	.word	0x20000b40
  401d54:	00401675 	.word	0x00401675
  401d58:	0040162d 	.word	0x0040162d
	nb_data = udd_byte_count(0);
  401d5c:	4b93      	ldr	r3, [pc, #588]	; (401fac <UDP_Handler+0x4b8>)
  401d5e:	6b19      	ldr	r1, [r3, #48]	; 0x30
  401d60:	f3c1 410a 	ubfx	r1, r1, #16, #11
	if (udd_g_ctrlreq.payload_size < (udd_ctrl_payload_nb_trans + nb_data)) {
  401d64:	4b92      	ldr	r3, [pc, #584]	; (401fb0 <UDP_Handler+0x4bc>)
  401d66:	899b      	ldrh	r3, [r3, #12]
  401d68:	4a92      	ldr	r2, [pc, #584]	; (401fb4 <UDP_Handler+0x4c0>)
  401d6a:	8815      	ldrh	r5, [r2, #0]
  401d6c:	186a      	adds	r2, r5, r1
  401d6e:	4293      	cmp	r3, r2
		nb_data = udd_g_ctrlreq.payload_size -
  401d70:	bfbc      	itt	lt
  401d72:	1b5b      	sublt	r3, r3, r5
  401d74:	b299      	uxthlt	r1, r3
	uint8_t *ptr_dest = udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans;
  401d76:	4b8e      	ldr	r3, [pc, #568]	; (401fb0 <UDP_Handler+0x4bc>)
  401d78:	6898      	ldr	r0, [r3, #8]
  401d7a:	4428      	add	r0, r5
	for (i = 0; i < nb_data; i++) {
  401d7c:	b171      	cbz	r1, 401d9c <UDP_Handler+0x2a8>
  401d7e:	4602      	mov	r2, r0
		*ptr_dest++ = udd_endpoint_fifo_read(0);
  401d80:	4c8a      	ldr	r4, [pc, #552]	; (401fac <UDP_Handler+0x4b8>)
  401d82:	6d23      	ldr	r3, [r4, #80]	; 0x50
  401d84:	f802 3b01 	strb.w	r3, [r2], #1
	for (i = 0; i < nb_data; i++) {
  401d88:	1a13      	subs	r3, r2, r0
  401d8a:	b2db      	uxtb	r3, r3
  401d8c:	428b      	cmp	r3, r1
  401d8e:	d3f8      	bcc.n	401d82 <UDP_Handler+0x28e>
	udd_ctrl_payload_nb_trans += nb_data;
  401d90:	440d      	add	r5, r1
  401d92:	b2ad      	uxth	r5, r5
  401d94:	4b87      	ldr	r3, [pc, #540]	; (401fb4 <UDP_Handler+0x4c0>)
  401d96:	801d      	strh	r5, [r3, #0]
	if ((USB_DEVICE_EP_CTRL_SIZE != nb_data)
  401d98:	2940      	cmp	r1, #64	; 0x40
  401d9a:	d01a      	beq.n	401dd2 <UDP_Handler+0x2de>
		udd_g_ctrlreq.payload_size = udd_ctrl_payload_nb_trans;
  401d9c:	4b84      	ldr	r3, [pc, #528]	; (401fb0 <UDP_Handler+0x4bc>)
  401d9e:	819d      	strh	r5, [r3, #12]
		if (NULL != udd_g_ctrlreq.over_under_run) {
  401da0:	695b      	ldr	r3, [r3, #20]
  401da2:	b113      	cbz	r3, 401daa <UDP_Handler+0x2b6>
			if (!udd_g_ctrlreq.over_under_run()) {
  401da4:	4798      	blx	r3
  401da6:	2800      	cmp	r0, #0
  401da8:	d030      	beq.n	401e0c <UDP_Handler+0x318>
		udd_ack_bank0_received(0);
  401daa:	4a80      	ldr	r2, [pc, #512]	; (401fac <UDP_Handler+0x4b8>)
  401dac:	6b13      	ldr	r3, [r2, #48]	; 0x30
  401dae:	9308      	str	r3, [sp, #32]
  401db0:	9b08      	ldr	r3, [sp, #32]
  401db2:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  401db6:	9308      	str	r3, [sp, #32]
  401db8:	9b08      	ldr	r3, [sp, #32]
  401dba:	f023 0302 	bic.w	r3, r3, #2
  401dbe:	9308      	str	r3, [sp, #32]
  401dc0:	9b08      	ldr	r3, [sp, #32]
  401dc2:	6313      	str	r3, [r2, #48]	; 0x30
  401dc4:	6b13      	ldr	r3, [r2, #48]	; 0x30
  401dc6:	f013 0f02 	tst.w	r3, #2
  401dca:	d1fb      	bne.n	401dc4 <UDP_Handler+0x2d0>
		udd_ctrl_send_zlp_in();
  401dcc:	4b7a      	ldr	r3, [pc, #488]	; (401fb8 <UDP_Handler+0x4c4>)
  401dce:	4798      	blx	r3
  401dd0:	e6dd      	b.n	401b8e <UDP_Handler+0x9a>
			|| (udd_g_ctrlreq.req.wLength <=
  401dd2:	4b77      	ldr	r3, [pc, #476]	; (401fb0 <UDP_Handler+0x4bc>)
  401dd4:	88da      	ldrh	r2, [r3, #6]
			(udd_ctrl_prev_payload_nb_trans +
  401dd6:	4b79      	ldr	r3, [pc, #484]	; (401fbc <UDP_Handler+0x4c8>)
  401dd8:	881b      	ldrh	r3, [r3, #0]
  401dda:	442b      	add	r3, r5
			|| (udd_g_ctrlreq.req.wLength <=
  401ddc:	429a      	cmp	r2, r3
  401dde:	dddd      	ble.n	401d9c <UDP_Handler+0x2a8>
	if (udd_g_ctrlreq.payload_size == udd_ctrl_payload_nb_trans) {
  401de0:	4b73      	ldr	r3, [pc, #460]	; (401fb0 <UDP_Handler+0x4bc>)
  401de2:	899b      	ldrh	r3, [r3, #12]
  401de4:	42ab      	cmp	r3, r5
  401de6:	d025      	beq.n	401e34 <UDP_Handler+0x340>
	udd_ack_bank0_received(0);
  401de8:	4a70      	ldr	r2, [pc, #448]	; (401fac <UDP_Handler+0x4b8>)
  401dea:	6b13      	ldr	r3, [r2, #48]	; 0x30
  401dec:	930b      	str	r3, [sp, #44]	; 0x2c
  401dee:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  401df0:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  401df4:	930b      	str	r3, [sp, #44]	; 0x2c
  401df6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  401df8:	f023 0302 	bic.w	r3, r3, #2
  401dfc:	930b      	str	r3, [sp, #44]	; 0x2c
  401dfe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  401e00:	6313      	str	r3, [r2, #48]	; 0x30
  401e02:	6b13      	ldr	r3, [r2, #48]	; 0x30
  401e04:	f013 0f02 	tst.w	r3, #2
  401e08:	d1fb      	bne.n	401e02 <UDP_Handler+0x30e>
  401e0a:	e6c0      	b.n	401b8e <UDP_Handler+0x9a>
				udd_ctrl_stall_data();
  401e0c:	4b6c      	ldr	r3, [pc, #432]	; (401fc0 <UDP_Handler+0x4cc>)
  401e0e:	4798      	blx	r3
				udd_ack_bank0_received(0);
  401e10:	4a66      	ldr	r2, [pc, #408]	; (401fac <UDP_Handler+0x4b8>)
  401e12:	6b13      	ldr	r3, [r2, #48]	; 0x30
  401e14:	9307      	str	r3, [sp, #28]
  401e16:	9b07      	ldr	r3, [sp, #28]
  401e18:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  401e1c:	9307      	str	r3, [sp, #28]
  401e1e:	9b07      	ldr	r3, [sp, #28]
  401e20:	f023 0302 	bic.w	r3, r3, #2
  401e24:	9307      	str	r3, [sp, #28]
  401e26:	9b07      	ldr	r3, [sp, #28]
  401e28:	6313      	str	r3, [r2, #48]	; 0x30
  401e2a:	6b13      	ldr	r3, [r2, #48]	; 0x30
  401e2c:	f013 0f02 	tst.w	r3, #2
  401e30:	d1fb      	bne.n	401e2a <UDP_Handler+0x336>
  401e32:	e6ac      	b.n	401b8e <UDP_Handler+0x9a>
		if (!udd_g_ctrlreq.over_under_run) {
  401e34:	4b5e      	ldr	r3, [pc, #376]	; (401fb0 <UDP_Handler+0x4bc>)
  401e36:	695b      	ldr	r3, [r3, #20]
  401e38:	b153      	cbz	r3, 401e50 <UDP_Handler+0x35c>
		if (!udd_g_ctrlreq.over_under_run()) {
  401e3a:	4798      	blx	r3
  401e3c:	b1e8      	cbz	r0, 401e7a <UDP_Handler+0x386>
		udd_ctrl_prev_payload_nb_trans += udd_ctrl_payload_nb_trans;
  401e3e:	495f      	ldr	r1, [pc, #380]	; (401fbc <UDP_Handler+0x4c8>)
  401e40:	4a5c      	ldr	r2, [pc, #368]	; (401fb4 <UDP_Handler+0x4c0>)
  401e42:	880b      	ldrh	r3, [r1, #0]
  401e44:	8810      	ldrh	r0, [r2, #0]
  401e46:	4403      	add	r3, r0
  401e48:	800b      	strh	r3, [r1, #0]
		udd_ctrl_payload_nb_trans = 0;
  401e4a:	2300      	movs	r3, #0
  401e4c:	8013      	strh	r3, [r2, #0]
  401e4e:	e7cb      	b.n	401de8 <UDP_Handler+0x2f4>
			udd_ctrl_stall_data();
  401e50:	4b5b      	ldr	r3, [pc, #364]	; (401fc0 <UDP_Handler+0x4cc>)
  401e52:	4798      	blx	r3
			udd_ack_bank0_received(0);
  401e54:	4a55      	ldr	r2, [pc, #340]	; (401fac <UDP_Handler+0x4b8>)
  401e56:	6b13      	ldr	r3, [r2, #48]	; 0x30
  401e58:	9309      	str	r3, [sp, #36]	; 0x24
  401e5a:	9b09      	ldr	r3, [sp, #36]	; 0x24
  401e5c:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  401e60:	9309      	str	r3, [sp, #36]	; 0x24
  401e62:	9b09      	ldr	r3, [sp, #36]	; 0x24
  401e64:	f023 0302 	bic.w	r3, r3, #2
  401e68:	9309      	str	r3, [sp, #36]	; 0x24
  401e6a:	9b09      	ldr	r3, [sp, #36]	; 0x24
  401e6c:	6313      	str	r3, [r2, #48]	; 0x30
  401e6e:	4613      	mov	r3, r2
  401e70:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  401e72:	f012 0f02 	tst.w	r2, #2
  401e76:	d1fb      	bne.n	401e70 <UDP_Handler+0x37c>
  401e78:	e689      	b.n	401b8e <UDP_Handler+0x9a>
			udd_ctrl_stall_data();
  401e7a:	4b51      	ldr	r3, [pc, #324]	; (401fc0 <UDP_Handler+0x4cc>)
  401e7c:	4798      	blx	r3
			udd_ack_bank0_received(0);
  401e7e:	4a4b      	ldr	r2, [pc, #300]	; (401fac <UDP_Handler+0x4b8>)
  401e80:	6b13      	ldr	r3, [r2, #48]	; 0x30
  401e82:	930a      	str	r3, [sp, #40]	; 0x28
  401e84:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  401e86:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  401e8a:	930a      	str	r3, [sp, #40]	; 0x28
  401e8c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  401e8e:	f023 0302 	bic.w	r3, r3, #2
  401e92:	930a      	str	r3, [sp, #40]	; 0x28
  401e94:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  401e96:	6313      	str	r3, [r2, #48]	; 0x30
  401e98:	4613      	mov	r3, r2
  401e9a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  401e9c:	f012 0f02 	tst.w	r2, #2
  401ea0:	d1fb      	bne.n	401e9a <UDP_Handler+0x3a6>
  401ea2:	e674      	b.n	401b8e <UDP_Handler+0x9a>
  401ea4:	4a47      	ldr	r2, [pc, #284]	; (401fc4 <UDP_Handler+0x4d0>)
	for (i = 0; i < nb_data; i++) {
  401ea6:	2301      	movs	r3, #1
	udd_ep_job_t *ptr_job;

	// For each endpoint different of control endpoint (0)
	for (ep = 1; ep <= USB_DEVICE_MAX_EP; ep++) {
		// Check RXRDY and TXEMPTY event for none DMA endpoints
		if (!Is_udd_endpoint_interrupt_enabled(ep)) {
  401ea8:	f8df e100 	ldr.w	lr, [pc, #256]	; 401fac <UDP_Handler+0x4b8>
  401eac:	4618      	mov	r0, r3
  401eae:	e17f      	b.n	4021b0 <UDP_Handler+0x6bc>
	uint32_t pkt_size = ptr_job->size;
  401eb0:	eb07 0287 	add.w	r2, r7, r7, lsl #2
  401eb4:	4b43      	ldr	r3, [pc, #268]	; (401fc4 <UDP_Handler+0x4d0>)
  401eb6:	eb03 0382 	add.w	r3, r3, r2, lsl #2
  401eba:	f8b3 a010 	ldrh.w	sl, [r3, #16]
  401ebe:	f3ca 0a09 	ubfx	sl, sl, #0, #10
	nb_data = udd_byte_count(ep);
  401ec2:	6b23      	ldr	r3, [r4, #48]	; 0x30
  401ec4:	f3c3 490a 	ubfx	r9, r3, #16, #11
	if (nb_data > 0) {
  401ec8:	f1b9 0f00 	cmp.w	r9, #0
  401ecc:	f000 81e3 	beq.w	402296 <UDP_Handler+0x7a2>
	uint32_t nb_remain = ptr_job->buf_size - ptr_job->buf_cnt;
  401ed0:	4b3c      	ldr	r3, [pc, #240]	; (401fc4 <UDP_Handler+0x4d0>)
  401ed2:	eb03 0382 	add.w	r3, r3, r2, lsl #2
  401ed6:	f8d3 e008 	ldr.w	lr, [r3, #8]
  401eda:	68da      	ldr	r2, [r3, #12]
  401edc:	ebae 0002 	sub.w	r0, lr, r2
	uint8_t *ptr_dst = &ptr_job->buf[ptr_job->buf_cnt];
  401ee0:	6859      	ldr	r1, [r3, #4]
		if (nb_data >= nb_remain) {
  401ee2:	4548      	cmp	r0, r9
  401ee4:	f240 81cb 	bls.w	40227e <UDP_Handler+0x78a>
		ptr_job->buf_cnt += nb_data;
  401ee8:	eb07 0087 	add.w	r0, r7, r7, lsl #2
  401eec:	4b35      	ldr	r3, [pc, #212]	; (401fc4 <UDP_Handler+0x4d0>)
  401eee:	eb03 0380 	add.w	r3, r3, r0, lsl #2
  401ef2:	eb02 0009 	add.w	r0, r2, r9
  401ef6:	60d8      	str	r0, [r3, #12]
	nb_data = udd_byte_count(ep);
  401ef8:	4648      	mov	r0, r9
	bool b_full = false, b_short;
  401efa:	f04f 0b00 	mov.w	fp, #0
	uint8_t *ptr_dst = &ptr_job->buf[ptr_job->buf_cnt];
  401efe:	4411      	add	r1, r2
  401f00:	460b      	mov	r3, r1
			*ptr_dst++ = udd_endpoint_fifo_read(ep);
  401f02:	6d22      	ldr	r2, [r4, #80]	; 0x50
  401f04:	f803 2b01 	strb.w	r2, [r3], #1
		for (i = 0; i < nb_data; i++) {
  401f08:	1a5a      	subs	r2, r3, r1
  401f0a:	4282      	cmp	r2, r0
  401f0c:	d3f9      	bcc.n	401f02 <UDP_Handler+0x40e>
	udd_ep_ack_out_received(ep);
  401f0e:	4630      	mov	r0, r6
  401f10:	4b2d      	ldr	r3, [pc, #180]	; (401fc8 <UDP_Handler+0x4d4>)
  401f12:	4798      	blx	r3
	if ((b_full || b_short) &&
  401f14:	f1bb 0f00 	cmp.w	fp, #0
  401f18:	f000 81c0 	beq.w	40229c <UDP_Handler+0x7a8>
			!Is_udd_endpoint_stall_requested(ep)) {
  401f1c:	6b23      	ldr	r3, [r4, #48]	; 0x30
	if ((b_full || b_short) &&
  401f1e:	f013 0f20 	tst.w	r3, #32
  401f22:	f47f ae34 	bne.w	401b8e <UDP_Handler+0x9a>
		udd_disable_endpoint_interrupt(ep);
  401f26:	4b21      	ldr	r3, [pc, #132]	; (401fac <UDP_Handler+0x4b8>)
  401f28:	615d      	str	r5, [r3, #20]
		ptr_job->buf_size = ptr_job->buf_cnt; // buf_size is passed to callback as XFR count
  401f2a:	4b26      	ldr	r3, [pc, #152]	; (401fc4 <UDP_Handler+0x4d0>)
  401f2c:	00ba      	lsls	r2, r7, #2
  401f2e:	19d1      	adds	r1, r2, r7
  401f30:	eb03 0181 	add.w	r1, r3, r1, lsl #2
  401f34:	68cb      	ldr	r3, [r1, #12]
  401f36:	608b      	str	r3, [r1, #8]
		udd_ep_finish_job(ptr_job, UDD_EP_TRANSFER_OK, ep);
  401f38:	4632      	mov	r2, r6
  401f3a:	2100      	movs	r1, #0
  401f3c:	4640      	mov	r0, r8
  401f3e:	4b23      	ldr	r3, [pc, #140]	; (401fcc <UDP_Handler+0x4d8>)
  401f40:	4798      	blx	r3
  401f42:	e624      	b.n	401b8e <UDP_Handler+0x9a>
			return true;
		}
		// TXIN: packet sent
		if (Is_udd_in_sent(ep)) {

			ptr_job->bank--;
  401f44:	eb07 0287 	add.w	r2, r7, r7, lsl #2
  401f48:	4b1e      	ldr	r3, [pc, #120]	; (401fc4 <UDP_Handler+0x4d0>)
  401f4a:	eb03 0282 	add.w	r2, r3, r2, lsl #2
  401f4e:	7c53      	ldrb	r3, [r2, #17]
  401f50:	f3c3 0181 	ubfx	r1, r3, #2, #2
  401f54:	3103      	adds	r1, #3
  401f56:	f361 0383 	bfi	r3, r1, #2, #2
  401f5a:	7453      	strb	r3, [r2, #17]
			// Stall when all banks free
			if (ptr_job->b_stall_requested) {
  401f5c:	7c53      	ldrb	r3, [r2, #17]
  401f5e:	f013 0f20 	tst.w	r3, #32
  401f62:	d05f      	beq.n	402024 <UDP_Handler+0x530>
				if (ptr_job->bank) {
  401f64:	f013 0f0c 	tst.w	r3, #12
  401f68:	d032      	beq.n	401fd0 <UDP_Handler+0x4dc>
					// Send remaining
					udd_set_transmit_ready(ep);
  401f6a:	6b23      	ldr	r3, [r4, #48]	; 0x30
  401f6c:	930c      	str	r3, [sp, #48]	; 0x30
  401f6e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  401f70:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  401f74:	930c      	str	r3, [sp, #48]	; 0x30
  401f76:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  401f78:	f043 0310 	orr.w	r3, r3, #16
  401f7c:	930c      	str	r3, [sp, #48]	; 0x30
  401f7e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  401f80:	6323      	str	r3, [r4, #48]	; 0x30
  401f82:	6b23      	ldr	r3, [r4, #48]	; 0x30
  401f84:	f013 0f10 	tst.w	r3, #16
  401f88:	d0fb      	beq.n	401f82 <UDP_Handler+0x48e>
					udd_ack_in_sent(ep);
  401f8a:	6b23      	ldr	r3, [r4, #48]	; 0x30
  401f8c:	930d      	str	r3, [sp, #52]	; 0x34
  401f8e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  401f90:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  401f94:	930d      	str	r3, [sp, #52]	; 0x34
  401f96:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  401f98:	f023 0301 	bic.w	r3, r3, #1
  401f9c:	930d      	str	r3, [sp, #52]	; 0x34
  401f9e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  401fa0:	6323      	str	r3, [r4, #48]	; 0x30
  401fa2:	6b23      	ldr	r3, [r4, #48]	; 0x30
  401fa4:	f013 0f01 	tst.w	r3, #1
  401fa8:	d1fb      	bne.n	401fa2 <UDP_Handler+0x4ae>
  401faa:	e5f0      	b.n	401b8e <UDP_Handler+0x9a>
  401fac:	40044000 	.word	0x40044000
  401fb0:	20000bf4 	.word	0x20000bf4
  401fb4:	20000b40 	.word	0x20000b40
  401fb8:	0040162d 	.word	0x0040162d
  401fbc:	20000b42 	.word	0x20000b42
  401fc0:	004015f5 	.word	0x004015f5
  401fc4:	20000b48 	.word	0x20000b48
  401fc8:	0040186d 	.word	0x0040186d
  401fcc:	0040182d 	.word	0x0040182d
				} else {
					// Ack last packet
					udd_ack_in_sent(ep);
  401fd0:	6b23      	ldr	r3, [r4, #48]	; 0x30
  401fd2:	930e      	str	r3, [sp, #56]	; 0x38
  401fd4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  401fd6:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  401fda:	930e      	str	r3, [sp, #56]	; 0x38
  401fdc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  401fde:	f023 0301 	bic.w	r3, r3, #1
  401fe2:	930e      	str	r3, [sp, #56]	; 0x38
  401fe4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  401fe6:	6323      	str	r3, [r4, #48]	; 0x30
  401fe8:	6b23      	ldr	r3, [r4, #48]	; 0x30
  401fea:	f013 0f01 	tst.w	r3, #1
  401fee:	d1fb      	bne.n	401fe8 <UDP_Handler+0x4f4>
					// Enable stall
					udd_enable_stall_handshake(ep);
  401ff0:	6b23      	ldr	r3, [r4, #48]	; 0x30
  401ff2:	930f      	str	r3, [sp, #60]	; 0x3c
  401ff4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  401ff6:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  401ffa:	930f      	str	r3, [sp, #60]	; 0x3c
  401ffc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  401ffe:	f043 0320 	orr.w	r3, r3, #32
  402002:	930f      	str	r3, [sp, #60]	; 0x3c
  402004:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  402006:	6323      	str	r3, [r4, #48]	; 0x30
  402008:	6b23      	ldr	r3, [r4, #48]	; 0x30
  40200a:	f013 0f20 	tst.w	r3, #32
  40200e:	d0fb      	beq.n	402008 <UDP_Handler+0x514>
					// Halt executed
					ptr_job->b_stall_requested = false;
  402010:	eb07 0787 	add.w	r7, r7, r7, lsl #2
  402014:	4ba3      	ldr	r3, [pc, #652]	; (4022a4 <UDP_Handler+0x7b0>)
  402016:	eb03 0387 	add.w	r3, r3, r7, lsl #2
  40201a:	7c5a      	ldrb	r2, [r3, #17]
  40201c:	f36f 1245 	bfc	r2, #5, #1
  402020:	745a      	strb	r2, [r3, #17]
  402022:	e5b4      	b.n	401b8e <UDP_Handler+0x9a>
				}
				return true;
			}
			// Finish Job when buffer end
			if (ptr_job->b_buf_end) {
  402024:	f013 0f80 	tst.w	r3, #128	; 0x80
  402028:	d138      	bne.n	40209c <UDP_Handler+0x5a8>
				ptr_job->b_buf_end = false;
				ptr_job->buf_size = ptr_job->buf_cnt; // buf_size is passed to callback as XFR count
                udd_disable_endpoint_interrupt(ep);
                udd_ep_finish_job(ptr_job, UDD_EP_TRANSFER_OK, ep);
			}
			if (ptr_job->buf_cnt >= ptr_job->buf_size &&
  40202a:	eb07 0287 	add.w	r2, r7, r7, lsl #2
  40202e:	4b9d      	ldr	r3, [pc, #628]	; (4022a4 <UDP_Handler+0x7b0>)
  402030:	eb03 0382 	add.w	r3, r3, r2, lsl #2
  402034:	68da      	ldr	r2, [r3, #12]
  402036:	689b      	ldr	r3, [r3, #8]
  402038:	429a      	cmp	r2, r3
  40203a:	d341      	bcc.n	4020c0 <UDP_Handler+0x5cc>
					!ptr_job->b_shortpacket &&
  40203c:	eb07 0287 	add.w	r2, r7, r7, lsl #2
  402040:	4b98      	ldr	r3, [pc, #608]	; (4022a4 <UDP_Handler+0x7b0>)
  402042:	eb03 0382 	add.w	r3, r3, r2, lsl #2
  402046:	7c5b      	ldrb	r3, [r3, #17]
  402048:	f013 0f4c 	tst.w	r3, #76	; 0x4c
  40204c:	d138      	bne.n	4020c0 <UDP_Handler+0x5cc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  40204e:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
  402052:	fab3 f383 	clz	r3, r3
  402056:	095b      	lsrs	r3, r3, #5
  402058:	9310      	str	r3, [sp, #64]	; 0x40
  __ASM volatile ("cpsid i" : : : "memory");
  40205a:	b672      	cpsid	i
  40205c:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  402060:	2200      	movs	r2, #0
  402062:	4b91      	ldr	r3, [pc, #580]	; (4022a8 <UDP_Handler+0x7b4>)
  402064:	701a      	strb	r2, [r3, #0]
	return flags;
  402066:	9b10      	ldr	r3, [sp, #64]	; 0x40
					ptr_job->bank == 0) {
				// All transfer done, including ZLP
				irqflags_t flags = cpu_irq_save();
				udd_disable_endpoint_interrupt(ep);
  402068:	4a90      	ldr	r2, [pc, #576]	; (4022ac <UDP_Handler+0x7b8>)
  40206a:	6155      	str	r5, [r2, #20]
	if (cpu_irq_is_enabled_flags(flags))
  40206c:	b12b      	cbz	r3, 40207a <UDP_Handler+0x586>
		cpu_irq_enable();
  40206e:	2201      	movs	r2, #1
  402070:	4b8d      	ldr	r3, [pc, #564]	; (4022a8 <UDP_Handler+0x7b4>)
  402072:	701a      	strb	r2, [r3, #0]
  402074:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  402078:	b662      	cpsie	i
				cpu_irq_restore(flags);
				// Ack last packet
				udd_ack_in_sent(ep);
  40207a:	6b23      	ldr	r3, [r4, #48]	; 0x30
  40207c:	9311      	str	r3, [sp, #68]	; 0x44
  40207e:	9b11      	ldr	r3, [sp, #68]	; 0x44
  402080:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  402084:	9311      	str	r3, [sp, #68]	; 0x44
  402086:	9b11      	ldr	r3, [sp, #68]	; 0x44
  402088:	f023 0301 	bic.w	r3, r3, #1
  40208c:	9311      	str	r3, [sp, #68]	; 0x44
  40208e:	9b11      	ldr	r3, [sp, #68]	; 0x44
  402090:	6323      	str	r3, [r4, #48]	; 0x30
  402092:	6b23      	ldr	r3, [r4, #48]	; 0x30
  402094:	f013 0f01 	tst.w	r3, #1
  402098:	d1fb      	bne.n	402092 <UDP_Handler+0x59e>
  40209a:	e578      	b.n	401b8e <UDP_Handler+0x9a>
				ptr_job->b_buf_end = false;
  40209c:	2314      	movs	r3, #20
  40209e:	4a81      	ldr	r2, [pc, #516]	; (4022a4 <UDP_Handler+0x7b0>)
  4020a0:	fb03 2307 	mla	r3, r3, r7, r2
  4020a4:	7c59      	ldrb	r1, [r3, #17]
  4020a6:	f36f 11c7 	bfc	r1, #7, #1
  4020aa:	7459      	strb	r1, [r3, #17]
				ptr_job->buf_size = ptr_job->buf_cnt; // buf_size is passed to callback as XFR count
  4020ac:	68da      	ldr	r2, [r3, #12]
  4020ae:	609a      	str	r2, [r3, #8]
                udd_disable_endpoint_interrupt(ep);
  4020b0:	4b7e      	ldr	r3, [pc, #504]	; (4022ac <UDP_Handler+0x7b8>)
  4020b2:	615d      	str	r5, [r3, #20]
                udd_ep_finish_job(ptr_job, UDD_EP_TRANSFER_OK, ep);
  4020b4:	4632      	mov	r2, r6
  4020b6:	2100      	movs	r1, #0
  4020b8:	4640      	mov	r0, r8
  4020ba:	4b7d      	ldr	r3, [pc, #500]	; (4022b0 <UDP_Handler+0x7bc>)
  4020bc:	4798      	blx	r3
  4020be:	e7b4      	b.n	40202a <UDP_Handler+0x536>
				return true;
			} else if (udd_get_endpoint_bank_max_nbr(ep) > 1
  4020c0:	2e00      	cmp	r6, #0
  4020c2:	d05b      	beq.n	40217c <UDP_Handler+0x688>
  4020c4:	2e03      	cmp	r6, #3
  4020c6:	d059      	beq.n	40217c <UDP_Handler+0x688>
					&& ptr_job->bank > 0) {
  4020c8:	eb07 0287 	add.w	r2, r7, r7, lsl #2
  4020cc:	4b75      	ldr	r3, [pc, #468]	; (4022a4 <UDP_Handler+0x7b0>)
  4020ce:	eb03 0382 	add.w	r3, r3, r2, lsl #2
  4020d2:	7c5b      	ldrb	r3, [r3, #17]
  4020d4:	f013 0f0c 	tst.w	r3, #12
  4020d8:	d024      	beq.n	402124 <UDP_Handler+0x630>
				// Already banks buffered, transmit while loading
				udd_set_transmit_ready(ep);
  4020da:	6b23      	ldr	r3, [r4, #48]	; 0x30
  4020dc:	9312      	str	r3, [sp, #72]	; 0x48
  4020de:	9b12      	ldr	r3, [sp, #72]	; 0x48
  4020e0:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  4020e4:	9312      	str	r3, [sp, #72]	; 0x48
  4020e6:	9b12      	ldr	r3, [sp, #72]	; 0x48
  4020e8:	f043 0310 	orr.w	r3, r3, #16
  4020ec:	9312      	str	r3, [sp, #72]	; 0x48
  4020ee:	9b12      	ldr	r3, [sp, #72]	; 0x48
  4020f0:	6323      	str	r3, [r4, #48]	; 0x30
  4020f2:	6b23      	ldr	r3, [r4, #48]	; 0x30
  4020f4:	f013 0f10 	tst.w	r3, #16
  4020f8:	d0fb      	beq.n	4020f2 <UDP_Handler+0x5fe>
				udd_ack_in_sent(ep);
  4020fa:	6b23      	ldr	r3, [r4, #48]	; 0x30
  4020fc:	9313      	str	r3, [sp, #76]	; 0x4c
  4020fe:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  402100:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  402104:	9313      	str	r3, [sp, #76]	; 0x4c
  402106:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  402108:	f023 0301 	bic.w	r3, r3, #1
  40210c:	9313      	str	r3, [sp, #76]	; 0x4c
  40210e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  402110:	6323      	str	r3, [r4, #48]	; 0x30
  402112:	6b23      	ldr	r3, [r4, #48]	; 0x30
  402114:	f013 0f01 	tst.w	r3, #1
  402118:	d1fb      	bne.n	402112 <UDP_Handler+0x61e>
				udd_ep_in_sent(ep, false);
  40211a:	2100      	movs	r1, #0
  40211c:	4630      	mov	r0, r6
  40211e:	4b65      	ldr	r3, [pc, #404]	; (4022b4 <UDP_Handler+0x7c0>)
  402120:	4798      	blx	r3
  402122:	e534      	b.n	401b8e <UDP_Handler+0x9a>
			} else if (udd_get_endpoint_bank_max_nbr(ep) > 1) {
				// Still bank free, load and transmit
				if (!udd_ep_in_sent(ep, true)) {
  402124:	2101      	movs	r1, #1
  402126:	4630      	mov	r0, r6
  402128:	4b62      	ldr	r3, [pc, #392]	; (4022b4 <UDP_Handler+0x7c0>)
  40212a:	4798      	blx	r3
  40212c:	b1a0      	cbz	r0, 402158 <UDP_Handler+0x664>
					ptr_job->b_buf_end = false;
					ptr_job->buf_size = ptr_job->buf_cnt; // buf_size is passed to callback as XFR count
                    udd_disable_endpoint_interrupt(ep);
                    udd_ep_finish_job(ptr_job, UDD_EP_TRANSFER_OK, ep);
				}
				udd_ack_in_sent(ep);
  40212e:	6b23      	ldr	r3, [r4, #48]	; 0x30
  402130:	9314      	str	r3, [sp, #80]	; 0x50
  402132:	9b14      	ldr	r3, [sp, #80]	; 0x50
  402134:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  402138:	9314      	str	r3, [sp, #80]	; 0x50
  40213a:	9b14      	ldr	r3, [sp, #80]	; 0x50
  40213c:	f023 0301 	bic.w	r3, r3, #1
  402140:	9314      	str	r3, [sp, #80]	; 0x50
  402142:	9b14      	ldr	r3, [sp, #80]	; 0x50
  402144:	6323      	str	r3, [r4, #48]	; 0x30
  402146:	6b23      	ldr	r3, [r4, #48]	; 0x30
  402148:	f013 0f01 	tst.w	r3, #1
  40214c:	d1fb      	bne.n	402146 <UDP_Handler+0x652>
				udd_ep_in_sent(ep, false);
  40214e:	2100      	movs	r1, #0
  402150:	4630      	mov	r0, r6
  402152:	4b58      	ldr	r3, [pc, #352]	; (4022b4 <UDP_Handler+0x7c0>)
  402154:	4798      	blx	r3
  402156:	e51a      	b.n	401b8e <UDP_Handler+0x9a>
					ptr_job->b_buf_end = false;
  402158:	2314      	movs	r3, #20
  40215a:	4a52      	ldr	r2, [pc, #328]	; (4022a4 <UDP_Handler+0x7b0>)
  40215c:	fb03 2707 	mla	r7, r3, r7, r2
  402160:	7c7a      	ldrb	r2, [r7, #17]
  402162:	f36f 12c7 	bfc	r2, #7, #1
  402166:	747a      	strb	r2, [r7, #17]
					ptr_job->buf_size = ptr_job->buf_cnt; // buf_size is passed to callback as XFR count
  402168:	68fb      	ldr	r3, [r7, #12]
  40216a:	60bb      	str	r3, [r7, #8]
                    udd_disable_endpoint_interrupt(ep);
  40216c:	4b4f      	ldr	r3, [pc, #316]	; (4022ac <UDP_Handler+0x7b8>)
  40216e:	615d      	str	r5, [r3, #20]
                    udd_ep_finish_job(ptr_job, UDD_EP_TRANSFER_OK, ep);
  402170:	4632      	mov	r2, r6
  402172:	2100      	movs	r1, #0
  402174:	4640      	mov	r0, r8
  402176:	4b4e      	ldr	r3, [pc, #312]	; (4022b0 <UDP_Handler+0x7bc>)
  402178:	4798      	blx	r3
  40217a:	e7d8      	b.n	40212e <UDP_Handler+0x63a>
			} else {
				// Single bank transfer, ack when ready
				udd_ep_in_sent(ep, true);
  40217c:	2101      	movs	r1, #1
  40217e:	4630      	mov	r0, r6
  402180:	4b4c      	ldr	r3, [pc, #304]	; (4022b4 <UDP_Handler+0x7c0>)
  402182:	4798      	blx	r3
				udd_ack_in_sent(ep);
  402184:	6b23      	ldr	r3, [r4, #48]	; 0x30
  402186:	9315      	str	r3, [sp, #84]	; 0x54
  402188:	9b15      	ldr	r3, [sp, #84]	; 0x54
  40218a:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  40218e:	9315      	str	r3, [sp, #84]	; 0x54
  402190:	9b15      	ldr	r3, [sp, #84]	; 0x54
  402192:	f023 0301 	bic.w	r3, r3, #1
  402196:	9315      	str	r3, [sp, #84]	; 0x54
  402198:	9b15      	ldr	r3, [sp, #84]	; 0x54
  40219a:	6323      	str	r3, [r4, #48]	; 0x30
  40219c:	6b23      	ldr	r3, [r4, #48]	; 0x30
  40219e:	f013 0f01 	tst.w	r3, #1
  4021a2:	d1fb      	bne.n	40219c <UDP_Handler+0x6a8>
  4021a4:	e4f3      	b.n	401b8e <UDP_Handler+0x9a>
  4021a6:	3301      	adds	r3, #1
  4021a8:	3214      	adds	r2, #20
	for (ep = 1; ep <= USB_DEVICE_MAX_EP; ep++) {
  4021aa:	2b04      	cmp	r3, #4
  4021ac:	f000 808e 	beq.w	4022cc <UDP_Handler+0x7d8>
  4021b0:	b2de      	uxtb	r6, r3
		if (!Is_udd_endpoint_interrupt_enabled(ep)) {
  4021b2:	f8de 1018 	ldr.w	r1, [lr, #24]
  4021b6:	fa00 f503 	lsl.w	r5, r0, r3
  4021ba:	4229      	tst	r1, r5
  4021bc:	d0f3      	beq.n	4021a6 <UDP_Handler+0x6b2>
  4021be:	1e5f      	subs	r7, r3, #1
		ptr_job = &udd_ep_job[ep - 1];
  4021c0:	4690      	mov	r8, r2
  4021c2:	009c      	lsls	r4, r3, #2
  4021c4:	f104 2440 	add.w	r4, r4, #1073758208	; 0x40004000
  4021c8:	f504 2480 	add.w	r4, r4, #262144	; 0x40000
		if (Is_udd_any_bank_received(ep)) {
  4021cc:	6b21      	ldr	r1, [r4, #48]	; 0x30
  4021ce:	f011 0f42 	tst.w	r1, #66	; 0x42
  4021d2:	f47f ae6d 	bne.w	401eb0 <UDP_Handler+0x3bc>
		if (Is_udd_in_sent(ep)) {
  4021d6:	6b21      	ldr	r1, [r4, #48]	; 0x30
  4021d8:	f011 0f01 	tst.w	r1, #1
  4021dc:	f47f aeb2 	bne.w	401f44 <UDP_Handler+0x450>
			}
			return true;
		}
		// Stall sent/CRC error
		if (Is_udd_stall(ep)) {
  4021e0:	6b21      	ldr	r1, [r4, #48]	; 0x30
  4021e2:	f011 0f08 	tst.w	r1, #8
  4021e6:	d0de      	beq.n	4021a6 <UDP_Handler+0x6b2>
			udd_ack_stall(ep);
  4021e8:	6b23      	ldr	r3, [r4, #48]	; 0x30
  4021ea:	9316      	str	r3, [sp, #88]	; 0x58
  4021ec:	9b16      	ldr	r3, [sp, #88]	; 0x58
  4021ee:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  4021f2:	9316      	str	r3, [sp, #88]	; 0x58
  4021f4:	9b16      	ldr	r3, [sp, #88]	; 0x58
  4021f6:	f023 0308 	bic.w	r3, r3, #8
  4021fa:	9316      	str	r3, [sp, #88]	; 0x58
  4021fc:	9b16      	ldr	r3, [sp, #88]	; 0x58
  4021fe:	6323      	str	r3, [r4, #48]	; 0x30
  402200:	6b23      	ldr	r3, [r4, #48]	; 0x30
  402202:	f013 0f08 	tst.w	r3, #8
  402206:	d1fb      	bne.n	402200 <UDP_Handler+0x70c>
			if (udd_get_endpoint_type(ep) == UDP_CSR_EPTYPE_ISO_OUT ||
  402208:	6b23      	ldr	r3, [r4, #48]	; 0x30
  40220a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  40220e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
  402212:	f43f acbc 	beq.w	401b8e <UDP_Handler+0x9a>
				udd_get_endpoint_type(ep) == UDP_CSR_EPTYPE_ISO_IN) {
  402216:	6b23      	ldr	r3, [r4, #48]	; 0x30
  402218:	e4b9      	b.n	401b8e <UDP_Handler+0x9a>
	if ((Is_udd_wake_up_interrupt_enabled() && Is_udd_wake_up()) ||
  40221a:	4b24      	ldr	r3, [pc, #144]	; (4022ac <UDP_Handler+0x7b8>)
  40221c:	69db      	ldr	r3, [r3, #28]
  40221e:	f413 5f00 	tst.w	r3, #8192	; 0x2000
  402222:	d058      	beq.n	4022d6 <UDP_Handler+0x7e2>
		udd_ack_wakeups();
  402224:	4c21      	ldr	r4, [pc, #132]	; (4022ac <UDP_Handler+0x7b8>)
  402226:	f44f 5318 	mov.w	r3, #9728	; 0x2600
  40222a:	6223      	str	r3, [r4, #32]
		udd_disable_wakeups();
  40222c:	6163      	str	r3, [r4, #20]
	udd_b_idle = b_idle;
  40222e:	2201      	movs	r2, #1
  402230:	4b21      	ldr	r3, [pc, #132]	; (4022b8 <UDP_Handler+0x7c4>)
  402232:	701a      	strb	r2, [r3, #0]
		UDC_RESUME_EVENT();
  402234:	4b21      	ldr	r3, [pc, #132]	; (4022bc <UDP_Handler+0x7c8>)
  402236:	4798      	blx	r3
		udd_ack_suspend();
  402238:	f44f 7380 	mov.w	r3, #256	; 0x100
  40223c:	6223      	str	r3, [r4, #32]
		udd_enable_suspend_interrupt();
  40223e:	6123      	str	r3, [r4, #16]
		udd_enable_sof_interrupt();
  402240:	f44f 6300 	mov.w	r3, #2048	; 0x800
  402244:	6123      	str	r3, [r4, #16]
		goto udd_interrupt_end;
  402246:	e4a2      	b.n	401b8e <UDP_Handler+0x9a>
		udd_ack_suspend();
  402248:	4b18      	ldr	r3, [pc, #96]	; (4022ac <UDP_Handler+0x7b8>)
  40224a:	f44f 7280 	mov.w	r2, #256	; 0x100
  40224e:	621a      	str	r2, [r3, #32]
		udd_disable_suspend_interrupt();
  402250:	615a      	str	r2, [r3, #20]
		udd_enable_wake_up_interrupt();
  402252:	f44f 5200 	mov.w	r2, #8192	; 0x2000
  402256:	611a      	str	r2, [r3, #16]
		udd_enable_resume_interrupt();
  402258:	f44f 7200 	mov.w	r2, #512	; 0x200
  40225c:	611a      	str	r2, [r3, #16]
		udd_enable_ext_resume_interrupt();
  40225e:	f44f 6280 	mov.w	r2, #1024	; 0x400
  402262:	611a      	str	r2, [r3, #16]
		udd_disable_periph_ck();
  402264:	2030      	movs	r0, #48	; 0x30
  402266:	4b16      	ldr	r3, [pc, #88]	; (4022c0 <UDP_Handler+0x7cc>)
  402268:	4798      	blx	r3
	udd_b_idle = b_idle;
  40226a:	2200      	movs	r2, #0
  40226c:	4b12      	ldr	r3, [pc, #72]	; (4022b8 <UDP_Handler+0x7c4>)
  40226e:	701a      	strb	r2, [r3, #0]
		UDC_SUSPEND_EVENT();
  402270:	4b14      	ldr	r3, [pc, #80]	; (4022c4 <UDP_Handler+0x7d0>)
  402272:	4798      	blx	r3
		goto udd_interrupt_end;
  402274:	e48b      	b.n	401b8e <UDP_Handler+0x9a>
	udd_ep_ack_out_received(ep);
  402276:	4630      	mov	r0, r6
  402278:	4b13      	ldr	r3, [pc, #76]	; (4022c8 <UDP_Handler+0x7d4>)
  40227a:	4798      	blx	r3
  40227c:	e64e      	b.n	401f1c <UDP_Handler+0x428>
		ptr_job->buf_cnt += nb_data;
  40227e:	eb07 0c87 	add.w	ip, r7, r7, lsl #2
  402282:	4b08      	ldr	r3, [pc, #32]	; (4022a4 <UDP_Handler+0x7b0>)
  402284:	eb03 038c 	add.w	r3, r3, ip, lsl #2
  402288:	f8c3 e00c 	str.w	lr, [r3, #12]
		for (i = 0; i < nb_data; i++) {
  40228c:	2800      	cmp	r0, #0
  40228e:	d0f2      	beq.n	402276 <UDP_Handler+0x782>
			b_full = true;
  402290:	f04f 0b01 	mov.w	fp, #1
  402294:	e633      	b.n	401efe <UDP_Handler+0x40a>
	udd_ep_ack_out_received(ep);
  402296:	4630      	mov	r0, r6
  402298:	4b0b      	ldr	r3, [pc, #44]	; (4022c8 <UDP_Handler+0x7d4>)
  40229a:	4798      	blx	r3
	if ((b_full || b_short) &&
  40229c:	45ca      	cmp	sl, r9
  40229e:	f63f ae3d 	bhi.w	401f1c <UDP_Handler+0x428>
  4022a2:	e474      	b.n	401b8e <UDP_Handler+0x9a>
  4022a4:	20000b48 	.word	0x20000b48
  4022a8:	20000520 	.word	0x20000520
  4022ac:	40044000 	.word	0x40044000
  4022b0:	0040182d 	.word	0x0040182d
  4022b4:	00401941 	.word	0x00401941
  4022b8:	20000b3e 	.word	0x20000b3e
  4022bc:	00402e1b 	.word	0x00402e1b
  4022c0:	00401545 	.word	0x00401545
  4022c4:	00402e19 	.word	0x00402e19
  4022c8:	0040186d 	.word	0x0040186d
	if ((Is_udd_wake_up_interrupt_enabled() && Is_udd_wake_up()) ||
  4022cc:	4b4b      	ldr	r3, [pc, #300]	; (4023fc <UDP_Handler+0x908>)
  4022ce:	699b      	ldr	r3, [r3, #24]
  4022d0:	f413 5f00 	tst.w	r3, #8192	; 0x2000
  4022d4:	d1a1      	bne.n	40221a <UDP_Handler+0x726>
		(Is_udd_resume_interrupt_enabled() && Is_udd_resume()) ||
  4022d6:	4b49      	ldr	r3, [pc, #292]	; (4023fc <UDP_Handler+0x908>)
  4022d8:	699b      	ldr	r3, [r3, #24]
	if ((Is_udd_wake_up_interrupt_enabled() && Is_udd_wake_up()) ||
  4022da:	f413 7f00 	tst.w	r3, #512	; 0x200
  4022de:	d004      	beq.n	4022ea <UDP_Handler+0x7f6>
		(Is_udd_resume_interrupt_enabled() && Is_udd_resume()) ||
  4022e0:	4b46      	ldr	r3, [pc, #280]	; (4023fc <UDP_Handler+0x908>)
  4022e2:	69db      	ldr	r3, [r3, #28]
  4022e4:	f413 7f00 	tst.w	r3, #512	; 0x200
  4022e8:	d19c      	bne.n	402224 <UDP_Handler+0x730>
		(Is_udd_ext_resume_interrupt_enabled() && Is_udd_ext_resume())) {
  4022ea:	4b44      	ldr	r3, [pc, #272]	; (4023fc <UDP_Handler+0x908>)
  4022ec:	699b      	ldr	r3, [r3, #24]
		(Is_udd_resume_interrupt_enabled() && Is_udd_resume()) ||
  4022ee:	f413 6f80 	tst.w	r3, #1024	; 0x400
  4022f2:	d004      	beq.n	4022fe <UDP_Handler+0x80a>
		(Is_udd_ext_resume_interrupt_enabled() && Is_udd_ext_resume())) {
  4022f4:	4b41      	ldr	r3, [pc, #260]	; (4023fc <UDP_Handler+0x908>)
  4022f6:	69db      	ldr	r3, [r3, #28]
  4022f8:	f413 6f80 	tst.w	r3, #1024	; 0x400
  4022fc:	d192      	bne.n	402224 <UDP_Handler+0x730>
	if (Is_udd_suspend_interrupt_enabled() && Is_udd_suspend()) {
  4022fe:	4b3f      	ldr	r3, [pc, #252]	; (4023fc <UDP_Handler+0x908>)
  402300:	699b      	ldr	r3, [r3, #24]
  402302:	f413 7f80 	tst.w	r3, #256	; 0x100
  402306:	d004      	beq.n	402312 <UDP_Handler+0x81e>
  402308:	4b3c      	ldr	r3, [pc, #240]	; (4023fc <UDP_Handler+0x908>)
  40230a:	69db      	ldr	r3, [r3, #28]
  40230c:	f413 7f80 	tst.w	r3, #256	; 0x100
  402310:	d19a      	bne.n	402248 <UDP_Handler+0x754>
	if (Is_udd_reset()) {
  402312:	4b3a      	ldr	r3, [pc, #232]	; (4023fc <UDP_Handler+0x908>)
  402314:	69db      	ldr	r3, [r3, #28]
  402316:	f413 5f80 	tst.w	r3, #4096	; 0x1000
  40231a:	f43f ac38 	beq.w	401b8e <UDP_Handler+0x9a>
		udd_ack_reset();
  40231e:	4c37      	ldr	r4, [pc, #220]	; (4023fc <UDP_Handler+0x908>)
  402320:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  402324:	6223      	str	r3, [r4, #32]
		udd_ep_finish_job(&udd_ep_job[i], UDD_EP_TRANSFER_ABORT, i + 1);
  402326:	4e36      	ldr	r6, [pc, #216]	; (402400 <UDP_Handler+0x90c>)
  402328:	2201      	movs	r2, #1
  40232a:	4611      	mov	r1, r2
  40232c:	4630      	mov	r0, r6
  40232e:	4d35      	ldr	r5, [pc, #212]	; (402404 <UDP_Handler+0x910>)
  402330:	47a8      	blx	r5
  402332:	2202      	movs	r2, #2
  402334:	2101      	movs	r1, #1
  402336:	f106 0014 	add.w	r0, r6, #20
  40233a:	47a8      	blx	r5
  40233c:	2203      	movs	r2, #3
  40233e:	2101      	movs	r1, #1
  402340:	f106 0028 	add.w	r0, r6, #40	; 0x28
  402344:	47a8      	blx	r5
		udc_reset();
  402346:	4b30      	ldr	r3, [pc, #192]	; (402408 <UDP_Handler+0x914>)
  402348:	4798      	blx	r3
		udd_disable_address_state();
  40234a:	6863      	ldr	r3, [r4, #4]
  40234c:	f023 0301 	bic.w	r3, r3, #1
  402350:	6063      	str	r3, [r4, #4]
		udd_disable_configured_state();
  402352:	6863      	ldr	r3, [r4, #4]
  402354:	f023 0302 	bic.w	r3, r3, #2
  402358:	6063      	str	r3, [r4, #4]
	udd_enable_address();
  40235a:	68a3      	ldr	r3, [r4, #8]
  40235c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
  402360:	60a3      	str	r3, [r4, #8]
	udd_configure_address(0);
  402362:	68a3      	ldr	r3, [r4, #8]
  402364:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
  402368:	60a3      	str	r3, [r4, #8]
	udd_configure_endpoint(0, USB_EP_TYPE_CONTROL, 0);
  40236a:	6b23      	ldr	r3, [r4, #48]	; 0x30
  40236c:	9318      	str	r3, [sp, #96]	; 0x60
  40236e:	9b18      	ldr	r3, [sp, #96]	; 0x60
  402370:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  402374:	9318      	str	r3, [sp, #96]	; 0x60
  402376:	9b18      	ldr	r3, [sp, #96]	; 0x60
  402378:	f423 4307 	bic.w	r3, r3, #34560	; 0x8700
  40237c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  402380:	9318      	str	r3, [sp, #96]	; 0x60
  402382:	9b18      	ldr	r3, [sp, #96]	; 0x60
  402384:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
  402388:	9318      	str	r3, [sp, #96]	; 0x60
  40238a:	9b18      	ldr	r3, [sp, #96]	; 0x60
  40238c:	6323      	str	r3, [r4, #48]	; 0x30
  40238e:	4622      	mov	r2, r4
  402390:	6b13      	ldr	r3, [r2, #48]	; 0x30
  402392:	f413 4f00 	tst.w	r3, #32768	; 0x8000
  402396:	d0fb      	beq.n	402390 <UDP_Handler+0x89c>
	udd_enable_endpoint(0);
  402398:	4a18      	ldr	r2, [pc, #96]	; (4023fc <UDP_Handler+0x908>)
  40239a:	6b13      	ldr	r3, [r2, #48]	; 0x30
  40239c:	9319      	str	r3, [sp, #100]	; 0x64
  40239e:	9b19      	ldr	r3, [sp, #100]	; 0x64
  4023a0:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  4023a4:	9319      	str	r3, [sp, #100]	; 0x64
  4023a6:	9b19      	ldr	r3, [sp, #100]	; 0x64
  4023a8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
  4023ac:	9319      	str	r3, [sp, #100]	; 0x64
  4023ae:	9b19      	ldr	r3, [sp, #100]	; 0x64
  4023b0:	6313      	str	r3, [r2, #48]	; 0x30
  4023b2:	6b13      	ldr	r3, [r2, #48]	; 0x30
  4023b4:	f413 4f00 	tst.w	r3, #32768	; 0x8000
  4023b8:	d0fb      	beq.n	4023b2 <UDP_Handler+0x8be>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  4023ba:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
  4023be:	fab3 f383 	clz	r3, r3
  4023c2:	095b      	lsrs	r3, r3, #5
  4023c4:	9317      	str	r3, [sp, #92]	; 0x5c
  __ASM volatile ("cpsid i" : : : "memory");
  4023c6:	b672      	cpsid	i
  4023c8:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  4023cc:	2200      	movs	r2, #0
  4023ce:	4b0f      	ldr	r3, [pc, #60]	; (40240c <UDP_Handler+0x918>)
  4023d0:	701a      	strb	r2, [r3, #0]
	return flags;
  4023d2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
	udd_enable_endpoint_interrupt(0);
  4023d4:	2101      	movs	r1, #1
  4023d6:	4a09      	ldr	r2, [pc, #36]	; (4023fc <UDP_Handler+0x908>)
  4023d8:	6111      	str	r1, [r2, #16]
	if (cpu_irq_is_enabled_flags(flags))
  4023da:	b123      	cbz	r3, 4023e6 <UDP_Handler+0x8f2>
		cpu_irq_enable();
  4023dc:	4b0b      	ldr	r3, [pc, #44]	; (40240c <UDP_Handler+0x918>)
  4023de:	7019      	strb	r1, [r3, #0]
  4023e0:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  4023e4:	b662      	cpsie	i
		udd_ctrl_init();
  4023e6:	4b0a      	ldr	r3, [pc, #40]	; (402410 <UDP_Handler+0x91c>)
  4023e8:	4798      	blx	r3
		udd_enable_suspend_interrupt();
  4023ea:	4b04      	ldr	r3, [pc, #16]	; (4023fc <UDP_Handler+0x908>)
  4023ec:	f44f 7280 	mov.w	r2, #256	; 0x100
  4023f0:	611a      	str	r2, [r3, #16]
		udd_enable_sof_interrupt();
  4023f2:	f44f 6200 	mov.w	r2, #2048	; 0x800
  4023f6:	611a      	str	r2, [r3, #16]
		goto udd_interrupt_end;
  4023f8:	f7ff bbc9 	b.w	401b8e <UDP_Handler+0x9a>
  4023fc:	40044000 	.word	0x40044000
  402400:	20000b48 	.word	0x20000b48
  402404:	0040182d 	.word	0x0040182d
  402408:	00400ef9 	.word	0x00400ef9
  40240c:	20000520 	.word	0x20000520
  402410:	004015dd 	.word	0x004015dd

00402414 <udd_attach>:
{
  402414:	b510      	push	{r4, lr}
  402416:	b082      	sub	sp, #8
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  402418:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
  40241c:	fab3 f383 	clz	r3, r3
  402420:	095b      	lsrs	r3, r3, #5
  402422:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
  402424:	b672      	cpsid	i
  402426:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  40242a:	2200      	movs	r2, #0
  40242c:	4b14      	ldr	r3, [pc, #80]	; (402480 <udd_attach+0x6c>)
  40242e:	701a      	strb	r2, [r3, #0]
	return flags;
  402430:	9c01      	ldr	r4, [sp, #4]
	udd_b_idle = b_idle;
  402432:	2201      	movs	r2, #1
  402434:	4b13      	ldr	r3, [pc, #76]	; (402484 <udd_attach+0x70>)
  402436:	701a      	strb	r2, [r3, #0]
	udd_enable_periph_ck();
  402438:	2030      	movs	r0, #48	; 0x30
  40243a:	4b13      	ldr	r3, [pc, #76]	; (402488 <udd_attach+0x74>)
  40243c:	4798      	blx	r3
	udd_enable_transceiver();
  40243e:	4b13      	ldr	r3, [pc, #76]	; (40248c <udd_attach+0x78>)
  402440:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  402442:	f422 7280 	bic.w	r2, r2, #256	; 0x100
  402446:	675a      	str	r2, [r3, #116]	; 0x74
	udd_attach_device();
  402448:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  40244a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
  40244e:	675a      	str	r2, [r3, #116]	; 0x74
	udd_enable_suspend_interrupt();
  402450:	f44f 7280 	mov.w	r2, #256	; 0x100
  402454:	611a      	str	r2, [r3, #16]
	udd_enable_wake_up_interrupt();
  402456:	f44f 5200 	mov.w	r2, #8192	; 0x2000
  40245a:	611a      	str	r2, [r3, #16]
	udd_enable_resume_interrupt();
  40245c:	f44f 7200 	mov.w	r2, #512	; 0x200
  402460:	611a      	str	r2, [r3, #16]
	udd_enable_ext_resume_interrupt();
  402462:	f44f 6280 	mov.w	r2, #1024	; 0x400
  402466:	611a      	str	r2, [r3, #16]
	udd_enable_sof_interrupt();
  402468:	f44f 6200 	mov.w	r2, #2048	; 0x800
  40246c:	611a      	str	r2, [r3, #16]
	if (cpu_irq_is_enabled_flags(flags))
  40246e:	b12c      	cbz	r4, 40247c <udd_attach+0x68>
		cpu_irq_enable();
  402470:	2201      	movs	r2, #1
  402472:	4b03      	ldr	r3, [pc, #12]	; (402480 <udd_attach+0x6c>)
  402474:	701a      	strb	r2, [r3, #0]
  402476:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  40247a:	b662      	cpsie	i
}
  40247c:	b002      	add	sp, #8
  40247e:	bd10      	pop	{r4, pc}
  402480:	20000520 	.word	0x20000520
  402484:	20000b3e 	.word	0x20000b3e
  402488:	004014f1 	.word	0x004014f1
  40248c:	40044000 	.word	0x40044000

00402490 <udd_enable>:
{
  402490:	b530      	push	{r4, r5, lr}
  402492:	b083      	sub	sp, #12
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  402494:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
  402498:	fab3 f383 	clz	r3, r3
  40249c:	095b      	lsrs	r3, r3, #5
  40249e:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
  4024a0:	b672      	cpsid	i
  4024a2:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  4024a6:	2400      	movs	r4, #0
  4024a8:	4b1a      	ldr	r3, [pc, #104]	; (402514 <udd_enable+0x84>)
  4024aa:	701c      	strb	r4, [r3, #0]
	return flags;
  4024ac:	9d01      	ldr	r5, [sp, #4]
	matrix_set_usb_device();
  4024ae:	4b1a      	ldr	r3, [pc, #104]	; (402518 <udd_enable+0x88>)
  4024b0:	4798      	blx	r3
	udd_enable_periph_ck();
  4024b2:	2030      	movs	r0, #48	; 0x30
  4024b4:	4b19      	ldr	r3, [pc, #100]	; (40251c <udd_enable+0x8c>)
  4024b6:	4798      	blx	r3
	sysclk_enable_usb();
  4024b8:	4b19      	ldr	r3, [pc, #100]	; (402520 <udd_enable+0x90>)
  4024ba:	4798      	blx	r3
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
  4024bc:	4b19      	ldr	r3, [pc, #100]	; (402524 <udd_enable+0x94>)
  4024be:	2250      	movs	r2, #80	; 0x50
  4024c0:	f883 2330 	strb.w	r2, [r3, #816]	; 0x330
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  4024c4:	f44f 3280 	mov.w	r2, #65536	; 0x10000
  4024c8:	605a      	str	r2, [r3, #4]
  4024ca:	4623      	mov	r3, r4
		udd_ep_job[i].bank = 0;
  4024cc:	4816      	ldr	r0, [pc, #88]	; (402528 <udd_enable+0x98>)
  4024ce:	009a      	lsls	r2, r3, #2
  4024d0:	18d1      	adds	r1, r2, r3
  4024d2:	eb00 0181 	add.w	r1, r0, r1, lsl #2
  4024d6:	7c49      	ldrb	r1, [r1, #17]
		udd_ep_job[i].b_buf_end = false;
  4024d8:	441a      	add	r2, r3
  4024da:	eb00 0282 	add.w	r2, r0, r2, lsl #2
  4024de:	f001 0183 	and.w	r1, r1, #131	; 0x83
  4024e2:	f36f 11c7 	bfc	r1, #7, #1
  4024e6:	7451      	strb	r1, [r2, #17]
  4024e8:	3301      	adds	r3, #1
	for (i = 0; i < USB_DEVICE_MAX_EP; i++) {
  4024ea:	2b03      	cmp	r3, #3
  4024ec:	d1ef      	bne.n	4024ce <udd_enable+0x3e>
	pmc_set_fast_startup_input(PMC_FSMR_USBAL);
  4024ee:	f44f 2080 	mov.w	r0, #262144	; 0x40000
  4024f2:	4b0e      	ldr	r3, [pc, #56]	; (40252c <udd_enable+0x9c>)
  4024f4:	4798      	blx	r3
	udd_b_idle = false;
  4024f6:	2200      	movs	r2, #0
  4024f8:	4b0d      	ldr	r3, [pc, #52]	; (402530 <udd_enable+0xa0>)
  4024fa:	701a      	strb	r2, [r3, #0]
	udd_attach();
  4024fc:	4b0d      	ldr	r3, [pc, #52]	; (402534 <udd_enable+0xa4>)
  4024fe:	4798      	blx	r3
	if (cpu_irq_is_enabled_flags(flags))
  402500:	b12d      	cbz	r5, 40250e <udd_enable+0x7e>
		cpu_irq_enable();
  402502:	2201      	movs	r2, #1
  402504:	4b03      	ldr	r3, [pc, #12]	; (402514 <udd_enable+0x84>)
  402506:	701a      	strb	r2, [r3, #0]
  402508:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  40250c:	b662      	cpsie	i
}
  40250e:	b003      	add	sp, #12
  402510:	bd30      	pop	{r4, r5, pc}
  402512:	bf00      	nop
  402514:	20000520 	.word	0x20000520
  402518:	004013f1 	.word	0x004013f1
  40251c:	004014f1 	.word	0x004014f1
  402520:	004002b5 	.word	0x004002b5
  402524:	e000e100 	.word	0xe000e100
  402528:	20000b48 	.word	0x20000b48
  40252c:	004015b9 	.word	0x004015b9
  402530:	20000b3e 	.word	0x20000b3e
  402534:	00402415 	.word	0x00402415

00402538 <udd_is_high_speed>:
}
  402538:	2000      	movs	r0, #0
  40253a:	4770      	bx	lr

0040253c <udd_set_address>:
	udd_disable_address_state();
  40253c:	4b0d      	ldr	r3, [pc, #52]	; (402574 <udd_set_address+0x38>)
  40253e:	685a      	ldr	r2, [r3, #4]
  402540:	f022 0201 	bic.w	r2, r2, #1
  402544:	605a      	str	r2, [r3, #4]
	udd_disable_address();
  402546:	689a      	ldr	r2, [r3, #8]
  402548:	f422 7280 	bic.w	r2, r2, #256	; 0x100
  40254c:	609a      	str	r2, [r3, #8]
	if (address) {
  40254e:	4602      	mov	r2, r0
  402550:	b170      	cbz	r0, 402570 <udd_set_address+0x34>
		udd_configure_address(address);
  402552:	6898      	ldr	r0, [r3, #8]
  402554:	f020 007f 	bic.w	r0, r0, #127	; 0x7f
  402558:	f002 027f 	and.w	r2, r2, #127	; 0x7f
  40255c:	4310      	orrs	r0, r2
  40255e:	6098      	str	r0, [r3, #8]
		udd_enable_address();
  402560:	689a      	ldr	r2, [r3, #8]
  402562:	f442 7280 	orr.w	r2, r2, #256	; 0x100
  402566:	609a      	str	r2, [r3, #8]
		udd_enable_address_state();
  402568:	685a      	ldr	r2, [r3, #4]
  40256a:	f042 0201 	orr.w	r2, r2, #1
  40256e:	605a      	str	r2, [r3, #4]
  402570:	4770      	bx	lr
  402572:	bf00      	nop
  402574:	40044000 	.word	0x40044000

00402578 <udd_getaddress>:
	if (Is_udd_address_state_enabled())
  402578:	4b05      	ldr	r3, [pc, #20]	; (402590 <udd_getaddress+0x18>)
  40257a:	685b      	ldr	r3, [r3, #4]
  40257c:	f013 0f01 	tst.w	r3, #1
		return udd_get_configured_address();
  402580:	bf1d      	ittte	ne
  402582:	4b03      	ldrne	r3, [pc, #12]	; (402590 <udd_getaddress+0x18>)
  402584:	6898      	ldrne	r0, [r3, #8]
  402586:	f000 007f 	andne.w	r0, r0, #127	; 0x7f
	return 0;
  40258a:	2000      	moveq	r0, #0
}
  40258c:	4770      	bx	lr
  40258e:	bf00      	nop
  402590:	40044000 	.word	0x40044000

00402594 <udd_get_frame_number>:
	return udd_frame_number();
  402594:	4b02      	ldr	r3, [pc, #8]	; (4025a0 <udd_get_frame_number+0xc>)
  402596:	6818      	ldr	r0, [r3, #0]
}
  402598:	f3c0 000a 	ubfx	r0, r0, #0, #11
  40259c:	4770      	bx	lr
  40259e:	bf00      	nop
  4025a0:	40044000 	.word	0x40044000

004025a4 <udd_get_micro_frame_number>:
}
  4025a4:	2000      	movs	r0, #0
  4025a6:	4770      	bx	lr

004025a8 <udd_set_setup_payload>:
	udd_g_ctrlreq.payload = payload;
  4025a8:	4b01      	ldr	r3, [pc, #4]	; (4025b0 <udd_set_setup_payload+0x8>)
  4025aa:	6098      	str	r0, [r3, #8]
	udd_g_ctrlreq.payload_size = payload_size;
  4025ac:	8199      	strh	r1, [r3, #12]
  4025ae:	4770      	bx	lr
  4025b0:	20000bf4 	.word	0x20000bf4

004025b4 <udd_ep_alloc>:
{
  4025b4:	b5f0      	push	{r4, r5, r6, r7, lr}
  4025b6:	b083      	sub	sp, #12
	ep = ep & USB_EP_ADDR_MASK;
  4025b8:	f000 040f 	and.w	r4, r0, #15
	if (ep > USB_DEVICE_MAX_EP) {
  4025bc:	2c03      	cmp	r4, #3
  4025be:	d867      	bhi.n	402690 <udd_ep_alloc+0xdc>
  4025c0:	00a3      	lsls	r3, r4, #2
  4025c2:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
  4025c6:	f503 2380 	add.w	r3, r3, #262144	; 0x40000
	if (Is_udd_endpoint_enabled(ep)) {
  4025ca:	6b1d      	ldr	r5, [r3, #48]	; 0x30
  4025cc:	f415 4f00 	tst.w	r5, #32768	; 0x8000
  4025d0:	d161      	bne.n	402696 <udd_ep_alloc+0xe2>
	if (b_iso && (!udd_is_endpoint_support_iso(ep))) {
  4025d2:	f001 0503 	and.w	r5, r1, #3
  4025d6:	2d01      	cmp	r5, #1
  4025d8:	d050      	beq.n	40267c <udd_ep_alloc+0xc8>
	if (MaxEndpointSize > udd_get_endpoint_size_max(ep)) {
  4025da:	1f25      	subs	r5, r4, #4
  4025dc:	b2ed      	uxtb	r5, r5
  4025de:	2d02      	cmp	r5, #2
  4025e0:	bf34      	ite	cc
  4025e2:	f44f 7500 	movcc.w	r5, #512	; 0x200
  4025e6:	2540      	movcs	r5, #64	; 0x40
  4025e8:	4295      	cmp	r5, r2
  4025ea:	db58      	blt.n	40269e <udd_ep_alloc+0xea>
  4025ec:	b240      	sxtb	r0, r0
	ptr_job = &udd_ep_job[ep - 1];
  4025ee:	1e66      	subs	r6, r4, #1
	ptr_job->size = MaxEndpointSize;
  4025f0:	eb06 0786 	add.w	r7, r6, r6, lsl #2
  4025f4:	4d2b      	ldr	r5, [pc, #172]	; (4026a4 <udd_ep_alloc+0xf0>)
  4025f6:	eb05 0587 	add.w	r5, r5, r7, lsl #2
  4025fa:	f105 0710 	add.w	r7, r5, #16
  4025fe:	f8b5 e010 	ldrh.w	lr, [r5, #16]
  402602:	f362 0e09 	bfi	lr, r2, #0, #10
  402606:	f8a5 e010 	strh.w	lr, [r5, #16]
	ptr_job->b_buf_end = false;
  40260a:	7c6a      	ldrb	r2, [r5, #17]
	ptr_job->b_stall_requested = false;
  40260c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
  402610:	f36f 1245 	bfc	r2, #5, #1
  402614:	746a      	strb	r2, [r5, #17]
	if (b_dir_in) {
  402616:	2800      	cmp	r0, #0
  402618:	db35      	blt.n	402686 <udd_ep_alloc+0xd2>
	udd_reset_endpoint(ep);
  40261a:	4e23      	ldr	r6, [pc, #140]	; (4026a8 <udd_ep_alloc+0xf4>)
  40261c:	6ab5      	ldr	r5, [r6, #40]	; 0x28
  40261e:	2201      	movs	r2, #1
  402620:	fa02 f404 	lsl.w	r4, r2, r4
  402624:	4325      	orrs	r5, r4
  402626:	62b5      	str	r5, [r6, #40]	; 0x28
  402628:	4635      	mov	r5, r6
  40262a:	6aaa      	ldr	r2, [r5, #40]	; 0x28
  40262c:	4214      	tst	r4, r2
  40262e:	d0fc      	beq.n	40262a <udd_ep_alloc+0x76>
  402630:	4d1d      	ldr	r5, [pc, #116]	; (4026a8 <udd_ep_alloc+0xf4>)
  402632:	6aaa      	ldr	r2, [r5, #40]	; 0x28
  402634:	ea22 0404 	bic.w	r4, r2, r4
  402638:	62ac      	str	r4, [r5, #40]	; 0x28
	udd_configure_endpoint(ep,
  40263a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  40263c:	9201      	str	r2, [sp, #4]
  40263e:	9a01      	ldr	r2, [sp, #4]
  402640:	f042 024f 	orr.w	r2, r2, #79	; 0x4f
  402644:	9201      	str	r2, [sp, #4]
  402646:	9a01      	ldr	r2, [sp, #4]
  402648:	f422 4207 	bic.w	r2, r2, #34560	; 0x8700
  40264c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
  402650:	9201      	str	r2, [sp, #4]
  402652:	2800      	cmp	r0, #0
  402654:	ea4f 2201 	mov.w	r2, r1, lsl #8
  402658:	f402 7240 	and.w	r2, r2, #768	; 0x300
  40265c:	bfb4      	ite	lt
  40265e:	f442 4204 	orrlt.w	r2, r2, #33792	; 0x8400
  402662:	f442 4200 	orrge.w	r2, r2, #32768	; 0x8000
  402666:	9901      	ldr	r1, [sp, #4]
  402668:	4311      	orrs	r1, r2
  40266a:	9101      	str	r1, [sp, #4]
  40266c:	9901      	ldr	r1, [sp, #4]
  40266e:	6319      	str	r1, [r3, #48]	; 0x30
  402670:	6b19      	ldr	r1, [r3, #48]	; 0x30
  402672:	ea32 0101 	bics.w	r1, r2, r1
  402676:	d1fb      	bne.n	402670 <udd_ep_alloc+0xbc>
	return true;
  402678:	2001      	movs	r0, #1
  40267a:	e00a      	b.n	402692 <udd_ep_alloc+0xde>
	if (b_iso && (!udd_is_endpoint_support_iso(ep))) {
  40267c:	b16c      	cbz	r4, 40269a <udd_ep_alloc+0xe6>
  40267e:	2c03      	cmp	r4, #3
  402680:	d1ab      	bne.n	4025da <udd_ep_alloc+0x26>
		return false;
  402682:	2000      	movs	r0, #0
  402684:	e005      	b.n	402692 <udd_ep_alloc+0xde>
		ptr_job->bank = 0;
  402686:	787a      	ldrb	r2, [r7, #1]
  402688:	f36f 0283 	bfc	r2, #2, #2
  40268c:	707a      	strb	r2, [r7, #1]
  40268e:	e7c4      	b.n	40261a <udd_ep_alloc+0x66>
		return false;
  402690:	2000      	movs	r0, #0
}
  402692:	b003      	add	sp, #12
  402694:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return false;
  402696:	2000      	movs	r0, #0
  402698:	e7fb      	b.n	402692 <udd_ep_alloc+0xde>
		return false;
  40269a:	2000      	movs	r0, #0
  40269c:	e7f9      	b.n	402692 <udd_ep_alloc+0xde>
		return false;
  40269e:	2000      	movs	r0, #0
  4026a0:	e7f7      	b.n	402692 <udd_ep_alloc+0xde>
  4026a2:	bf00      	nop
  4026a4:	20000b48 	.word	0x20000b48
  4026a8:	40044000 	.word	0x40044000

004026ac <udd_ep_free>:
	uint8_t ep_index = ep & USB_EP_ADDR_MASK;
  4026ac:	f000 020f 	and.w	r2, r0, #15
	if (USB_DEVICE_MAX_EP < ep_index) {
  4026b0:	2a03      	cmp	r2, #3
  4026b2:	d822      	bhi.n	4026fa <udd_ep_free+0x4e>
{
  4026b4:	b500      	push	{lr}
  4026b6:	b083      	sub	sp, #12
  4026b8:	0091      	lsls	r1, r2, #2
  4026ba:	f101 2140 	add.w	r1, r1, #1073758208	; 0x40004000
  4026be:	f501 2180 	add.w	r1, r1, #262144	; 0x40000
	udd_disable_endpoint(ep_index);
  4026c2:	6b0b      	ldr	r3, [r1, #48]	; 0x30
  4026c4:	9301      	str	r3, [sp, #4]
  4026c6:	9b01      	ldr	r3, [sp, #4]
  4026c8:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  4026cc:	9301      	str	r3, [sp, #4]
  4026ce:	9b01      	ldr	r3, [sp, #4]
  4026d0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
  4026d4:	9301      	str	r3, [sp, #4]
  4026d6:	9b01      	ldr	r3, [sp, #4]
  4026d8:	630b      	str	r3, [r1, #48]	; 0x30
  4026da:	6b0b      	ldr	r3, [r1, #48]	; 0x30
  4026dc:	f413 4f00 	tst.w	r3, #32768	; 0x8000
  4026e0:	d1fb      	bne.n	4026da <udd_ep_free+0x2e>
	udd_ep_finish_job(&udd_ep_job[ep - 1], UDD_EP_TRANSFER_ABORT, ep);
  4026e2:	1e50      	subs	r0, r2, #1
  4026e4:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  4026e8:	2101      	movs	r1, #1
  4026ea:	4b04      	ldr	r3, [pc, #16]	; (4026fc <udd_ep_free+0x50>)
  4026ec:	eb03 0080 	add.w	r0, r3, r0, lsl #2
  4026f0:	4b03      	ldr	r3, [pc, #12]	; (402700 <udd_ep_free+0x54>)
  4026f2:	4798      	blx	r3
}
  4026f4:	b003      	add	sp, #12
  4026f6:	f85d fb04 	ldr.w	pc, [sp], #4
  4026fa:	4770      	bx	lr
  4026fc:	20000b48 	.word	0x20000b48
  402700:	0040182d 	.word	0x0040182d

00402704 <udd_ep_is_halted>:
	uint8_t ep_index = ep & USB_EP_ADDR_MASK;
  402704:	f000 000f 	and.w	r0, r0, #15
	if (USB_DEVICE_MAX_EP < ep_index) {
  402708:	2803      	cmp	r0, #3
  40270a:	d815      	bhi.n	402738 <udd_ep_is_halted+0x34>
	return ptr_job->b_stall_requested ||
  40270c:	1e43      	subs	r3, r0, #1
  40270e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  402712:	4a0a      	ldr	r2, [pc, #40]	; (40273c <udd_ep_is_halted+0x38>)
  402714:	eb02 0383 	add.w	r3, r2, r3, lsl #2
  402718:	7c5b      	ldrb	r3, [r3, #17]
  40271a:	f013 0f20 	tst.w	r3, #32
  40271e:	d109      	bne.n	402734 <udd_ep_is_halted+0x30>
			Is_udd_endpoint_stall_pending(ep & USB_EP_ADDR_MASK);
  402720:	300c      	adds	r0, #12
  402722:	4b07      	ldr	r3, [pc, #28]	; (402740 <udd_ep_is_halted+0x3c>)
  402724:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
	return ptr_job->b_stall_requested ||
  402728:	f013 0f28 	tst.w	r3, #40	; 0x28
  40272c:	bf14      	ite	ne
  40272e:	2001      	movne	r0, #1
  402730:	2000      	moveq	r0, #0
  402732:	4770      	bx	lr
  402734:	2001      	movs	r0, #1
  402736:	4770      	bx	lr
		return false;
  402738:	2000      	movs	r0, #0
}
  40273a:	4770      	bx	lr
  40273c:	20000b48 	.word	0x20000b48
  402740:	40044000 	.word	0x40044000

00402744 <udd_ep_set_halt>:
	uint8_t ep_index = ep & USB_EP_ADDR_MASK;
  402744:	f000 010f 	and.w	r1, r0, #15
	if (USB_DEVICE_MAX_EP < ep_index) {
  402748:	2903      	cmp	r1, #3
  40274a:	d860      	bhi.n	40280e <udd_ep_set_halt+0xca>
{
  40274c:	b410      	push	{r4}
  40274e:	b083      	sub	sp, #12
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  402750:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
  402754:	fab3 f383 	clz	r3, r3
  402758:	095b      	lsrs	r3, r3, #5
  40275a:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
  40275c:	b672      	cpsid	i
  40275e:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  402762:	2200      	movs	r2, #0
  402764:	4b2d      	ldr	r3, [pc, #180]	; (40281c <udd_ep_set_halt+0xd8>)
  402766:	701a      	strb	r2, [r3, #0]
	return flags;
  402768:	9c01      	ldr	r4, [sp, #4]
	if (b_dir_in && (Is_udd_transmit_ready(ep_index)
  40276a:	f010 0f80 	tst.w	r0, #128	; 0x80
  40276e:	d125      	bne.n	4027bc <udd_ep_set_halt+0x78>
  402770:	008a      	lsls	r2, r1, #2
  402772:	f102 2240 	add.w	r2, r2, #1073758208	; 0x40004000
  402776:	f502 2280 	add.w	r2, r2, #262144	; 0x40000
		udd_enable_stall_handshake(ep_index);
  40277a:	6b13      	ldr	r3, [r2, #48]	; 0x30
  40277c:	9300      	str	r3, [sp, #0]
  40277e:	9b00      	ldr	r3, [sp, #0]
  402780:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  402784:	9300      	str	r3, [sp, #0]
  402786:	9b00      	ldr	r3, [sp, #0]
  402788:	f043 0320 	orr.w	r3, r3, #32
  40278c:	9300      	str	r3, [sp, #0]
  40278e:	9b00      	ldr	r3, [sp, #0]
  402790:	6313      	str	r3, [r2, #48]	; 0x30
  402792:	6b13      	ldr	r3, [r2, #48]	; 0x30
  402794:	f013 0f20 	tst.w	r3, #32
  402798:	d0fb      	beq.n	402792 <udd_ep_set_halt+0x4e>
		udd_enable_endpoint_interrupt(ep_index);
  40279a:	2301      	movs	r3, #1
  40279c:	fa03 f101 	lsl.w	r1, r3, r1
  4027a0:	4b1f      	ldr	r3, [pc, #124]	; (402820 <udd_ep_set_halt+0xdc>)
  4027a2:	6119      	str	r1, [r3, #16]
	if (cpu_irq_is_enabled_flags(flags))
  4027a4:	2c00      	cmp	r4, #0
  4027a6:	d036      	beq.n	402816 <udd_ep_set_halt+0xd2>
		cpu_irq_enable();
  4027a8:	2001      	movs	r0, #1
  4027aa:	4b1c      	ldr	r3, [pc, #112]	; (40281c <udd_ep_set_halt+0xd8>)
  4027ac:	7018      	strb	r0, [r3, #0]
  4027ae:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  4027b2:	b662      	cpsie	i
}
  4027b4:	b003      	add	sp, #12
  4027b6:	f85d 4b04 	ldr.w	r4, [sp], #4
  4027ba:	4770      	bx	lr
	udd_ep_job_t *ptr_job = &udd_ep_job[ep_index - 1];
  4027bc:	1e4b      	subs	r3, r1, #1
	if (b_dir_in && (Is_udd_transmit_ready(ep_index)
  4027be:	f101 020c 	add.w	r2, r1, #12
  4027c2:	4817      	ldr	r0, [pc, #92]	; (402820 <udd_ep_set_halt+0xdc>)
  4027c4:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
  4027c8:	f012 0f10 	tst.w	r2, #16
  4027cc:	d109      	bne.n	4027e2 <udd_ep_set_halt+0x9e>
				|| ptr_job->bank > 1)) {
  4027ce:	eb03 0283 	add.w	r2, r3, r3, lsl #2
  4027d2:	4814      	ldr	r0, [pc, #80]	; (402824 <udd_ep_set_halt+0xe0>)
  4027d4:	eb00 0282 	add.w	r2, r0, r2, lsl #2
  4027d8:	7c52      	ldrb	r2, [r2, #17]
  4027da:	f3c2 0281 	ubfx	r2, r2, #2, #2
  4027de:	2a01      	cmp	r2, #1
  4027e0:	ddc6      	ble.n	402770 <udd_ep_set_halt+0x2c>
		ptr_job->b_stall_requested = true;
  4027e2:	eb03 0283 	add.w	r2, r3, r3, lsl #2
  4027e6:	4b0f      	ldr	r3, [pc, #60]	; (402824 <udd_ep_set_halt+0xe0>)
  4027e8:	eb03 0382 	add.w	r3, r3, r2, lsl #2
  4027ec:	7c5a      	ldrb	r2, [r3, #17]
  4027ee:	f042 0220 	orr.w	r2, r2, #32
  4027f2:	745a      	strb	r2, [r3, #17]
		udd_enable_endpoint_interrupt(ep_index);
  4027f4:	2301      	movs	r3, #1
  4027f6:	fa03 f101 	lsl.w	r1, r3, r1
  4027fa:	4b09      	ldr	r3, [pc, #36]	; (402820 <udd_ep_set_halt+0xdc>)
  4027fc:	6119      	str	r1, [r3, #16]
	if (cpu_irq_is_enabled_flags(flags))
  4027fe:	b144      	cbz	r4, 402812 <udd_ep_set_halt+0xce>
		cpu_irq_enable();
  402800:	2001      	movs	r0, #1
  402802:	4b06      	ldr	r3, [pc, #24]	; (40281c <udd_ep_set_halt+0xd8>)
  402804:	7018      	strb	r0, [r3, #0]
  402806:	f3bf 8f5f 	dmb	sy
  40280a:	b662      	cpsie	i
  40280c:	e7d2      	b.n	4027b4 <udd_ep_set_halt+0x70>
		return false;
  40280e:	2000      	movs	r0, #0
  402810:	4770      	bx	lr
		return true;
  402812:	2001      	movs	r0, #1
  402814:	e7ce      	b.n	4027b4 <udd_ep_set_halt+0x70>
	return true;
  402816:	2001      	movs	r0, #1
  402818:	e7cc      	b.n	4027b4 <udd_ep_set_halt+0x70>
  40281a:	bf00      	nop
  40281c:	20000520 	.word	0x20000520
  402820:	40044000 	.word	0x40044000
  402824:	20000b48 	.word	0x20000b48

00402828 <udd_ep_clear_halt>:
	ep &= USB_EP_ADDR_MASK;
  402828:	f000 000f 	and.w	r0, r0, #15
	if (USB_DEVICE_MAX_EP < ep)
  40282c:	2803      	cmp	r0, #3
  40282e:	d85e      	bhi.n	4028ee <udd_ep_clear_halt+0xc6>
{
  402830:	b530      	push	{r4, r5, lr}
  402832:	b083      	sub	sp, #12
	ptr_job = &udd_ep_job[ep - 1];
  402834:	1e44      	subs	r4, r0, #1
	ptr_job->b_stall_requested = false;
  402836:	eb04 0284 	add.w	r2, r4, r4, lsl #2
  40283a:	4b2f      	ldr	r3, [pc, #188]	; (4028f8 <udd_ep_clear_halt+0xd0>)
  40283c:	eb03 0382 	add.w	r3, r3, r2, lsl #2
  402840:	7c5a      	ldrb	r2, [r3, #17]
  402842:	f36f 1245 	bfc	r2, #5, #1
  402846:	745a      	strb	r2, [r3, #17]
  402848:	0083      	lsls	r3, r0, #2
  40284a:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
  40284e:	f503 2380 	add.w	r3, r3, #262144	; 0x40000
	if (Is_udd_endpoint_stall_requested(ep)) {
  402852:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  402854:	f012 0f20 	tst.w	r2, #32
  402858:	d04b      	beq.n	4028f2 <udd_ep_clear_halt+0xca>
		udd_disable_stall_handshake(ep);
  40285a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  40285c:	9200      	str	r2, [sp, #0]
  40285e:	9a00      	ldr	r2, [sp, #0]
  402860:	f042 024f 	orr.w	r2, r2, #79	; 0x4f
  402864:	9200      	str	r2, [sp, #0]
  402866:	9a00      	ldr	r2, [sp, #0]
  402868:	f022 0220 	bic.w	r2, r2, #32
  40286c:	9200      	str	r2, [sp, #0]
  40286e:	9a00      	ldr	r2, [sp, #0]
  402870:	631a      	str	r2, [r3, #48]	; 0x30
  402872:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  402874:	f012 0f20 	tst.w	r2, #32
  402878:	d1fb      	bne.n	402872 <udd_ep_clear_halt+0x4a>
		udd_reset_endpoint(ep);
  40287a:	4d20      	ldr	r5, [pc, #128]	; (4028fc <udd_ep_clear_halt+0xd4>)
  40287c:	6aa9      	ldr	r1, [r5, #40]	; 0x28
  40287e:	2201      	movs	r2, #1
  402880:	fa02 f000 	lsl.w	r0, r2, r0
  402884:	4301      	orrs	r1, r0
  402886:	62a9      	str	r1, [r5, #40]	; 0x28
  402888:	4629      	mov	r1, r5
  40288a:	6a8a      	ldr	r2, [r1, #40]	; 0x28
  40288c:	4210      	tst	r0, r2
  40288e:	d0fc      	beq.n	40288a <udd_ep_clear_halt+0x62>
  402890:	491a      	ldr	r1, [pc, #104]	; (4028fc <udd_ep_clear_halt+0xd4>)
  402892:	6a8a      	ldr	r2, [r1, #40]	; 0x28
  402894:	ea22 0000 	bic.w	r0, r2, r0
  402898:	6288      	str	r0, [r1, #40]	; 0x28
		udd_ack_stall(ep);
  40289a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  40289c:	9201      	str	r2, [sp, #4]
  40289e:	9a01      	ldr	r2, [sp, #4]
  4028a0:	f042 024f 	orr.w	r2, r2, #79	; 0x4f
  4028a4:	9201      	str	r2, [sp, #4]
  4028a6:	9a01      	ldr	r2, [sp, #4]
  4028a8:	f022 0208 	bic.w	r2, r2, #8
  4028ac:	9201      	str	r2, [sp, #4]
  4028ae:	9a01      	ldr	r2, [sp, #4]
  4028b0:	631a      	str	r2, [r3, #48]	; 0x30
  4028b2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  4028b4:	f012 0f08 	tst.w	r2, #8
  4028b8:	d1fb      	bne.n	4028b2 <udd_ep_clear_halt+0x8a>
		if (ptr_job->busy == true) {
  4028ba:	eb04 0384 	add.w	r3, r4, r4, lsl #2
  4028be:	4a0e      	ldr	r2, [pc, #56]	; (4028f8 <udd_ep_clear_halt+0xd0>)
  4028c0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
  4028c4:	7c5b      	ldrb	r3, [r3, #17]
  4028c6:	f013 0f10 	tst.w	r3, #16
  4028ca:	d101      	bne.n	4028d0 <udd_ep_clear_halt+0xa8>
	return true;
  4028cc:	2001      	movs	r0, #1
  4028ce:	e011      	b.n	4028f4 <udd_ep_clear_halt+0xcc>
			ptr_job->busy = false;
  4028d0:	4611      	mov	r1, r2
  4028d2:	00a2      	lsls	r2, r4, #2
  4028d4:	1913      	adds	r3, r2, r4
  4028d6:	eb01 0383 	add.w	r3, r1, r3, lsl #2
  4028da:	7c58      	ldrb	r0, [r3, #17]
  4028dc:	f36f 1004 	bfc	r0, #4, #1
  4028e0:	7458      	strb	r0, [r3, #17]
			ptr_job->call_nohalt();
  4028e2:	4414      	add	r4, r2
  4028e4:	f851 3024 	ldr.w	r3, [r1, r4, lsl #2]
  4028e8:	4798      	blx	r3
	return true;
  4028ea:	2001      	movs	r0, #1
  4028ec:	e002      	b.n	4028f4 <udd_ep_clear_halt+0xcc>
		return false;
  4028ee:	2000      	movs	r0, #0
  4028f0:	4770      	bx	lr
	return true;
  4028f2:	2001      	movs	r0, #1
}
  4028f4:	b003      	add	sp, #12
  4028f6:	bd30      	pop	{r4, r5, pc}
  4028f8:	20000b48 	.word	0x20000b48
  4028fc:	40044000 	.word	0x40044000

00402900 <udd_ep_run>:
{
  402900:	b5f0      	push	{r4, r5, r6, r7, lr}
  402902:	b083      	sub	sp, #12
	ep &= USB_EP_ADDR_MASK;
  402904:	f000 070f 	and.w	r7, r0, #15
	if (USB_DEVICE_MAX_EP < ep) {
  402908:	2f03      	cmp	r7, #3
  40290a:	f200 80a2 	bhi.w	402a52 <udd_ep_run+0x152>
  40290e:	00bc      	lsls	r4, r7, #2
  402910:	f104 2440 	add.w	r4, r4, #1073758208	; 0x40004000
  402914:	f504 2480 	add.w	r4, r4, #262144	; 0x40000
	if ((!Is_udd_endpoint_enabled(ep))
  402918:	6b25      	ldr	r5, [r4, #48]	; 0x30
  40291a:	f415 4f00 	tst.w	r5, #32768	; 0x8000
  40291e:	f000 809b 	beq.w	402a58 <udd_ep_run+0x158>
	ptr_job = &udd_ep_job[ep - 1];
  402922:	1e7d      	subs	r5, r7, #1
			|| ptr_job->b_stall_requested
  402924:	eb05 0e85 	add.w	lr, r5, r5, lsl #2
  402928:	4e50      	ldr	r6, [pc, #320]	; (402a6c <udd_ep_run+0x16c>)
  40292a:	eb06 068e 	add.w	r6, r6, lr, lsl #2
  40292e:	7c76      	ldrb	r6, [r6, #17]
  402930:	f016 0f20 	tst.w	r6, #32
  402934:	f040 8092 	bne.w	402a5c <udd_ep_run+0x15c>
			|| Is_udd_endpoint_stall_requested(ep)) {
  402938:	6b26      	ldr	r6, [r4, #48]	; 0x30
  40293a:	f016 0f20 	tst.w	r6, #32
  40293e:	f040 808f 	bne.w	402a60 <udd_ep_run+0x160>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  402942:	f3ef 8610 	mrs	r6, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
  402946:	fab6 f686 	clz	r6, r6
  40294a:	0976      	lsrs	r6, r6, #5
  40294c:	9600      	str	r6, [sp, #0]
  __ASM volatile ("cpsid i" : : : "memory");
  40294e:	b672      	cpsid	i
  402950:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  402954:	f04f 0e00 	mov.w	lr, #0
  402958:	4e45      	ldr	r6, [pc, #276]	; (402a70 <udd_ep_run+0x170>)
  40295a:	f886 e000 	strb.w	lr, [r6]
	return flags;
  40295e:	f8dd c000 	ldr.w	ip, [sp]
	if (ptr_job->busy == true) {
  402962:	eb05 0e85 	add.w	lr, r5, r5, lsl #2
  402966:	4e41      	ldr	r6, [pc, #260]	; (402a6c <udd_ep_run+0x16c>)
  402968:	eb06 068e 	add.w	r6, r6, lr, lsl #2
  40296c:	7c76      	ldrb	r6, [r6, #17]
  40296e:	f016 0f10 	tst.w	r6, #16
  402972:	d00a      	beq.n	40298a <udd_ep_run+0x8a>
	if (cpu_irq_is_enabled_flags(flags))
  402974:	f1bc 0f00 	cmp.w	ip, #0
  402978:	d074      	beq.n	402a64 <udd_ep_run+0x164>
		cpu_irq_enable();
  40297a:	2201      	movs	r2, #1
  40297c:	4b3c      	ldr	r3, [pc, #240]	; (402a70 <udd_ep_run+0x170>)
  40297e:	701a      	strb	r2, [r3, #0]
  402980:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  402984:	b662      	cpsie	i
		return false; // Job already on going
  402986:	2000      	movs	r0, #0
  402988:	e064      	b.n	402a54 <udd_ep_run+0x154>
	ptr_job->busy = true;
  40298a:	eb05 0e85 	add.w	lr, r5, r5, lsl #2
  40298e:	4e37      	ldr	r6, [pc, #220]	; (402a6c <udd_ep_run+0x16c>)
  402990:	eb06 068e 	add.w	r6, r6, lr, lsl #2
  402994:	f896 e011 	ldrb.w	lr, [r6, #17]
  402998:	f04e 0e10 	orr.w	lr, lr, #16
  40299c:	f886 e011 	strb.w	lr, [r6, #17]
	if (cpu_irq_is_enabled_flags(flags))
  4029a0:	f1bc 0f00 	cmp.w	ip, #0
  4029a4:	d007      	beq.n	4029b6 <udd_ep_run+0xb6>
		cpu_irq_enable();
  4029a6:	f04f 0e01 	mov.w	lr, #1
  4029aa:	4e31      	ldr	r6, [pc, #196]	; (402a70 <udd_ep_run+0x170>)
  4029ac:	f886 e000 	strb.w	lr, [r6]
  4029b0:	f3bf 8f5f 	dmb	sy
  4029b4:	b662      	cpsie	i
	ptr_job->buf = buf;
  4029b6:	f8df c0b4 	ldr.w	ip, [pc, #180]	; 402a6c <udd_ep_run+0x16c>
  4029ba:	eb05 0685 	add.w	r6, r5, r5, lsl #2
  4029be:	00b6      	lsls	r6, r6, #2
  4029c0:	eb0c 0e06 	add.w	lr, ip, r6
  4029c4:	f8ce 2004 	str.w	r2, [lr, #4]
	ptr_job->buf_size = buf_size;
  4029c8:	f8ce 3008 	str.w	r3, [lr, #8]
	ptr_job->buf_cnt = 0;
  4029cc:	2200      	movs	r2, #0
  4029ce:	f8ce 200c 	str.w	r2, [lr, #12]
	ptr_job->call_trans = callback;
  4029d2:	9a08      	ldr	r2, [sp, #32]
  4029d4:	f84c 2006 	str.w	r2, [ip, r6]
	ptr_job->b_shortpacket = b_shortpacket || (buf_size == 0);
  4029d8:	b911      	cbnz	r1, 4029e0 <udd_ep_run+0xe0>
  4029da:	fab3 f183 	clz	r1, r3
  4029de:	0949      	lsrs	r1, r1, #5
  4029e0:	4a22      	ldr	r2, [pc, #136]	; (402a6c <udd_ep_run+0x16c>)
  4029e2:	00ae      	lsls	r6, r5, #2
  4029e4:	1973      	adds	r3, r6, r5
  4029e6:	eb02 0383 	add.w	r3, r2, r3, lsl #2
  4029ea:	7c5b      	ldrb	r3, [r3, #17]
  4029ec:	f361 1386 	bfi	r3, r1, #6, #1
	ptr_job->b_buf_end = false;
  4029f0:	4435      	add	r5, r6
  4029f2:	eb02 0285 	add.w	r2, r2, r5, lsl #2
  4029f6:	f36f 13c7 	bfc	r3, #7, #1
  4029fa:	7453      	strb	r3, [r2, #17]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  4029fc:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
  402a00:	fab3 f383 	clz	r3, r3
  402a04:	095b      	lsrs	r3, r3, #5
  402a06:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
  402a08:	b672      	cpsid	i
  402a0a:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  402a0e:	2200      	movs	r2, #0
  402a10:	4b17      	ldr	r3, [pc, #92]	; (402a70 <udd_ep_run+0x170>)
  402a12:	701a      	strb	r2, [r3, #0]
	return flags;
  402a14:	9d01      	ldr	r5, [sp, #4]
	udd_enable_endpoint_interrupt(ep);
  402a16:	2301      	movs	r3, #1
  402a18:	40bb      	lsls	r3, r7
  402a1a:	4a16      	ldr	r2, [pc, #88]	; (402a74 <udd_ep_run+0x174>)
  402a1c:	6113      	str	r3, [r2, #16]
	if (b_dir_in) {
  402a1e:	f010 0f80 	tst.w	r0, #128	; 0x80
  402a22:	d107      	bne.n	402a34 <udd_ep_run+0x134>
	if (cpu_irq_is_enabled_flags(flags))
  402a24:	b305      	cbz	r5, 402a68 <udd_ep_run+0x168>
		cpu_irq_enable();
  402a26:	2001      	movs	r0, #1
  402a28:	4b11      	ldr	r3, [pc, #68]	; (402a70 <udd_ep_run+0x170>)
  402a2a:	7018      	strb	r0, [r3, #0]
  402a2c:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  402a30:	b662      	cpsie	i
  402a32:	e00f      	b.n	402a54 <udd_ep_run+0x154>
		if (Is_udd_in_pending(ep)) {
  402a34:	6b23      	ldr	r3, [r4, #48]	; 0x30
  402a36:	f013 0f11 	tst.w	r3, #17
  402a3a:	d1f3      	bne.n	402a24 <udd_ep_run+0x124>
			if (udd_ep_in_sent(ep, true)) {
  402a3c:	2101      	movs	r1, #1
  402a3e:	4638      	mov	r0, r7
  402a40:	4b0d      	ldr	r3, [pc, #52]	; (402a78 <udd_ep_run+0x178>)
  402a42:	4798      	blx	r3
  402a44:	2800      	cmp	r0, #0
  402a46:	d0ed      	beq.n	402a24 <udd_ep_run+0x124>
				udd_ep_in_sent(ep, false);
  402a48:	2100      	movs	r1, #0
  402a4a:	4638      	mov	r0, r7
  402a4c:	4b0a      	ldr	r3, [pc, #40]	; (402a78 <udd_ep_run+0x178>)
  402a4e:	4798      	blx	r3
  402a50:	e7e8      	b.n	402a24 <udd_ep_run+0x124>
		return false;
  402a52:	2000      	movs	r0, #0
}
  402a54:	b003      	add	sp, #12
  402a56:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return false; // Endpoint is halted
  402a58:	2000      	movs	r0, #0
  402a5a:	e7fb      	b.n	402a54 <udd_ep_run+0x154>
  402a5c:	2000      	movs	r0, #0
  402a5e:	e7f9      	b.n	402a54 <udd_ep_run+0x154>
  402a60:	2000      	movs	r0, #0
  402a62:	e7f7      	b.n	402a54 <udd_ep_run+0x154>
		return false; // Job already on going
  402a64:	2000      	movs	r0, #0
  402a66:	e7f5      	b.n	402a54 <udd_ep_run+0x154>
	return true;
  402a68:	2001      	movs	r0, #1
  402a6a:	e7f3      	b.n	402a54 <udd_ep_run+0x154>
  402a6c:	20000b48 	.word	0x20000b48
  402a70:	20000520 	.word	0x20000520
  402a74:	40044000 	.word	0x40044000
  402a78:	00401941 	.word	0x00401941

00402a7c <udd_ep_abort>:
{
  402a7c:	b5f0      	push	{r4, r5, r6, r7, lr}
  402a7e:	b087      	sub	sp, #28
	ep &= USB_EP_ADDR_MASK;
  402a80:	f000 050f 	and.w	r5, r0, #15
	if (USB_DEVICE_MAX_EP < ep)
  402a84:	2d03      	cmp	r5, #3
  402a86:	d840      	bhi.n	402b0a <udd_ep_abort+0x8e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  402a88:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
  402a8c:	fab3 f383 	clz	r3, r3
  402a90:	095b      	lsrs	r3, r3, #5
  402a92:	9305      	str	r3, [sp, #20]
  __ASM volatile ("cpsid i" : : : "memory");
  402a94:	b672      	cpsid	i
  402a96:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  402a9a:	2200      	movs	r2, #0
  402a9c:	4b4b      	ldr	r3, [pc, #300]	; (402bcc <udd_ep_abort+0x150>)
  402a9e:	701a      	strb	r2, [r3, #0]
	return flags;
  402aa0:	9b05      	ldr	r3, [sp, #20]
	udd_disable_endpoint_interrupt(ep);
  402aa2:	2401      	movs	r4, #1
  402aa4:	40ac      	lsls	r4, r5
  402aa6:	4a4a      	ldr	r2, [pc, #296]	; (402bd0 <udd_ep_abort+0x154>)
  402aa8:	6154      	str	r4, [r2, #20]
	if (cpu_irq_is_enabled_flags(flags))
  402aaa:	b12b      	cbz	r3, 402ab8 <udd_ep_abort+0x3c>
		cpu_irq_enable();
  402aac:	2201      	movs	r2, #1
  402aae:	4b47      	ldr	r3, [pc, #284]	; (402bcc <udd_ep_abort+0x150>)
  402ab0:	701a      	strb	r2, [r3, #0]
  402ab2:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  402ab6:	b662      	cpsie	i
	if (b_dir_in) {
  402ab8:	f010 0f80 	tst.w	r0, #128	; 0x80
  402abc:	d127      	bne.n	402b0e <udd_ep_abort+0x92>
  402abe:	00ae      	lsls	r6, r5, #2
  402ac0:	f106 2640 	add.w	r6, r6, #1073758208	; 0x40004000
  402ac4:	f506 2680 	add.w	r6, r6, #262144	; 0x40000
		while(Is_udd_any_bank_received(ep)) {
  402ac8:	6b33      	ldr	r3, [r6, #48]	; 0x30
  402aca:	f013 0f42 	tst.w	r3, #66	; 0x42
  402ace:	d006      	beq.n	402ade <udd_ep_abort+0x62>
			udd_ep_ack_out_received(ep);
  402ad0:	4f40      	ldr	r7, [pc, #256]	; (402bd4 <udd_ep_abort+0x158>)
  402ad2:	4628      	mov	r0, r5
  402ad4:	47b8      	blx	r7
		while(Is_udd_any_bank_received(ep)) {
  402ad6:	6b33      	ldr	r3, [r6, #48]	; 0x30
  402ad8:	f013 0f42 	tst.w	r3, #66	; 0x42
  402adc:	d1f9      	bne.n	402ad2 <udd_ep_abort+0x56>
	udd_reset_endpoint(ep);
  402ade:	4a3c      	ldr	r2, [pc, #240]	; (402bd0 <udd_ep_abort+0x154>)
  402ae0:	6a93      	ldr	r3, [r2, #40]	; 0x28
  402ae2:	4323      	orrs	r3, r4
  402ae4:	6293      	str	r3, [r2, #40]	; 0x28
  402ae6:	6a93      	ldr	r3, [r2, #40]	; 0x28
  402ae8:	421c      	tst	r4, r3
  402aea:	d0fc      	beq.n	402ae6 <udd_ep_abort+0x6a>
  402aec:	4a38      	ldr	r2, [pc, #224]	; (402bd0 <udd_ep_abort+0x154>)
  402aee:	6a93      	ldr	r3, [r2, #40]	; 0x28
  402af0:	ea23 0404 	bic.w	r4, r3, r4
  402af4:	6294      	str	r4, [r2, #40]	; 0x28
	udd_ep_finish_job(&udd_ep_job[ep - 1], UDD_EP_TRANSFER_ABORT, ep);
  402af6:	1e68      	subs	r0, r5, #1
  402af8:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  402afc:	462a      	mov	r2, r5
  402afe:	2101      	movs	r1, #1
  402b00:	4b35      	ldr	r3, [pc, #212]	; (402bd8 <udd_ep_abort+0x15c>)
  402b02:	eb03 0080 	add.w	r0, r3, r0, lsl #2
  402b06:	4b35      	ldr	r3, [pc, #212]	; (402bdc <udd_ep_abort+0x160>)
  402b08:	4798      	blx	r3
}
  402b0a:	b007      	add	sp, #28
  402b0c:	bdf0      	pop	{r4, r5, r6, r7, pc}
  402b0e:	00ab      	lsls	r3, r5, #2
  402b10:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
  402b14:	f503 2380 	add.w	r3, r3, #262144	; 0x40000
		if (Is_udd_transmit_ready(ep)) {
  402b18:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  402b1a:	f012 0f10 	tst.w	r2, #16
  402b1e:	d03a      	beq.n	402b96 <udd_ep_abort+0x11a>
			udd_kill_data_in_fifo(ep,
  402b20:	b34d      	cbz	r5, 402b76 <udd_ep_abort+0xfa>
  402b22:	2d03      	cmp	r5, #3
  402b24:	d027      	beq.n	402b76 <udd_ep_abort+0xfa>
  402b26:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  402b28:	9201      	str	r2, [sp, #4]
  402b2a:	9a01      	ldr	r2, [sp, #4]
  402b2c:	f042 024f 	orr.w	r2, r2, #79	; 0x4f
  402b30:	9201      	str	r2, [sp, #4]
  402b32:	9a01      	ldr	r2, [sp, #4]
  402b34:	f022 0210 	bic.w	r2, r2, #16
  402b38:	9201      	str	r2, [sp, #4]
  402b3a:	9a01      	ldr	r2, [sp, #4]
  402b3c:	631a      	str	r2, [r3, #48]	; 0x30
  402b3e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  402b40:	f012 0f10 	tst.w	r2, #16
  402b44:	d1fb      	bne.n	402b3e <udd_ep_abort+0xc2>
  402b46:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  402b48:	f012 0f10 	tst.w	r2, #16
  402b4c:	d1fb      	bne.n	402b46 <udd_ep_abort+0xca>
  402b4e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  402b50:	9202      	str	r2, [sp, #8]
  402b52:	9a02      	ldr	r2, [sp, #8]
  402b54:	f042 024f 	orr.w	r2, r2, #79	; 0x4f
  402b58:	9202      	str	r2, [sp, #8]
  402b5a:	9a02      	ldr	r2, [sp, #8]
  402b5c:	f042 0210 	orr.w	r2, r2, #16
  402b60:	9202      	str	r2, [sp, #8]
  402b62:	9a02      	ldr	r2, [sp, #8]
  402b64:	631a      	str	r2, [r3, #48]	; 0x30
  402b66:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  402b68:	f012 0f10 	tst.w	r2, #16
  402b6c:	d0fb      	beq.n	402b66 <udd_ep_abort+0xea>
  402b6e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  402b70:	f012 0f10 	tst.w	r2, #16
  402b74:	d0fb      	beq.n	402b6e <udd_ep_abort+0xf2>
  402b76:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  402b78:	9203      	str	r2, [sp, #12]
  402b7a:	9a03      	ldr	r2, [sp, #12]
  402b7c:	f042 024f 	orr.w	r2, r2, #79	; 0x4f
  402b80:	9203      	str	r2, [sp, #12]
  402b82:	9a03      	ldr	r2, [sp, #12]
  402b84:	f022 0210 	bic.w	r2, r2, #16
  402b88:	9203      	str	r2, [sp, #12]
  402b8a:	9a03      	ldr	r2, [sp, #12]
  402b8c:	631a      	str	r2, [r3, #48]	; 0x30
  402b8e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  402b90:	f012 0f10 	tst.w	r2, #16
  402b94:	d1fb      	bne.n	402b8e <udd_ep_abort+0x112>
		udd_ack_in_sent(ep);
  402b96:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  402b98:	9204      	str	r2, [sp, #16]
  402b9a:	9a04      	ldr	r2, [sp, #16]
  402b9c:	f042 024f 	orr.w	r2, r2, #79	; 0x4f
  402ba0:	9204      	str	r2, [sp, #16]
  402ba2:	9a04      	ldr	r2, [sp, #16]
  402ba4:	f022 0201 	bic.w	r2, r2, #1
  402ba8:	9204      	str	r2, [sp, #16]
  402baa:	9a04      	ldr	r2, [sp, #16]
  402bac:	631a      	str	r2, [r3, #48]	; 0x30
  402bae:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  402bb0:	f012 0f01 	tst.w	r2, #1
  402bb4:	d1fb      	bne.n	402bae <udd_ep_abort+0x132>
		udd_ep_job[ep - 1].bank = 0;
  402bb6:	1e6b      	subs	r3, r5, #1
  402bb8:	eb03 0283 	add.w	r2, r3, r3, lsl #2
  402bbc:	4b06      	ldr	r3, [pc, #24]	; (402bd8 <udd_ep_abort+0x15c>)
  402bbe:	eb03 0382 	add.w	r3, r3, r2, lsl #2
  402bc2:	7c5a      	ldrb	r2, [r3, #17]
  402bc4:	f36f 0283 	bfc	r2, #2, #2
  402bc8:	745a      	strb	r2, [r3, #17]
  402bca:	e788      	b.n	402ade <udd_ep_abort+0x62>
  402bcc:	20000520 	.word	0x20000520
  402bd0:	40044000 	.word	0x40044000
  402bd4:	0040186d 	.word	0x0040186d
  402bd8:	20000b48 	.word	0x20000b48
  402bdc:	0040182d 	.word	0x0040182d

00402be0 <usart_disable_tx>:
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_disable_tx(Usart *p_usart)
{
	p_usart->US_CR = US_CR_TXDIS;
  402be0:	2380      	movs	r3, #128	; 0x80
  402be2:	6003      	str	r3, [r0, #0]
  402be4:	4770      	bx	lr

00402be6 <usart_enable_rx>:
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_enable_rx(Usart *p_usart)
{
	p_usart->US_CR = US_CR_RXEN;
  402be6:	2310      	movs	r3, #16
  402be8:	6003      	str	r3, [r0, #0]
  402bea:	4770      	bx	lr

00402bec <usart_reset_rx>:
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset_rx(Usart *p_usart)
{
	/* Reset Receiver */
	p_usart->US_CR = US_CR_RSTRX | US_CR_RXDIS;
  402bec:	2324      	movs	r3, #36	; 0x24
  402bee:	6003      	str	r3, [r0, #0]
  402bf0:	4770      	bx	lr

00402bf2 <usart_disable_interrupt>:
 * \param p_usart Pointer to a USART peripheral.
 * \param ul_sources Interrupt sources bit map.
 */
void usart_disable_interrupt(Usart *p_usart, uint32_t ul_sources)
{
	p_usart->US_IDR = ul_sources;
  402bf2:	60c1      	str	r1, [r0, #12]
  402bf4:	4770      	bx	lr

00402bf6 <usart_get_status>:
 *
 * \return The current USART status.
 */
uint32_t usart_get_status(Usart *p_usart)
{
	return p_usart->US_CSR;
  402bf6:	6940      	ldr	r0, [r0, #20]
}
  402bf8:	4770      	bx	lr

00402bfa <usart_write>:
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_write(Usart *p_usart, uint32_t c)
{
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
  402bfa:	6943      	ldr	r3, [r0, #20]
  402bfc:	f013 0f02 	tst.w	r3, #2
		return 1;
	}

	p_usart->US_THR = US_THR_TXCHR(c);
  402c00:	bf1d      	ittte	ne
  402c02:	f3c1 0108 	ubfxne	r1, r1, #0, #9
  402c06:	61c1      	strne	r1, [r0, #28]
	return 0;
  402c08:	2000      	movne	r0, #0
		return 1;
  402c0a:	2001      	moveq	r0, #1
}
  402c0c:	4770      	bx	lr

00402c0e <usart_read>:
 * \retval 0 on success.
 * \retval 1 if no data is available or errors.
 */
uint32_t usart_read(Usart *p_usart, uint32_t *c)
{
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
  402c0e:	6943      	ldr	r3, [r0, #20]
  402c10:	f013 0f01 	tst.w	r3, #1
  402c14:	d005      	beq.n	402c22 <usart_read+0x14>
		return 1;
	}

	/* Read character */
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;
  402c16:	6983      	ldr	r3, [r0, #24]
  402c18:	f3c3 0308 	ubfx	r3, r3, #0, #9
  402c1c:	600b      	str	r3, [r1, #0]

	return 0;
  402c1e:	2000      	movs	r0, #0
  402c20:	4770      	bx	lr
		return 1;
  402c22:	2001      	movs	r0, #1
}
  402c24:	4770      	bx	lr

00402c26 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
  402c26:	e7fe      	b.n	402c26 <Dummy_Handler>

00402c28 <Reset_Handler>:
{
  402c28:	b500      	push	{lr}
  402c2a:	b083      	sub	sp, #12
        if (pSrc != pDest) {
  402c2c:	4b2a      	ldr	r3, [pc, #168]	; (402cd8 <Reset_Handler+0xb0>)
  402c2e:	4a2b      	ldr	r2, [pc, #172]	; (402cdc <Reset_Handler+0xb4>)
  402c30:	429a      	cmp	r2, r3
  402c32:	d010      	beq.n	402c56 <Reset_Handler+0x2e>
                for (; pDest < &_erelocate;) {
  402c34:	4b2a      	ldr	r3, [pc, #168]	; (402ce0 <Reset_Handler+0xb8>)
  402c36:	4a28      	ldr	r2, [pc, #160]	; (402cd8 <Reset_Handler+0xb0>)
  402c38:	429a      	cmp	r2, r3
  402c3a:	d20c      	bcs.n	402c56 <Reset_Handler+0x2e>
  402c3c:	3b01      	subs	r3, #1
  402c3e:	1a9b      	subs	r3, r3, r2
  402c40:	f023 0303 	bic.w	r3, r3, #3
  402c44:	3304      	adds	r3, #4
  402c46:	4413      	add	r3, r2
  402c48:	4924      	ldr	r1, [pc, #144]	; (402cdc <Reset_Handler+0xb4>)
                        *pDest++ = *pSrc++;
  402c4a:	f851 0b04 	ldr.w	r0, [r1], #4
  402c4e:	f842 0b04 	str.w	r0, [r2], #4
                for (; pDest < &_erelocate;) {
  402c52:	429a      	cmp	r2, r3
  402c54:	d1f9      	bne.n	402c4a <Reset_Handler+0x22>
        for (pDest = &_szero; pDest < &_ezero;) {
  402c56:	4b23      	ldr	r3, [pc, #140]	; (402ce4 <Reset_Handler+0xbc>)
  402c58:	4a23      	ldr	r2, [pc, #140]	; (402ce8 <Reset_Handler+0xc0>)
  402c5a:	429a      	cmp	r2, r3
  402c5c:	d20a      	bcs.n	402c74 <Reset_Handler+0x4c>
  402c5e:	3b01      	subs	r3, #1
  402c60:	1a9b      	subs	r3, r3, r2
  402c62:	f023 0303 	bic.w	r3, r3, #3
  402c66:	3304      	adds	r3, #4
  402c68:	4413      	add	r3, r2
                *pDest++ = 0;
  402c6a:	2100      	movs	r1, #0
  402c6c:	f842 1b04 	str.w	r1, [r2], #4
        for (pDest = &_szero; pDest < &_ezero;) {
  402c70:	4293      	cmp	r3, r2
  402c72:	d1fb      	bne.n	402c6c <Reset_Handler+0x44>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
  402c74:	4a1d      	ldr	r2, [pc, #116]	; (402cec <Reset_Handler+0xc4>)
  402c76:	f022 017f 	bic.w	r1, r2, #127	; 0x7f
  402c7a:	4b1d      	ldr	r3, [pc, #116]	; (402cf0 <Reset_Handler+0xc8>)
  402c7c:	6099      	str	r1, [r3, #8]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  402c7e:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
  402c82:	fab3 f383 	clz	r3, r3
  402c86:	095b      	lsrs	r3, r3, #5
  402c88:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
  402c8a:	b672      	cpsid	i
  402c8c:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  402c90:	2100      	movs	r1, #0
  402c92:	4b18      	ldr	r3, [pc, #96]	; (402cf4 <Reset_Handler+0xcc>)
  402c94:	7019      	strb	r1, [r3, #0]
	return flags;
  402c96:	9801      	ldr	r0, [sp, #4]
 */
__always_inline static void fpu_enable(void)
{
	irqflags_t flags;
	flags = cpu_irq_save();
	REG_CPACR |=  (0xFu << 20);
  402c98:	4917      	ldr	r1, [pc, #92]	; (402cf8 <Reset_Handler+0xd0>)
  402c9a:	680b      	ldr	r3, [r1, #0]
  402c9c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
  402ca0:	600b      	str	r3, [r1, #0]
  __ASM volatile ("dsb");
  402ca2:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  402ca6:	f3bf 8f6f 	isb	sy
	if (cpu_irq_is_enabled_flags(flags))
  402caa:	b128      	cbz	r0, 402cb8 <Reset_Handler+0x90>
		cpu_irq_enable();
  402cac:	2101      	movs	r1, #1
  402cae:	4b11      	ldr	r3, [pc, #68]	; (402cf4 <Reset_Handler+0xcc>)
  402cb0:	7019      	strb	r1, [r3, #0]
  __ASM volatile ("dmb");
  402cb2:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  402cb6:	b662      	cpsie	i
	if (((uint32_t) pSrc >= IRAM_ADDR) && ((uint32_t) pSrc < IRAM_ADDR + IRAM_SIZE)) {
  402cb8:	f102 4260 	add.w	r2, r2, #3758096384	; 0xe0000000
  402cbc:	f5b2 3f20 	cmp.w	r2, #163840	; 0x28000
  402cc0:	d204      	bcs.n	402ccc <Reset_Handler+0xa4>
		SCB->VTOR |= 1 << SCB_VTOR_TBLBASE_Pos;
  402cc2:	4a0b      	ldr	r2, [pc, #44]	; (402cf0 <Reset_Handler+0xc8>)
  402cc4:	6893      	ldr	r3, [r2, #8]
  402cc6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
  402cca:	6093      	str	r3, [r2, #8]
	__libc_init_array();
  402ccc:	4b0b      	ldr	r3, [pc, #44]	; (402cfc <Reset_Handler+0xd4>)
  402cce:	4798      	blx	r3
        main();
  402cd0:	4b0b      	ldr	r3, [pc, #44]	; (402d00 <Reset_Handler+0xd8>)
  402cd2:	4798      	blx	r3
  402cd4:	e7fe      	b.n	402cd4 <Reset_Handler+0xac>
  402cd6:	bf00      	nop
  402cd8:	20000000 	.word	0x20000000
  402cdc:	00403200 	.word	0x00403200
  402ce0:	20000950 	.word	0x20000950
  402ce4:	20000c0c 	.word	0x20000c0c
  402ce8:	20000950 	.word	0x20000950
  402cec:	00400000 	.word	0x00400000
  402cf0:	e000ed00 	.word	0xe000ed00
  402cf4:	20000520 	.word	0x20000520
  402cf8:	e000ed88 	.word	0xe000ed88
  402cfc:	00402f11 	.word	0x00402f11
  402d00:	00402d15 	.word	0x00402d15

00402d04 <SysTick_Handler>:


volatile uint32_t g_ul_ms_ticks = 0;
void SysTick_Handler(void)
{
	g_ul_ms_ticks++;
  402d04:	4a02      	ldr	r2, [pc, #8]	; (402d10 <SysTick_Handler+0xc>)
  402d06:	6813      	ldr	r3, [r2, #0]
  402d08:	3301      	adds	r3, #1
  402d0a:	6013      	str	r3, [r2, #0]
  402d0c:	4770      	bx	lr
  402d0e:	bf00      	nop
  402d10:	20000b84 	.word	0x20000b84

00402d14 <main>:
	ul_cur_ticks = g_ul_ms_ticks;
	while ((g_ul_ms_ticks - ul_cur_ticks) < ul_dly_ticks);
}

int main (void)
{
  402d14:	b580      	push	{r7, lr}
  402d16:	af00      	add	r7, sp, #0
	//board_init();

	WDT->WDT_MR = WDT_MR_WDDIS;
  402d18:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  402d1c:	4b2e      	ldr	r3, [pc, #184]	; (402dd8 <main+0xc4>)
  402d1e:	605a      	str	r2, [r3, #4]
	app_start_address = *(uint32_t *)(APP_START_ADDRESS + 4);
  402d20:	f244 0304 	movw	r3, #16388	; 0x4004
  402d24:	681a      	ldr	r2, [r3, #0]
	if (app_start_address == 0xFFFFFFFF) {
  402d26:	f1b2 3fff 	cmp.w	r2, #4294967295
  402d2a:	d017      	beq.n	402d5c <main+0x48>
	if(RSTC->RSTC_SR & RSTC_SR_RSTTYP_GENERAL_RST)
  402d2c:	4b2b      	ldr	r3, [pc, #172]	; (402ddc <main+0xc8>)
  402d2e:	685b      	ldr	r3, [r3, #4]
		if (BOOT_DOUBLE_TAP_DATA == DOUBLE_TAP_MAGIC)
  402d30:	4b2b      	ldr	r3, [pc, #172]	; (402de0 <main+0xcc>)
  402d32:	6819      	ldr	r1, [r3, #0]
  402d34:	4b2b      	ldr	r3, [pc, #172]	; (402de4 <main+0xd0>)
  402d36:	4299      	cmp	r1, r3
  402d38:	d042      	beq.n	402dc0 <main+0xac>
		BOOT_DOUBLE_TAP_DATA = DOUBLE_TAP_MAGIC;
  402d3a:	492a      	ldr	r1, [pc, #168]	; (402de4 <main+0xd0>)
  402d3c:	4b28      	ldr	r3, [pc, #160]	; (402de0 <main+0xcc>)
  402d3e:	6019      	str	r1, [r3, #0]
  402d40:	4b29      	ldr	r3, [pc, #164]	; (402de8 <main+0xd4>)
		for (uint32_t i=0; i<(125000*4); i++) /* 500ms */
  402d42:	3b01      	subs	r3, #1
  402d44:	d1fd      	bne.n	402d42 <main+0x2e>
		BOOT_DOUBLE_TAP_DATA = 0;
  402d46:	2100      	movs	r1, #0
  402d48:	4b25      	ldr	r3, [pc, #148]	; (402de0 <main+0xcc>)
  402d4a:	6019      	str	r1, [r3, #0]
	__set_MSP(*(uint32_t *) APP_START_ADDRESS);
  402d4c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
  __ASM volatile ("MSR msp, %0\n" : : "r" (topOfMainStack) : "sp");
  402d50:	6819      	ldr	r1, [r3, #0]
  402d52:	f381 8808 	msr	MSP, r1
	SCB->VTOR = ((uint32_t) APP_START_ADDRESS & SCB_VTOR_TBLOFF_Msk);
  402d56:	4925      	ldr	r1, [pc, #148]	; (402dec <main+0xd8>)
  402d58:	608b      	str	r3, [r1, #8]
	asm("bx %0"::"r"(app_start_address));
  402d5a:	4710      	bx	r2

	check_start_application();

	udc_start();
  402d5c:	4b24      	ldr	r3, [pc, #144]	; (402df0 <main+0xdc>)
  402d5e:	4798      	blx	r3

	//system_init_flash(120000000);
	flash_init(FLASH_ACCESS_MODE_128, 5);  //Max FWS (flash wait state) value is 5 for SAMG55 - allows 120Mhz read timings using 6 cycles
  402d60:	2105      	movs	r1, #5
  402d62:	2000      	movs	r0, #0
  402d64:	4b23      	ldr	r3, [pc, #140]	; (402df4 <main+0xe0>)
  402d66:	4798      	blx	r3

	if (SysTick_Config(SystemCoreClock / 1000)) { while (1); } // Set Systick to 1ms interval, common to all SAM3 variants
  402d68:	4b23      	ldr	r3, [pc, #140]	; (402df8 <main+0xe4>)
  402d6a:	681b      	ldr	r3, [r3, #0]
  402d6c:	4a23      	ldr	r2, [pc, #140]	; (402dfc <main+0xe8>)
  402d6e:	fba2 2303 	umull	r2, r3, r2, r3
  402d72:	099b      	lsrs	r3, r3, #6
    must contain a vendor-specific implementation of this function.

 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1) > SysTick_LOAD_RELOAD_Msk)  return (1);      /* Reload value impossible */
  402d74:	3b01      	subs	r3, #1
  402d76:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
  402d7a:	d225      	bcs.n	402dc8 <main+0xb4>

  SysTick->LOAD  = ticks - 1;                                  /* set reload register */
  402d7c:	4a20      	ldr	r2, [pc, #128]	; (402e00 <main+0xec>)
  402d7e:	6053      	str	r3, [r2, #4]
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  402d80:	21f0      	movs	r1, #240	; 0xf0
  402d82:	4b1a      	ldr	r3, [pc, #104]	; (402dec <main+0xd8>)
  402d84:	f883 1023 	strb.w	r1, [r3, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1<<__NVIC_PRIO_BITS) - 1);  /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0;                                          /* Load the SysTick Counter Value */
  402d88:	2300      	movs	r3, #0
  402d8a:	6093      	str	r3, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
  402d8c:	2307      	movs	r3, #7
  402d8e:	6013      	str	r3, [r2, #0]

	BLINK_PORT->PIO_OER = BLINK_PIN;
  402d90:	2240      	movs	r2, #64	; 0x40
  402d92:	4b1c      	ldr	r3, [pc, #112]	; (402e04 <main+0xf0>)
  402d94:	611a      	str	r2, [r3, #16]

	/* This skeleton code simply sets the LED to the state of the button. */
	while (1) {
		#ifdef CONF_USBCDC_INTERFACE_SUPPORT
		/* Check if a USB enumeration has succeeded and com port was opened */
		if(main_b_cdc_enable) {
  402d96:	4d1c      	ldr	r5, [pc, #112]	; (402e08 <main+0xf4>)
			}
		}
		#endif
		/* Is button pressed? */
		//udi_cdc_putc('R');
		BLINK_PORT->PIO_CODR = BLINK_PIN;
  402d98:	461c      	mov	r4, r3
  402d9a:	4610      	mov	r0, r2
	ul_cur_ticks = g_ul_ms_ticks;
  402d9c:	4a1b      	ldr	r2, [pc, #108]	; (402e0c <main+0xf8>)
		if(main_b_cdc_enable) {
  402d9e:	782b      	ldrb	r3, [r5, #0]
  402da0:	b99b      	cbnz	r3, 402dca <main+0xb6>
		BLINK_PORT->PIO_CODR = BLINK_PIN;
  402da2:	6360      	str	r0, [r4, #52]	; 0x34
	ul_cur_ticks = g_ul_ms_ticks;
  402da4:	6811      	ldr	r1, [r2, #0]
	while ((g_ul_ms_ticks - ul_cur_ticks) < ul_dly_ticks);
  402da6:	6813      	ldr	r3, [r2, #0]
  402da8:	1a5b      	subs	r3, r3, r1
  402daa:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
  402dae:	d3fa      	bcc.n	402da6 <main+0x92>
		mdelay(500);
		BLINK_PORT->PIO_SODR = BLINK_PIN;
  402db0:	6320      	str	r0, [r4, #48]	; 0x30
	ul_cur_ticks = g_ul_ms_ticks;
  402db2:	6811      	ldr	r1, [r2, #0]
	while ((g_ul_ms_ticks - ul_cur_ticks) < ul_dly_ticks);
  402db4:	6813      	ldr	r3, [r2, #0]
  402db6:	1a5b      	subs	r3, r3, r1
  402db8:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
  402dbc:	d3fa      	bcc.n	402db4 <main+0xa0>
  402dbe:	e7ee      	b.n	402d9e <main+0x8a>
			BOOT_DOUBLE_TAP_DATA = 0;
  402dc0:	2200      	movs	r2, #0
  402dc2:	4b07      	ldr	r3, [pc, #28]	; (402de0 <main+0xcc>)
  402dc4:	601a      	str	r2, [r3, #0]
  402dc6:	e7c9      	b.n	402d5c <main+0x48>
  402dc8:	e7fe      	b.n	402dc8 <main+0xb4>
			sam_ba_monitor_init(SAM_BA_INTERFACE_USBCDC);
  402dca:	2000      	movs	r0, #0
  402dcc:	4b10      	ldr	r3, [pc, #64]	; (402e10 <main+0xfc>)
  402dce:	4798      	blx	r3
				sam_ba_monitor_run();
  402dd0:	4c10      	ldr	r4, [pc, #64]	; (402e14 <main+0x100>)
  402dd2:	47a0      	blx	r4
  402dd4:	e7fd      	b.n	402dd2 <main+0xbe>
  402dd6:	bf00      	nop
  402dd8:	400e1450 	.word	0x400e1450
  402ddc:	400e1400 	.word	0x400e1400
  402de0:	20027ffc 	.word	0x20027ffc
  402de4:	07738135 	.word	0x07738135
  402de8:	0007a120 	.word	0x0007a120
  402dec:	e000ed00 	.word	0xe000ed00
  402df0:	00400eed 	.word	0x00400eed
  402df4:	004001b5 	.word	0x004001b5
  402df8:	20000524 	.word	0x20000524
  402dfc:	10624dd3 	.word	0x10624dd3
  402e00:	e000e010 	.word	0xe000e010
  402e04:	400e0e00 	.word	0x400e0e00
  402e08:	20000b88 	.word	0x20000b88
  402e0c:	20000b84 	.word	0x20000b84
  402e10:	004001cd 	.word	0x004001cd
  402e14:	20000001 	.word	0x20000001

00402e18 <main_suspend_action>:
		} */
	}
}

void main_suspend_action(void)
{
  402e18:	4770      	bx	lr

00402e1a <main_resume_action>:

}

void main_resume_action(void)
{
  402e1a:	4770      	bx	lr

00402e1c <main_sof_action>:

}

void main_sof_action(void)
{
  402e1c:	4770      	bx	lr
	...

00402e20 <main_cdc_enable>:
}


bool main_cdc_enable(uint8_t port)
{
	main_b_cdc_enable = true;
  402e20:	2001      	movs	r0, #1
  402e22:	4b01      	ldr	r3, [pc, #4]	; (402e28 <main_cdc_enable+0x8>)
  402e24:	7018      	strb	r0, [r3, #0]
	return true;
}
  402e26:	4770      	bx	lr
  402e28:	20000b88 	.word	0x20000b88

00402e2c <FLEXCOM7_Handler>:
#endif

static sam_usart_opt_t usart_options;

ISR(USART_HANDLER)
{
  402e2c:	b510      	push	{r4, lr}
  402e2e:	b082      	sub	sp, #8
	uint32_t sr = usart_get_status(USART_BASE);
  402e30:	4823      	ldr	r0, [pc, #140]	; (402ec0 <FLEXCOM7_Handler+0x94>)
  402e32:	4b24      	ldr	r3, [pc, #144]	; (402ec4 <FLEXCOM7_Handler+0x98>)
  402e34:	4798      	blx	r3
  402e36:	4604      	mov	r4, r0
	if (sr & US_CSR_RXRDY) {
  402e38:	f010 0f01 	tst.w	r0, #1
  402e3c:	d104      	bne.n	402e48 <FLEXCOM7_Handler+0x1c>
		}
		ui_com_tx_stop();
		return;
	}

	if (sr & US_CSR_TXRDY) {
  402e3e:	f010 0f02 	tst.w	r0, #2
  402e42:	d125      	bne.n	402e90 <FLEXCOM7_Handler+0x64>
			usart_disable_tx(USART_BASE);
			usart_disable_interrupt(USART_BASE, US_IDR_TXRDY);
			ui_com_rx_stop();
		}
	}
}
  402e44:	b002      	add	sp, #8
  402e46:	bd10      	pop	{r4, pc}
		ui_com_tx_start();
  402e48:	4b1f      	ldr	r3, [pc, #124]	; (402ec8 <FLEXCOM7_Handler+0x9c>)
  402e4a:	4798      	blx	r3
		bool b_error = usart_read(USART_BASE, &value) ||
  402e4c:	a901      	add	r1, sp, #4
  402e4e:	481c      	ldr	r0, [pc, #112]	; (402ec0 <FLEXCOM7_Handler+0x94>)
  402e50:	4b1e      	ldr	r3, [pc, #120]	; (402ecc <FLEXCOM7_Handler+0xa0>)
  402e52:	4798      	blx	r3
  402e54:	b960      	cbnz	r0, 402e70 <FLEXCOM7_Handler+0x44>
		if (b_error) {
  402e56:	f414 7fe0 	tst.w	r4, #448	; 0x1c0
  402e5a:	d109      	bne.n	402e70 <FLEXCOM7_Handler+0x44>
		if (!udi_cdc_is_tx_ready()) {
  402e5c:	4b1c      	ldr	r3, [pc, #112]	; (402ed0 <FLEXCOM7_Handler+0xa4>)
  402e5e:	4798      	blx	r3
  402e60:	b990      	cbnz	r0, 402e88 <FLEXCOM7_Handler+0x5c>
			udi_cdc_signal_overrun();
  402e62:	4b1c      	ldr	r3, [pc, #112]	; (402ed4 <FLEXCOM7_Handler+0xa8>)
  402e64:	4798      	blx	r3
			ui_com_overflow();
  402e66:	4b1c      	ldr	r3, [pc, #112]	; (402ed8 <FLEXCOM7_Handler+0xac>)
  402e68:	4798      	blx	r3
		ui_com_tx_stop();
  402e6a:	4b1c      	ldr	r3, [pc, #112]	; (402edc <FLEXCOM7_Handler+0xb0>)
  402e6c:	4798      	blx	r3
  402e6e:	e7e9      	b.n	402e44 <FLEXCOM7_Handler+0x18>
			usart_reset_rx(USART_BASE);
  402e70:	4c13      	ldr	r4, [pc, #76]	; (402ec0 <FLEXCOM7_Handler+0x94>)
  402e72:	4620      	mov	r0, r4
  402e74:	4b1a      	ldr	r3, [pc, #104]	; (402ee0 <FLEXCOM7_Handler+0xb4>)
  402e76:	4798      	blx	r3
			usart_enable_rx(USART_BASE);
  402e78:	4620      	mov	r0, r4
  402e7a:	4b1a      	ldr	r3, [pc, #104]	; (402ee4 <FLEXCOM7_Handler+0xb8>)
  402e7c:	4798      	blx	r3
			udi_cdc_signal_framing_error();
  402e7e:	4b1a      	ldr	r3, [pc, #104]	; (402ee8 <FLEXCOM7_Handler+0xbc>)
  402e80:	4798      	blx	r3
			ui_com_error();
  402e82:	4b1a      	ldr	r3, [pc, #104]	; (402eec <FLEXCOM7_Handler+0xc0>)
  402e84:	4798      	blx	r3
  402e86:	e7e9      	b.n	402e5c <FLEXCOM7_Handler+0x30>
			udi_cdc_putc(value);
  402e88:	9801      	ldr	r0, [sp, #4]
  402e8a:	4b19      	ldr	r3, [pc, #100]	; (402ef0 <FLEXCOM7_Handler+0xc4>)
  402e8c:	4798      	blx	r3
  402e8e:	e7ec      	b.n	402e6a <FLEXCOM7_Handler+0x3e>
		if (udi_cdc_is_rx_ready()) {
  402e90:	4b18      	ldr	r3, [pc, #96]	; (402ef4 <FLEXCOM7_Handler+0xc8>)
  402e92:	4798      	blx	r3
  402e94:	b950      	cbnz	r0, 402eac <FLEXCOM7_Handler+0x80>
			usart_disable_tx(USART_BASE);
  402e96:	4c0a      	ldr	r4, [pc, #40]	; (402ec0 <FLEXCOM7_Handler+0x94>)
  402e98:	4620      	mov	r0, r4
  402e9a:	4b17      	ldr	r3, [pc, #92]	; (402ef8 <FLEXCOM7_Handler+0xcc>)
  402e9c:	4798      	blx	r3
			usart_disable_interrupt(USART_BASE, US_IDR_TXRDY);
  402e9e:	2102      	movs	r1, #2
  402ea0:	4620      	mov	r0, r4
  402ea2:	4b16      	ldr	r3, [pc, #88]	; (402efc <FLEXCOM7_Handler+0xd0>)
  402ea4:	4798      	blx	r3
			ui_com_rx_stop();
  402ea6:	4b16      	ldr	r3, [pc, #88]	; (402f00 <FLEXCOM7_Handler+0xd4>)
  402ea8:	4798      	blx	r3
  402eaa:	e7cb      	b.n	402e44 <FLEXCOM7_Handler+0x18>
			ui_com_rx_start();
  402eac:	4b15      	ldr	r3, [pc, #84]	; (402f04 <FLEXCOM7_Handler+0xd8>)
  402eae:	4798      	blx	r3
			int c = udi_cdc_getc();
  402eb0:	4b15      	ldr	r3, [pc, #84]	; (402f08 <FLEXCOM7_Handler+0xdc>)
  402eb2:	4798      	blx	r3
			usart_write(USART_BASE, c);
  402eb4:	4601      	mov	r1, r0
  402eb6:	4802      	ldr	r0, [pc, #8]	; (402ec0 <FLEXCOM7_Handler+0x94>)
  402eb8:	4b14      	ldr	r3, [pc, #80]	; (402f0c <FLEXCOM7_Handler+0xe0>)
  402eba:	4798      	blx	r3
  402ebc:	e7c2      	b.n	402e44 <FLEXCOM7_Handler+0x18>
  402ebe:	bf00      	nop
  402ec0:	40034200 	.word	0x40034200
  402ec4:	00402bf7 	.word	0x00402bf7
  402ec8:	004002ad 	.word	0x004002ad
  402ecc:	00402c0f 	.word	0x00402c0f
  402ed0:	00400bcd 	.word	0x00400bcd
  402ed4:	004006a5 	.word	0x004006a5
  402ed8:	004002b3 	.word	0x004002b3
  402edc:	004002af 	.word	0x004002af
  402ee0:	00402bed 	.word	0x00402bed
  402ee4:	00402be7 	.word	0x00402be7
  402ee8:	00400691 	.word	0x00400691
  402eec:	004002b1 	.word	0x004002b1
  402ef0:	00400c79 	.word	0x00400c79
  402ef4:	004008c9 	.word	0x004008c9
  402ef8:	00402be1 	.word	0x00402be1
  402efc:	00402bf3 	.word	0x00402bf3
  402f00:	004002ab 	.word	0x004002ab
  402f04:	004002a9 	.word	0x004002a9
  402f08:	00400995 	.word	0x00400995
  402f0c:	00402bfb 	.word	0x00402bfb

00402f10 <__libc_init_array>:
  402f10:	b570      	push	{r4, r5, r6, lr}
  402f12:	4e0f      	ldr	r6, [pc, #60]	; (402f50 <__libc_init_array+0x40>)
  402f14:	4d0f      	ldr	r5, [pc, #60]	; (402f54 <__libc_init_array+0x44>)
  402f16:	1b76      	subs	r6, r6, r5
  402f18:	10b6      	asrs	r6, r6, #2
  402f1a:	bf18      	it	ne
  402f1c:	2400      	movne	r4, #0
  402f1e:	d005      	beq.n	402f2c <__libc_init_array+0x1c>
  402f20:	3401      	adds	r4, #1
  402f22:	f855 3b04 	ldr.w	r3, [r5], #4
  402f26:	4798      	blx	r3
  402f28:	42a6      	cmp	r6, r4
  402f2a:	d1f9      	bne.n	402f20 <__libc_init_array+0x10>
  402f2c:	4e0a      	ldr	r6, [pc, #40]	; (402f58 <__libc_init_array+0x48>)
  402f2e:	4d0b      	ldr	r5, [pc, #44]	; (402f5c <__libc_init_array+0x4c>)
  402f30:	1b76      	subs	r6, r6, r5
  402f32:	f000 f953 	bl	4031dc <_init>
  402f36:	10b6      	asrs	r6, r6, #2
  402f38:	bf18      	it	ne
  402f3a:	2400      	movne	r4, #0
  402f3c:	d006      	beq.n	402f4c <__libc_init_array+0x3c>
  402f3e:	3401      	adds	r4, #1
  402f40:	f855 3b04 	ldr.w	r3, [r5], #4
  402f44:	4798      	blx	r3
  402f46:	42a6      	cmp	r6, r4
  402f48:	d1f9      	bne.n	402f3e <__libc_init_array+0x2e>
  402f4a:	bd70      	pop	{r4, r5, r6, pc}
  402f4c:	bd70      	pop	{r4, r5, r6, pc}
  402f4e:	bf00      	nop
  402f50:	004031e8 	.word	0x004031e8
  402f54:	004031e8 	.word	0x004031e8
  402f58:	004031f0 	.word	0x004031f0
  402f5c:	004031e8 	.word	0x004031e8

00402f60 <memcpy>:
  402f60:	4684      	mov	ip, r0
  402f62:	ea41 0300 	orr.w	r3, r1, r0
  402f66:	f013 0303 	ands.w	r3, r3, #3
  402f6a:	d16d      	bne.n	403048 <memcpy+0xe8>
  402f6c:	3a40      	subs	r2, #64	; 0x40
  402f6e:	d341      	bcc.n	402ff4 <memcpy+0x94>
  402f70:	f851 3b04 	ldr.w	r3, [r1], #4
  402f74:	f840 3b04 	str.w	r3, [r0], #4
  402f78:	f851 3b04 	ldr.w	r3, [r1], #4
  402f7c:	f840 3b04 	str.w	r3, [r0], #4
  402f80:	f851 3b04 	ldr.w	r3, [r1], #4
  402f84:	f840 3b04 	str.w	r3, [r0], #4
  402f88:	f851 3b04 	ldr.w	r3, [r1], #4
  402f8c:	f840 3b04 	str.w	r3, [r0], #4
  402f90:	f851 3b04 	ldr.w	r3, [r1], #4
  402f94:	f840 3b04 	str.w	r3, [r0], #4
  402f98:	f851 3b04 	ldr.w	r3, [r1], #4
  402f9c:	f840 3b04 	str.w	r3, [r0], #4
  402fa0:	f851 3b04 	ldr.w	r3, [r1], #4
  402fa4:	f840 3b04 	str.w	r3, [r0], #4
  402fa8:	f851 3b04 	ldr.w	r3, [r1], #4
  402fac:	f840 3b04 	str.w	r3, [r0], #4
  402fb0:	f851 3b04 	ldr.w	r3, [r1], #4
  402fb4:	f840 3b04 	str.w	r3, [r0], #4
  402fb8:	f851 3b04 	ldr.w	r3, [r1], #4
  402fbc:	f840 3b04 	str.w	r3, [r0], #4
  402fc0:	f851 3b04 	ldr.w	r3, [r1], #4
  402fc4:	f840 3b04 	str.w	r3, [r0], #4
  402fc8:	f851 3b04 	ldr.w	r3, [r1], #4
  402fcc:	f840 3b04 	str.w	r3, [r0], #4
  402fd0:	f851 3b04 	ldr.w	r3, [r1], #4
  402fd4:	f840 3b04 	str.w	r3, [r0], #4
  402fd8:	f851 3b04 	ldr.w	r3, [r1], #4
  402fdc:	f840 3b04 	str.w	r3, [r0], #4
  402fe0:	f851 3b04 	ldr.w	r3, [r1], #4
  402fe4:	f840 3b04 	str.w	r3, [r0], #4
  402fe8:	f851 3b04 	ldr.w	r3, [r1], #4
  402fec:	f840 3b04 	str.w	r3, [r0], #4
  402ff0:	3a40      	subs	r2, #64	; 0x40
  402ff2:	d2bd      	bcs.n	402f70 <memcpy+0x10>
  402ff4:	3230      	adds	r2, #48	; 0x30
  402ff6:	d311      	bcc.n	40301c <memcpy+0xbc>
  402ff8:	f851 3b04 	ldr.w	r3, [r1], #4
  402ffc:	f840 3b04 	str.w	r3, [r0], #4
  403000:	f851 3b04 	ldr.w	r3, [r1], #4
  403004:	f840 3b04 	str.w	r3, [r0], #4
  403008:	f851 3b04 	ldr.w	r3, [r1], #4
  40300c:	f840 3b04 	str.w	r3, [r0], #4
  403010:	f851 3b04 	ldr.w	r3, [r1], #4
  403014:	f840 3b04 	str.w	r3, [r0], #4
  403018:	3a10      	subs	r2, #16
  40301a:	d2ed      	bcs.n	402ff8 <memcpy+0x98>
  40301c:	320c      	adds	r2, #12
  40301e:	d305      	bcc.n	40302c <memcpy+0xcc>
  403020:	f851 3b04 	ldr.w	r3, [r1], #4
  403024:	f840 3b04 	str.w	r3, [r0], #4
  403028:	3a04      	subs	r2, #4
  40302a:	d2f9      	bcs.n	403020 <memcpy+0xc0>
  40302c:	3204      	adds	r2, #4
  40302e:	d008      	beq.n	403042 <memcpy+0xe2>
  403030:	07d2      	lsls	r2, r2, #31
  403032:	bf1c      	itt	ne
  403034:	f811 3b01 	ldrbne.w	r3, [r1], #1
  403038:	f800 3b01 	strbne.w	r3, [r0], #1
  40303c:	d301      	bcc.n	403042 <memcpy+0xe2>
  40303e:	880b      	ldrh	r3, [r1, #0]
  403040:	8003      	strh	r3, [r0, #0]
  403042:	4660      	mov	r0, ip
  403044:	4770      	bx	lr
  403046:	bf00      	nop
  403048:	2a08      	cmp	r2, #8
  40304a:	d313      	bcc.n	403074 <memcpy+0x114>
  40304c:	078b      	lsls	r3, r1, #30
  40304e:	d08d      	beq.n	402f6c <memcpy+0xc>
  403050:	f010 0303 	ands.w	r3, r0, #3
  403054:	d08a      	beq.n	402f6c <memcpy+0xc>
  403056:	f1c3 0304 	rsb	r3, r3, #4
  40305a:	1ad2      	subs	r2, r2, r3
  40305c:	07db      	lsls	r3, r3, #31
  40305e:	bf1c      	itt	ne
  403060:	f811 3b01 	ldrbne.w	r3, [r1], #1
  403064:	f800 3b01 	strbne.w	r3, [r0], #1
  403068:	d380      	bcc.n	402f6c <memcpy+0xc>
  40306a:	f831 3b02 	ldrh.w	r3, [r1], #2
  40306e:	f820 3b02 	strh.w	r3, [r0], #2
  403072:	e77b      	b.n	402f6c <memcpy+0xc>
  403074:	3a04      	subs	r2, #4
  403076:	d3d9      	bcc.n	40302c <memcpy+0xcc>
  403078:	3a01      	subs	r2, #1
  40307a:	f811 3b01 	ldrb.w	r3, [r1], #1
  40307e:	f800 3b01 	strb.w	r3, [r0], #1
  403082:	d2f9      	bcs.n	403078 <memcpy+0x118>
  403084:	780b      	ldrb	r3, [r1, #0]
  403086:	7003      	strb	r3, [r0, #0]
  403088:	784b      	ldrb	r3, [r1, #1]
  40308a:	7043      	strb	r3, [r0, #1]
  40308c:	788b      	ldrb	r3, [r1, #2]
  40308e:	7083      	strb	r3, [r0, #2]
  403090:	4660      	mov	r0, ip
  403092:	4770      	bx	lr

00403094 <register_fini>:
  403094:	4b02      	ldr	r3, [pc, #8]	; (4030a0 <register_fini+0xc>)
  403096:	b113      	cbz	r3, 40309e <register_fini+0xa>
  403098:	4802      	ldr	r0, [pc, #8]	; (4030a4 <register_fini+0x10>)
  40309a:	f000 b805 	b.w	4030a8 <atexit>
  40309e:	4770      	bx	lr
  4030a0:	00000000 	.word	0x00000000
  4030a4:	004030b5 	.word	0x004030b5

004030a8 <atexit>:
  4030a8:	2300      	movs	r3, #0
  4030aa:	4601      	mov	r1, r0
  4030ac:	461a      	mov	r2, r3
  4030ae:	4618      	mov	r0, r3
  4030b0:	f000 b81a 	b.w	4030e8 <__register_exitproc>

004030b4 <__libc_fini_array>:
  4030b4:	b538      	push	{r3, r4, r5, lr}
  4030b6:	4c0a      	ldr	r4, [pc, #40]	; (4030e0 <__libc_fini_array+0x2c>)
  4030b8:	4d0a      	ldr	r5, [pc, #40]	; (4030e4 <__libc_fini_array+0x30>)
  4030ba:	1b64      	subs	r4, r4, r5
  4030bc:	10a4      	asrs	r4, r4, #2
  4030be:	d00a      	beq.n	4030d6 <__libc_fini_array+0x22>
  4030c0:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
  4030c4:	3b01      	subs	r3, #1
  4030c6:	eb05 0583 	add.w	r5, r5, r3, lsl #2
  4030ca:	3c01      	subs	r4, #1
  4030cc:	f855 3904 	ldr.w	r3, [r5], #-4
  4030d0:	4798      	blx	r3
  4030d2:	2c00      	cmp	r4, #0
  4030d4:	d1f9      	bne.n	4030ca <__libc_fini_array+0x16>
  4030d6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  4030da:	f000 b889 	b.w	4031f0 <_fini>
  4030de:	bf00      	nop
  4030e0:	00403200 	.word	0x00403200
  4030e4:	004031fc 	.word	0x004031fc

004030e8 <__register_exitproc>:
  4030e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  4030ec:	4c25      	ldr	r4, [pc, #148]	; (403184 <__register_exitproc+0x9c>)
  4030ee:	6825      	ldr	r5, [r4, #0]
  4030f0:	f8d5 4148 	ldr.w	r4, [r5, #328]	; 0x148
  4030f4:	4606      	mov	r6, r0
  4030f6:	4688      	mov	r8, r1
  4030f8:	4692      	mov	sl, r2
  4030fa:	4699      	mov	r9, r3
  4030fc:	b3c4      	cbz	r4, 403170 <__register_exitproc+0x88>
  4030fe:	6860      	ldr	r0, [r4, #4]
  403100:	281f      	cmp	r0, #31
  403102:	dc17      	bgt.n	403134 <__register_exitproc+0x4c>
  403104:	1c43      	adds	r3, r0, #1
  403106:	b176      	cbz	r6, 403126 <__register_exitproc+0x3e>
  403108:	eb04 0580 	add.w	r5, r4, r0, lsl #2
  40310c:	2201      	movs	r2, #1
  40310e:	f8c5 a088 	str.w	sl, [r5, #136]	; 0x88
  403112:	f8d4 1188 	ldr.w	r1, [r4, #392]	; 0x188
  403116:	4082      	lsls	r2, r0
  403118:	4311      	orrs	r1, r2
  40311a:	2e02      	cmp	r6, #2
  40311c:	f8c4 1188 	str.w	r1, [r4, #392]	; 0x188
  403120:	f8c5 9108 	str.w	r9, [r5, #264]	; 0x108
  403124:	d01e      	beq.n	403164 <__register_exitproc+0x7c>
  403126:	3002      	adds	r0, #2
  403128:	6063      	str	r3, [r4, #4]
  40312a:	f844 8020 	str.w	r8, [r4, r0, lsl #2]
  40312e:	2000      	movs	r0, #0
  403130:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  403134:	4b14      	ldr	r3, [pc, #80]	; (403188 <__register_exitproc+0xa0>)
  403136:	b303      	cbz	r3, 40317a <__register_exitproc+0x92>
  403138:	f44f 70c8 	mov.w	r0, #400	; 0x190
  40313c:	f3af 8000 	nop.w
  403140:	4604      	mov	r4, r0
  403142:	b1d0      	cbz	r0, 40317a <__register_exitproc+0x92>
  403144:	f8d5 3148 	ldr.w	r3, [r5, #328]	; 0x148
  403148:	2700      	movs	r7, #0
  40314a:	e880 0088 	stmia.w	r0, {r3, r7}
  40314e:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
  403152:	4638      	mov	r0, r7
  403154:	2301      	movs	r3, #1
  403156:	f8c4 7188 	str.w	r7, [r4, #392]	; 0x188
  40315a:	f8c4 718c 	str.w	r7, [r4, #396]	; 0x18c
  40315e:	2e00      	cmp	r6, #0
  403160:	d0e1      	beq.n	403126 <__register_exitproc+0x3e>
  403162:	e7d1      	b.n	403108 <__register_exitproc+0x20>
  403164:	f8d4 118c 	ldr.w	r1, [r4, #396]	; 0x18c
  403168:	430a      	orrs	r2, r1
  40316a:	f8c4 218c 	str.w	r2, [r4, #396]	; 0x18c
  40316e:	e7da      	b.n	403126 <__register_exitproc+0x3e>
  403170:	f505 74a6 	add.w	r4, r5, #332	; 0x14c
  403174:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
  403178:	e7c1      	b.n	4030fe <__register_exitproc+0x16>
  40317a:	f04f 30ff 	mov.w	r0, #4294967295
  40317e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  403182:	bf00      	nop
  403184:	004031d8 	.word	0x004031d8
  403188:	00000000 	.word	0x00000000

0040318c <RomBOOT_Version>:
  40318c:	36312e32 00000000 00000d0a 00000076     2.16........v...
  40319c:	00000020 20677541 32203920 00373130      ...Aug  9 2017.
  4031ac:	323a3931 39333a39 00000000 0000003e     19:29:39....>...

004031bc <usbcdc_if>:
  4031bc:	00400c79 00400995 004008c9 00400d3d     y.@...@...@.=.@.
  4031cc:	00400a61 00400d3d 00400b29              a.@.=.@.).@.

004031d8 <_global_impure_ptr>:
  4031d8:	20000528                                (.. 

004031dc <_init>:
  4031dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4031de:	bf00      	nop
  4031e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
  4031e2:	bc08      	pop	{r3}
  4031e4:	469e      	mov	lr, r3
  4031e6:	4770      	bx	lr

004031e8 <__init_array_start>:
  4031e8:	00403095 	.word	0x00403095

004031ec <__frame_dummy_init_array_entry>:
  4031ec:	0040016d                                m.@.

004031f0 <_fini>:
  4031f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4031f2:	bf00      	nop
  4031f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
  4031f6:	bc08      	pop	{r3}
  4031f8:	469e      	mov	lr, r3
  4031fa:	4770      	bx	lr

004031fc <__fini_array_start>:
  4031fc:	00400149 	.word	0x00400149

Disassembly of section .relocate:

20000000 <sam_ba_monitor_run>:
 * \brief This function starts the SAM-BA monitor.
 */
__no_inline
RAMFUNC
void sam_ba_monitor_run(void)
{
20000000:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
20000004:	b082      	sub	sp, #8
20000006:	af00      	add	r7, sp, #0
	ptr_data = NULL;
20000008:	2200      	movs	r2, #0
2000000a:	4b9a      	ldr	r3, [pc, #616]	; (20000274 <sam_ba_monitor_run+0x274>)
2000000c:	601a      	str	r2, [r3, #0]
	command = 'z';
2000000e:	227a      	movs	r2, #122	; 0x7a
20000010:	4b99      	ldr	r3, [pc, #612]	; (20000278 <sam_ba_monitor_run+0x278>)
20000012:	701a      	strb	r2, [r3, #0]

	// Start waiting some cmd
	while (1)
	{
		length = ptr_monitor_if->getdata(data, SIZEBUFMAX);
20000014:	f8df 82b0 	ldr.w	r8, [pc, #688]	; 200002c8 <sam_ba_monitor_run+0x2c8>
20000018:	4e98      	ldr	r6, [pc, #608]	; (2000027c <sam_ba_monitor_run+0x27c>)
		ptr = data;
		for (i = 0; i < length; i++)
2000001a:	4c99      	ldr	r4, [pc, #612]	; (20000280 <sam_ba_monitor_run+0x280>)
		length = ptr_monitor_if->getdata(data, SIZEBUFMAX);
2000001c:	6833      	ldr	r3, [r6, #0]
2000001e:	691b      	ldr	r3, [r3, #16]
20000020:	2140      	movs	r1, #64	; 0x40
20000022:	4640      	mov	r0, r8
20000024:	4798      	blx	r3
20000026:	4b97      	ldr	r3, [pc, #604]	; (20000284 <sam_ba_monitor_run+0x284>)
20000028:	6018      	str	r0, [r3, #0]
		ptr = data;
2000002a:	4b97      	ldr	r3, [pc, #604]	; (20000288 <sam_ba_monitor_run+0x288>)
2000002c:	f8c3 8000 	str.w	r8, [r3]
		for (i = 0; i < length; i++)
20000030:	2300      	movs	r3, #0
20000032:	6023      	str	r3, [r4, #0]
20000034:	2800      	cmp	r0, #0
20000036:	d0f1      	beq.n	2000001c <sam_ba_monitor_run+0x1c>
						ptr_monitor_if->putdata("\n\r", 2);
					}
					if (command == 'S')
					{
						//Check if some data are remaining in the "data" buffer
						if(length>i)
20000038:	4d92      	ldr	r5, [pc, #584]	; (20000284 <sam_ba_monitor_run+0x284>)
2000003a:	e0c5      	b.n	200001c8 <sam_ba_monitor_run+0x1c8>
					if (b_terminal_mode)
2000003c:	4b93      	ldr	r3, [pc, #588]	; (2000028c <sam_ba_monitor_run+0x28c>)
2000003e:	781b      	ldrb	r3, [r3, #0]
20000040:	2b00      	cmp	r3, #0
20000042:	d164      	bne.n	2000010e <sam_ba_monitor_run+0x10e>
					if (command == 'S')
20000044:	4b8c      	ldr	r3, [pc, #560]	; (20000278 <sam_ba_monitor_run+0x278>)
20000046:	781b      	ldrb	r3, [r3, #0]
20000048:	2b53      	cmp	r3, #83	; 0x53
2000004a:	d066      	beq.n	2000011a <sam_ba_monitor_run+0x11a>
						if(j<current_number)
							ptr_monitor_if->getdata_xmd(ptr_data, current_number-j);

						__asm("nop");
					}
					else if (command == 'R')
2000004c:	2b52      	cmp	r3, #82	; 0x52
2000004e:	f000 80d7 	beq.w	20000200 <sam_ba_monitor_run+0x200>
					{
						ptr_monitor_if->putdata_xmd(ptr_data, current_number);
					}
					else if (command == 'O')
20000052:	2b4f      	cmp	r3, #79	; 0x4f
20000054:	f000 80dc 	beq.w	20000210 <sam_ba_monitor_run+0x210>
					{
						*ptr_data = (char) current_number;
					}
					else if (command == 'H')
20000058:	2b48      	cmp	r3, #72	; 0x48
2000005a:	f000 80df 	beq.w	2000021c <sam_ba_monitor_run+0x21c>
					{
						*((uint16_t *) ptr_data) = (uint16_t) current_number;
					}
					else if (command == 'W')
2000005e:	2b57      	cmp	r3, #87	; 0x57
20000060:	f000 80e2 	beq.w	20000228 <sam_ba_monitor_run+0x228>
						else
						{
							ptr_monitor_if->putdata("no error\n", 9);
						}
					} */
					else if (command == 'o')
20000064:	2b6f      	cmp	r3, #111	; 0x6f
20000066:	f000 80ff 	beq.w	20000268 <sam_ba_monitor_run+0x268>
					{
						sam_ba_putdata_term(ptr_data, 1);
					}
					else if (command == 'h')
2000006a:	2b68      	cmp	r3, #104	; 0x68
2000006c:	f000 812e 	beq.w	200002cc <sam_ba_monitor_run+0x2cc>
					{
						current_number = *((uint16_t *) ptr_data);
						sam_ba_putdata_term((uint8_t*) &current_number, 2);
					}
					else if (command == 'w')
20000070:	2b77      	cmp	r3, #119	; 0x77
20000072:	f000 8134 	beq.w	200002de <sam_ba_monitor_run+0x2de>
					{
						current_number = *((uint32_t *) ptr_data);
						sam_ba_putdata_term((uint8_t*) &current_number, 4);
					}
					else if (command == 'G')
20000076:	2b47      	cmp	r3, #71	; 0x47
20000078:	f000 813a 	beq.w	200002f0 <sam_ba_monitor_run+0x2f0>
						call_applet(current_number);
						/* Rebase the Stack Pointer */
						__set_MSP(sp);
						cpu_irq_enable();
					}
					else if (command == 'T')
2000007c:	2b54      	cmp	r3, #84	; 0x54
2000007e:	f000 8146 	beq.w	2000030e <sam_ba_monitor_run+0x30e>
					{
						b_terminal_mode = 1;
						ptr_monitor_if->putdata("\n\r", 2);
					}
					else if (command == 'N')
20000082:	2b4e      	cmp	r3, #78	; 0x4e
20000084:	f000 814c 	beq.w	20000320 <sam_ba_monitor_run+0x320>
						{
							ptr_monitor_if->putdata("\n\r", 2);
						}
						b_terminal_mode = 0;
					}
					else if (command == 'V')
20000088:	2b56      	cmp	r3, #86	; 0x56
2000008a:	f040 8087 	bne.w	2000019c <sam_ba_monitor_run+0x19c>
					{
						ptr_monitor_if->putdata("v", 1);
2000008e:	6833      	ldr	r3, [r6, #0]
20000090:	68db      	ldr	r3, [r3, #12]
20000092:	2101      	movs	r1, #1
20000094:	487e      	ldr	r0, [pc, #504]	; (20000290 <sam_ba_monitor_run+0x290>)
20000096:	4798      	blx	r3
						ptr_monitor_if->putdata((uint8_t *) RomBOOT_Version,
20000098:	6833      	ldr	r3, [r6, #0]
2000009a:	68db      	ldr	r3, [r3, #12]
2000009c:	2104      	movs	r1, #4
2000009e:	487d      	ldr	r0, [pc, #500]	; (20000294 <sam_ba_monitor_run+0x294>)
200000a0:	4798      	blx	r3
								strlen(RomBOOT_Version));
						ptr_monitor_if->putdata(" ", 1);
200000a2:	6833      	ldr	r3, [r6, #0]
200000a4:	68db      	ldr	r3, [r3, #12]
200000a6:	2101      	movs	r1, #1
200000a8:	487b      	ldr	r0, [pc, #492]	; (20000298 <sam_ba_monitor_run+0x298>)
200000aa:	4798      	blx	r3
						ptr = (uint8_t*) &(__DATE__);
						i = 0;
200000ac:	2300      	movs	r3, #0
200000ae:	6023      	str	r3, [r4, #0]
						while (*ptr++ != '\0')
200000b0:	4a7a      	ldr	r2, [pc, #488]	; (2000029c <sam_ba_monitor_run+0x29c>)
200000b2:	4b75      	ldr	r3, [pc, #468]	; (20000288 <sam_ba_monitor_run+0x288>)
200000b4:	601a      	str	r2, [r3, #0]
200000b6:	461a      	mov	r2, r3
							i++;
200000b8:	6821      	ldr	r1, [r4, #0]
200000ba:	3101      	adds	r1, #1
200000bc:	6021      	str	r1, [r4, #0]
						while (*ptr++ != '\0')
200000be:	6813      	ldr	r3, [r2, #0]
200000c0:	1c58      	adds	r0, r3, #1
200000c2:	6010      	str	r0, [r2, #0]
200000c4:	781b      	ldrb	r3, [r3, #0]
200000c6:	2b00      	cmp	r3, #0
200000c8:	d1f6      	bne.n	200000b8 <sam_ba_monitor_run+0xb8>
						ptr_monitor_if->putdata((uint8_t *) &(__DATE__), i);
200000ca:	6833      	ldr	r3, [r6, #0]
200000cc:	68db      	ldr	r3, [r3, #12]
200000ce:	4874      	ldr	r0, [pc, #464]	; (200002a0 <sam_ba_monitor_run+0x2a0>)
200000d0:	4798      	blx	r3
						ptr_monitor_if->putdata(" ", 1);
200000d2:	6833      	ldr	r3, [r6, #0]
200000d4:	68db      	ldr	r3, [r3, #12]
200000d6:	2101      	movs	r1, #1
200000d8:	486f      	ldr	r0, [pc, #444]	; (20000298 <sam_ba_monitor_run+0x298>)
200000da:	4798      	blx	r3
						i = 0;
200000dc:	2300      	movs	r3, #0
200000de:	6023      	str	r3, [r4, #0]
						ptr = (uint8_t*) &(__TIME__);
						while (*ptr++ != '\0')
200000e0:	4a70      	ldr	r2, [pc, #448]	; (200002a4 <sam_ba_monitor_run+0x2a4>)
200000e2:	4b69      	ldr	r3, [pc, #420]	; (20000288 <sam_ba_monitor_run+0x288>)
200000e4:	601a      	str	r2, [r3, #0]
200000e6:	461a      	mov	r2, r3
							i++;
200000e8:	6821      	ldr	r1, [r4, #0]
200000ea:	3101      	adds	r1, #1
200000ec:	6021      	str	r1, [r4, #0]
						while (*ptr++ != '\0')
200000ee:	6813      	ldr	r3, [r2, #0]
200000f0:	1c58      	adds	r0, r3, #1
200000f2:	6010      	str	r0, [r2, #0]
200000f4:	781b      	ldrb	r3, [r3, #0]
200000f6:	2b00      	cmp	r3, #0
200000f8:	d1f6      	bne.n	200000e8 <sam_ba_monitor_run+0xe8>
						ptr_monitor_if->putdata((uint8_t *) &(__TIME__), i);
200000fa:	6833      	ldr	r3, [r6, #0]
200000fc:	68db      	ldr	r3, [r3, #12]
200000fe:	486a      	ldr	r0, [pc, #424]	; (200002a8 <sam_ba_monitor_run+0x2a8>)
20000100:	4798      	blx	r3
						ptr_monitor_if->putdata("\n\r", 2);
20000102:	6833      	ldr	r3, [r6, #0]
20000104:	68db      	ldr	r3, [r3, #12]
20000106:	2102      	movs	r1, #2
20000108:	4868      	ldr	r0, [pc, #416]	; (200002ac <sam_ba_monitor_run+0x2ac>)
2000010a:	4798      	blx	r3
2000010c:	e046      	b.n	2000019c <sam_ba_monitor_run+0x19c>
						ptr_monitor_if->putdata("\n\r", 2);
2000010e:	6833      	ldr	r3, [r6, #0]
20000110:	68db      	ldr	r3, [r3, #12]
20000112:	2102      	movs	r1, #2
20000114:	4865      	ldr	r0, [pc, #404]	; (200002ac <sam_ba_monitor_run+0x2ac>)
20000116:	4798      	blx	r3
20000118:	e794      	b.n	20000044 <sam_ba_monitor_run+0x44>
						if(length>i)
2000011a:	682b      	ldr	r3, [r5, #0]
2000011c:	6822      	ldr	r2, [r4, #0]
2000011e:	4293      	cmp	r3, r2
20000120:	d92e      	bls.n	20000180 <sam_ba_monitor_run+0x180>
							ptr++;
20000122:	4859      	ldr	r0, [pc, #356]	; (20000288 <sam_ba_monitor_run+0x288>)
20000124:	6801      	ldr	r1, [r0, #0]
20000126:	3101      	adds	r1, #1
20000128:	6001      	str	r1, [r0, #0]
							i++;
2000012a:	3201      	adds	r2, #1
2000012c:	6022      	str	r2, [r4, #0]
							u32tmp=min((length-i),current_number);
2000012e:	1a9b      	subs	r3, r3, r2
20000130:	4a5f      	ldr	r2, [pc, #380]	; (200002b0 <sam_ba_monitor_run+0x2b0>)
20000132:	6812      	ldr	r2, [r2, #0]
20000134:	4293      	cmp	r3, r2
20000136:	bf28      	it	cs
20000138:	4613      	movcs	r3, r2
2000013a:	4a5e      	ldr	r2, [pc, #376]	; (200002b4 <sam_ba_monitor_run+0x2b4>)
2000013c:	6013      	str	r3, [r2, #0]
							for(j=0;j<u32tmp;j++)
2000013e:	2100      	movs	r1, #0
20000140:	4a5d      	ldr	r2, [pc, #372]	; (200002b8 <sam_ba_monitor_run+0x2b8>)
20000142:	7011      	strb	r1, [r2, #0]
20000144:	b1e3      	cbz	r3, 20000180 <sam_ba_monitor_run+0x180>
								*ptr_data = *ptr;
20000146:	494b      	ldr	r1, [pc, #300]	; (20000274 <sam_ba_monitor_run+0x274>)
20000148:	4602      	mov	r2, r0
							for(j=0;j<u32tmp;j++)
2000014a:	f8df e16c 	ldr.w	lr, [pc, #364]	; 200002b8 <sam_ba_monitor_run+0x2b8>
2000014e:	f8df c164 	ldr.w	ip, [pc, #356]	; 200002b4 <sam_ba_monitor_run+0x2b4>
								*ptr_data = *ptr;
20000152:	680b      	ldr	r3, [r1, #0]
20000154:	6810      	ldr	r0, [r2, #0]
20000156:	7800      	ldrb	r0, [r0, #0]
20000158:	7018      	strb	r0, [r3, #0]
								ptr_data++;
2000015a:	680b      	ldr	r3, [r1, #0]
2000015c:	3301      	adds	r3, #1
2000015e:	600b      	str	r3, [r1, #0]
								ptr++;
20000160:	6813      	ldr	r3, [r2, #0]
20000162:	3301      	adds	r3, #1
20000164:	6013      	str	r3, [r2, #0]
								i++;
20000166:	6823      	ldr	r3, [r4, #0]
20000168:	3301      	adds	r3, #1
2000016a:	6023      	str	r3, [r4, #0]
							for(j=0;j<u32tmp;j++)
2000016c:	f89e 0000 	ldrb.w	r0, [lr]
20000170:	3001      	adds	r0, #1
20000172:	b2c0      	uxtb	r0, r0
20000174:	f88e 0000 	strb.w	r0, [lr]
20000178:	f8dc 3000 	ldr.w	r3, [ip]
2000017c:	4298      	cmp	r0, r3
2000017e:	d3e8      	bcc.n	20000152 <sam_ba_monitor_run+0x152>
						i--;
20000180:	6823      	ldr	r3, [r4, #0]
20000182:	3b01      	subs	r3, #1
20000184:	6023      	str	r3, [r4, #0]
						ptr--;
20000186:	4a40      	ldr	r2, [pc, #256]	; (20000288 <sam_ba_monitor_run+0x288>)
20000188:	6813      	ldr	r3, [r2, #0]
2000018a:	3b01      	subs	r3, #1
2000018c:	6013      	str	r3, [r2, #0]
						if(j<current_number)
2000018e:	4b4a      	ldr	r3, [pc, #296]	; (200002b8 <sam_ba_monitor_run+0x2b8>)
20000190:	781b      	ldrb	r3, [r3, #0]
20000192:	4a47      	ldr	r2, [pc, #284]	; (200002b0 <sam_ba_monitor_run+0x2b0>)
20000194:	6811      	ldr	r1, [r2, #0]
20000196:	428b      	cmp	r3, r1
20000198:	d32b      	bcc.n	200001f2 <sam_ba_monitor_run+0x1f2>
						__asm("nop");
2000019a:	bf00      	nop
					}

					command = 'z';
2000019c:	227a      	movs	r2, #122	; 0x7a
2000019e:	4b36      	ldr	r3, [pc, #216]	; (20000278 <sam_ba_monitor_run+0x278>)
200001a0:	701a      	strb	r2, [r3, #0]
					current_number = 0;
200001a2:	2200      	movs	r2, #0
200001a4:	4b42      	ldr	r3, [pc, #264]	; (200002b0 <sam_ba_monitor_run+0x2b0>)
200001a6:	601a      	str	r2, [r3, #0]

					if (b_terminal_mode)
200001a8:	4b38      	ldr	r3, [pc, #224]	; (2000028c <sam_ba_monitor_run+0x28c>)
200001aa:	781b      	ldrb	r3, [r3, #0]
200001ac:	2b00      	cmp	r3, #0
200001ae:	f040 80c4 	bne.w	2000033a <sam_ba_monitor_run+0x33a>
					{
						command = *ptr;
						current_number = 0;
					}
				}
				ptr++;
200001b2:	4a35      	ldr	r2, [pc, #212]	; (20000288 <sam_ba_monitor_run+0x288>)
200001b4:	6813      	ldr	r3, [r2, #0]
200001b6:	3301      	adds	r3, #1
200001b8:	6013      	str	r3, [r2, #0]
		for (i = 0; i < length; i++)
200001ba:	6823      	ldr	r3, [r4, #0]
200001bc:	3301      	adds	r3, #1
200001be:	6023      	str	r3, [r4, #0]
200001c0:	682a      	ldr	r2, [r5, #0]
200001c2:	429a      	cmp	r2, r3
200001c4:	f67f af2a 	bls.w	2000001c <sam_ba_monitor_run+0x1c>
			if (*ptr != 0xff)
200001c8:	4b2f      	ldr	r3, [pc, #188]	; (20000288 <sam_ba_monitor_run+0x288>)
200001ca:	681b      	ldr	r3, [r3, #0]
200001cc:	781b      	ldrb	r3, [r3, #0]
200001ce:	2bff      	cmp	r3, #255	; 0xff
200001d0:	d0f3      	beq.n	200001ba <sam_ba_monitor_run+0x1ba>
				if (*ptr == '#')
200001d2:	2b23      	cmp	r3, #35	; 0x23
200001d4:	f43f af32 	beq.w	2000003c <sam_ba_monitor_run+0x3c>
					if (('0' <= *ptr) && (*ptr <= '9'))
200001d8:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
200001dc:	b2d2      	uxtb	r2, r2
200001de:	2a09      	cmp	r2, #9
200001e0:	f200 80b1 	bhi.w	20000346 <sam_ba_monitor_run+0x346>
						current_number = (current_number << 4) | (*ptr - '0');
200001e4:	4a32      	ldr	r2, [pc, #200]	; (200002b0 <sam_ba_monitor_run+0x2b0>)
200001e6:	6811      	ldr	r1, [r2, #0]
200001e8:	3b30      	subs	r3, #48	; 0x30
200001ea:	ea43 1301 	orr.w	r3, r3, r1, lsl #4
200001ee:	6013      	str	r3, [r2, #0]
200001f0:	e7df      	b.n	200001b2 <sam_ba_monitor_run+0x1b2>
							ptr_monitor_if->getdata_xmd(ptr_data, current_number-j);
200001f2:	6832      	ldr	r2, [r6, #0]
200001f4:	6992      	ldr	r2, [r2, #24]
200001f6:	1ac9      	subs	r1, r1, r3
200001f8:	4b1e      	ldr	r3, [pc, #120]	; (20000274 <sam_ba_monitor_run+0x274>)
200001fa:	6818      	ldr	r0, [r3, #0]
200001fc:	4790      	blx	r2
200001fe:	e7cc      	b.n	2000019a <sam_ba_monitor_run+0x19a>
						ptr_monitor_if->putdata_xmd(ptr_data, current_number);
20000200:	6833      	ldr	r3, [r6, #0]
20000202:	695b      	ldr	r3, [r3, #20]
20000204:	4a2a      	ldr	r2, [pc, #168]	; (200002b0 <sam_ba_monitor_run+0x2b0>)
20000206:	6811      	ldr	r1, [r2, #0]
20000208:	4a1a      	ldr	r2, [pc, #104]	; (20000274 <sam_ba_monitor_run+0x274>)
2000020a:	6810      	ldr	r0, [r2, #0]
2000020c:	4798      	blx	r3
2000020e:	e7c5      	b.n	2000019c <sam_ba_monitor_run+0x19c>
						*ptr_data = (char) current_number;
20000210:	4b18      	ldr	r3, [pc, #96]	; (20000274 <sam_ba_monitor_run+0x274>)
20000212:	681b      	ldr	r3, [r3, #0]
20000214:	4a26      	ldr	r2, [pc, #152]	; (200002b0 <sam_ba_monitor_run+0x2b0>)
20000216:	6812      	ldr	r2, [r2, #0]
20000218:	701a      	strb	r2, [r3, #0]
2000021a:	e7bf      	b.n	2000019c <sam_ba_monitor_run+0x19c>
						*((uint16_t *) ptr_data) = (uint16_t) current_number;
2000021c:	4b15      	ldr	r3, [pc, #84]	; (20000274 <sam_ba_monitor_run+0x274>)
2000021e:	681b      	ldr	r3, [r3, #0]
20000220:	4a23      	ldr	r2, [pc, #140]	; (200002b0 <sam_ba_monitor_run+0x2b0>)
20000222:	6812      	ldr	r2, [r2, #0]
20000224:	801a      	strh	r2, [r3, #0]
20000226:	e7b9      	b.n	2000019c <sam_ba_monitor_run+0x19c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
20000228:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
2000022c:	fab3 f383 	clz	r3, r3
20000230:	095b      	lsrs	r3, r3, #5
20000232:	607b      	str	r3, [r7, #4]
  __ASM volatile ("cpsid i" : : : "memory");
20000234:	b672      	cpsid	i
20000236:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
2000023a:	2200      	movs	r2, #0
2000023c:	4b1f      	ldr	r3, [pc, #124]	; (200002bc <sam_ba_monitor_run+0x2bc>)
2000023e:	701a      	strb	r2, [r3, #0]
	return flags;
20000240:	687a      	ldr	r2, [r7, #4]
						*((int *) ptr_data) = current_number;
20000242:	4b0c      	ldr	r3, [pc, #48]	; (20000274 <sam_ba_monitor_run+0x274>)
20000244:	681b      	ldr	r3, [r3, #0]
20000246:	491a      	ldr	r1, [pc, #104]	; (200002b0 <sam_ba_monitor_run+0x2b0>)
20000248:	6809      	ldr	r1, [r1, #0]
2000024a:	6019      	str	r1, [r3, #0]
						while (!(EFC->EEFC_FSR & EEFC_FSR_FRDY)) { }
2000024c:	4b1c      	ldr	r3, [pc, #112]	; (200002c0 <sam_ba_monitor_run+0x2c0>)
2000024e:	689b      	ldr	r3, [r3, #8]
20000250:	f013 0f01 	tst.w	r3, #1
20000254:	d0fa      	beq.n	2000024c <sam_ba_monitor_run+0x24c>
	if (cpu_irq_is_enabled_flags(flags))
20000256:	2a00      	cmp	r2, #0
20000258:	d0a0      	beq.n	2000019c <sam_ba_monitor_run+0x19c>
		cpu_irq_enable();
2000025a:	2201      	movs	r2, #1
2000025c:	4b17      	ldr	r3, [pc, #92]	; (200002bc <sam_ba_monitor_run+0x2bc>)
2000025e:	701a      	strb	r2, [r3, #0]
20000260:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
20000264:	b662      	cpsie	i
20000266:	e799      	b.n	2000019c <sam_ba_monitor_run+0x19c>
						sam_ba_putdata_term(ptr_data, 1);
20000268:	2101      	movs	r1, #1
2000026a:	4b02      	ldr	r3, [pc, #8]	; (20000274 <sam_ba_monitor_run+0x274>)
2000026c:	6818      	ldr	r0, [r3, #0]
2000026e:	4b15      	ldr	r3, [pc, #84]	; (200002c4 <sam_ba_monitor_run+0x2c4>)
20000270:	4798      	blx	r3
20000272:	e793      	b.n	2000019c <sam_ba_monitor_run+0x19c>
20000274:	20000be0 	.word	0x20000be0
20000278:	20000b98 	.word	0x20000b98
2000027c:	20000be4 	.word	0x20000be4
20000280:	20000b9c 	.word	0x20000b9c
20000284:	20000b90 	.word	0x20000b90
20000288:	20000b94 	.word	0x20000b94
2000028c:	2000096c 	.word	0x2000096c
20000290:	00403198 	.word	0x00403198
20000294:	0040318c 	.word	0x0040318c
20000298:	0040319c 	.word	0x0040319c
2000029c:	004031a1 	.word	0x004031a1
200002a0:	004031a0 	.word	0x004031a0
200002a4:	004031ad 	.word	0x004031ad
200002a8:	004031ac 	.word	0x004031ac
200002ac:	00403194 	.word	0x00403194
200002b0:	20000bec 	.word	0x20000bec
200002b4:	20000bf0 	.word	0x20000bf0
200002b8:	20000b8c 	.word	0x20000b8c
200002bc:	20000520 	.word	0x20000520
200002c0:	400e0a00 	.word	0x400e0a00
200002c4:	004001e1 	.word	0x004001e1
200002c8:	20000ba0 	.word	0x20000ba0
						current_number = *((uint16_t *) ptr_data);
200002cc:	4831      	ldr	r0, [pc, #196]	; (20000394 <sam_ba_monitor_run+0x394>)
200002ce:	4b32      	ldr	r3, [pc, #200]	; (20000398 <sam_ba_monitor_run+0x398>)
200002d0:	681b      	ldr	r3, [r3, #0]
200002d2:	881b      	ldrh	r3, [r3, #0]
200002d4:	6003      	str	r3, [r0, #0]
						sam_ba_putdata_term((uint8_t*) &current_number, 2);
200002d6:	2102      	movs	r1, #2
200002d8:	4b30      	ldr	r3, [pc, #192]	; (2000039c <sam_ba_monitor_run+0x39c>)
200002da:	4798      	blx	r3
200002dc:	e75e      	b.n	2000019c <sam_ba_monitor_run+0x19c>
						current_number = *((uint32_t *) ptr_data);
200002de:	4b2e      	ldr	r3, [pc, #184]	; (20000398 <sam_ba_monitor_run+0x398>)
200002e0:	681b      	ldr	r3, [r3, #0]
200002e2:	681b      	ldr	r3, [r3, #0]
200002e4:	482b      	ldr	r0, [pc, #172]	; (20000394 <sam_ba_monitor_run+0x394>)
200002e6:	6003      	str	r3, [r0, #0]
						sam_ba_putdata_term((uint8_t*) &current_number, 4);
200002e8:	2104      	movs	r1, #4
200002ea:	4b2c      	ldr	r3, [pc, #176]	; (2000039c <sam_ba_monitor_run+0x39c>)
200002ec:	4798      	blx	r3
200002ee:	e755      	b.n	2000019c <sam_ba_monitor_run+0x19c>
						call_applet(current_number);
200002f0:	4b28      	ldr	r3, [pc, #160]	; (20000394 <sam_ba_monitor_run+0x394>)
200002f2:	6818      	ldr	r0, [r3, #0]
200002f4:	4b2a      	ldr	r3, [pc, #168]	; (200003a0 <sam_ba_monitor_run+0x3a0>)
200002f6:	4798      	blx	r3
						__set_MSP(sp);
200002f8:	4b2a      	ldr	r3, [pc, #168]	; (200003a4 <sam_ba_monitor_run+0x3a4>)
200002fa:	681b      	ldr	r3, [r3, #0]
  __ASM volatile ("MSR msp, %0\n" : : "r" (topOfMainStack) : "sp");
200002fc:	f383 8808 	msr	MSP, r3
						cpu_irq_enable();
20000300:	2201      	movs	r2, #1
20000302:	4b29      	ldr	r3, [pc, #164]	; (200003a8 <sam_ba_monitor_run+0x3a8>)
20000304:	701a      	strb	r2, [r3, #0]
20000306:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
2000030a:	b662      	cpsie	i
2000030c:	e746      	b.n	2000019c <sam_ba_monitor_run+0x19c>
						b_terminal_mode = 1;
2000030e:	2201      	movs	r2, #1
20000310:	4b26      	ldr	r3, [pc, #152]	; (200003ac <sam_ba_monitor_run+0x3ac>)
20000312:	701a      	strb	r2, [r3, #0]
						ptr_monitor_if->putdata("\n\r", 2);
20000314:	6833      	ldr	r3, [r6, #0]
20000316:	68db      	ldr	r3, [r3, #12]
20000318:	2102      	movs	r1, #2
2000031a:	4825      	ldr	r0, [pc, #148]	; (200003b0 <sam_ba_monitor_run+0x3b0>)
2000031c:	4798      	blx	r3
2000031e:	e73d      	b.n	2000019c <sam_ba_monitor_run+0x19c>
						if (b_terminal_mode == 0)
20000320:	4b22      	ldr	r3, [pc, #136]	; (200003ac <sam_ba_monitor_run+0x3ac>)
20000322:	781b      	ldrb	r3, [r3, #0]
20000324:	b11b      	cbz	r3, 2000032e <sam_ba_monitor_run+0x32e>
						b_terminal_mode = 0;
20000326:	2200      	movs	r2, #0
20000328:	4b20      	ldr	r3, [pc, #128]	; (200003ac <sam_ba_monitor_run+0x3ac>)
2000032a:	701a      	strb	r2, [r3, #0]
2000032c:	e736      	b.n	2000019c <sam_ba_monitor_run+0x19c>
							ptr_monitor_if->putdata("\n\r", 2);
2000032e:	6833      	ldr	r3, [r6, #0]
20000330:	68db      	ldr	r3, [r3, #12]
20000332:	2102      	movs	r1, #2
20000334:	481e      	ldr	r0, [pc, #120]	; (200003b0 <sam_ba_monitor_run+0x3b0>)
20000336:	4798      	blx	r3
20000338:	e7f5      	b.n	20000326 <sam_ba_monitor_run+0x326>
						ptr_monitor_if->putdata(">", 1);
2000033a:	6833      	ldr	r3, [r6, #0]
2000033c:	68db      	ldr	r3, [r3, #12]
2000033e:	2101      	movs	r1, #1
20000340:	481c      	ldr	r0, [pc, #112]	; (200003b4 <sam_ba_monitor_run+0x3b4>)
20000342:	4798      	blx	r3
20000344:	e735      	b.n	200001b2 <sam_ba_monitor_run+0x1b2>
					else if (('A' <= *ptr) && (*ptr <= 'F'))
20000346:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
2000034a:	b2d2      	uxtb	r2, r2
2000034c:	2a05      	cmp	r2, #5
2000034e:	d806      	bhi.n	2000035e <sam_ba_monitor_run+0x35e>
						current_number = (current_number << 4)
20000350:	4a10      	ldr	r2, [pc, #64]	; (20000394 <sam_ba_monitor_run+0x394>)
20000352:	6811      	ldr	r1, [r2, #0]
								| (*ptr - 'A' + 0xa);
20000354:	3b37      	subs	r3, #55	; 0x37
20000356:	ea43 1301 	orr.w	r3, r3, r1, lsl #4
						current_number = (current_number << 4)
2000035a:	6013      	str	r3, [r2, #0]
2000035c:	e729      	b.n	200001b2 <sam_ba_monitor_run+0x1b2>
					else if (('a' <= *ptr) && (*ptr <= 'f'))
2000035e:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
20000362:	b2d2      	uxtb	r2, r2
20000364:	2a05      	cmp	r2, #5
20000366:	d806      	bhi.n	20000376 <sam_ba_monitor_run+0x376>
						current_number = (current_number << 4)
20000368:	4a0a      	ldr	r2, [pc, #40]	; (20000394 <sam_ba_monitor_run+0x394>)
2000036a:	6811      	ldr	r1, [r2, #0]
								| (*ptr - 'a' + 0xa);
2000036c:	3b57      	subs	r3, #87	; 0x57
2000036e:	ea43 1301 	orr.w	r3, r3, r1, lsl #4
						current_number = (current_number << 4)
20000372:	6013      	str	r3, [r2, #0]
20000374:	e71d      	b.n	200001b2 <sam_ba_monitor_run+0x1b2>
					else if (*ptr == ',')
20000376:	2b2c      	cmp	r3, #44	; 0x2c
20000378:	d005      	beq.n	20000386 <sam_ba_monitor_run+0x386>
						command = *ptr;
2000037a:	4a0f      	ldr	r2, [pc, #60]	; (200003b8 <sam_ba_monitor_run+0x3b8>)
2000037c:	7013      	strb	r3, [r2, #0]
						current_number = 0;
2000037e:	2200      	movs	r2, #0
20000380:	4b04      	ldr	r3, [pc, #16]	; (20000394 <sam_ba_monitor_run+0x394>)
20000382:	601a      	str	r2, [r3, #0]
20000384:	e715      	b.n	200001b2 <sam_ba_monitor_run+0x1b2>
						ptr_data = (uint8_t *) current_number;
20000386:	4b03      	ldr	r3, [pc, #12]	; (20000394 <sam_ba_monitor_run+0x394>)
20000388:	6819      	ldr	r1, [r3, #0]
2000038a:	4a03      	ldr	r2, [pc, #12]	; (20000398 <sam_ba_monitor_run+0x398>)
2000038c:	6011      	str	r1, [r2, #0]
						current_number = 0;
2000038e:	2200      	movs	r2, #0
20000390:	601a      	str	r2, [r3, #0]
20000392:	e70e      	b.n	200001b2 <sam_ba_monitor_run+0x1b2>
20000394:	20000bec 	.word	0x20000bec
20000398:	20000be0 	.word	0x20000be0
2000039c:	004001e1 	.word	0x004001e1
200003a0:	00400275 	.word	0x00400275
200003a4:	20000be8 	.word	0x20000be8
200003a8:	20000520 	.word	0x20000520
200003ac:	2000096c 	.word	0x2000096c
200003b0:	00403194 	.word	0x00403194
200003b4:	004031b8 	.word	0x004031b8
200003b8:	20000b98 	.word	0x20000b98

200003bc <efc_perform_read_sequence>:
__no_inline
RAMFUNC
uint32_t efc_perform_read_sequence(Efc *p_efc,
		uint32_t ul_cmd_st, uint32_t ul_cmd_sp,
		uint32_t *p_ul_buf, uint32_t ul_size)
{
200003bc:	b430      	push	{r4, r5}
200003be:	b082      	sub	sp, #8
200003c0:	9d04      	ldr	r5, [sp, #16]
	uint32_t *p_ul_data = (uint32_t *) READ_BUFF_ADDR;
#else
	return EFC_RC_NOT_SUPPORT;
#endif

	if (p_ul_buf == NULL) {
200003c2:	b35b      	cbz	r3, 2000041c <efc_perform_read_sequence+0x60>
200003c4:	461c      	mov	r4, r3
		return EFC_RC_INVALID;
	}

	p_efc->EEFC_FMR |= (0x1u << 16);
200003c6:	6803      	ldr	r3, [r0, #0]
200003c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
200003cc:	6003      	str	r3, [r0, #0]

	/* Send the Start Read command */
#if (SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || \
	 SAMV71 || SAMV70 || SAMS70 || SAME70)
	p_efc->EEFC_FCR = EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FARG(0)
			| EEFC_FCR_FCMD(ul_cmd_st);
200003ce:	b2c9      	uxtb	r1, r1
200003d0:	f041 41b4 	orr.w	r1, r1, #1509949440	; 0x5a000000
	p_efc->EEFC_FCR = EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FARG(0)
200003d4:	6041      	str	r1, [r0, #4]
#endif
	/* Wait for the FRDY bit in the Flash Programming Status Register
	 * (EEFC_FSR) falls.
	 */
	do {
		ul_status = p_efc->EEFC_FSR;
200003d6:	6883      	ldr	r3, [r0, #8]
200003d8:	9301      	str	r3, [sp, #4]
	} while ((ul_status & EEFC_FSR_FRDY) == EEFC_FSR_FRDY);
200003da:	9b01      	ldr	r3, [sp, #4]
200003dc:	f013 0f01 	tst.w	r3, #1
200003e0:	d1f9      	bne.n	200003d6 <efc_perform_read_sequence+0x1a>

	/* The data is located in the first address of the Flash
	 * memory mapping.
	 */
	for (ul_cnt = 0; ul_cnt < ul_size; ul_cnt++) {
200003e2:	b14d      	cbz	r5, 200003f8 <efc_perform_read_sequence+0x3c>
200003e4:	4621      	mov	r1, r4
200003e6:	eb04 0385 	add.w	r3, r4, r5, lsl #2
200003ea:	4c0d      	ldr	r4, [pc, #52]	; (20000420 <efc_perform_read_sequence+0x64>)
		p_ul_buf[ul_cnt] = p_ul_data[ul_cnt];
200003ec:	f854 5f04 	ldr.w	r5, [r4, #4]!
200003f0:	f841 5b04 	str.w	r5, [r1], #4
	for (ul_cnt = 0; ul_cnt < ul_size; ul_cnt++) {
200003f4:	4299      	cmp	r1, r3
200003f6:	d1f9      	bne.n	200003ec <efc_perform_read_sequence+0x30>
	/* To stop the read mode */
	p_efc->EEFC_FCR =
#if (SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || \
	 SAMV71 || SAMV70 || SAMS70 || SAME70)
			EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FARG(0) |
			EEFC_FCR_FCMD(ul_cmd_sp);
200003f8:	b2d2      	uxtb	r2, r2
			EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FARG(0) |
200003fa:	f042 42b4 	orr.w	r2, r2, #1509949440	; 0x5a000000
	p_efc->EEFC_FCR =
200003fe:	6042      	str	r2, [r0, #4]
#endif
	/* Wait for the FRDY bit in the Flash Programming Status Register (EEFC_FSR)
	 * rises.
	 */
	do {
		ul_status = p_efc->EEFC_FSR;
20000400:	6883      	ldr	r3, [r0, #8]
20000402:	9301      	str	r3, [sp, #4]
	} while ((ul_status & EEFC_FSR_FRDY) != EEFC_FSR_FRDY);
20000404:	9b01      	ldr	r3, [sp, #4]
20000406:	f013 0f01 	tst.w	r3, #1
2000040a:	d0f9      	beq.n	20000400 <efc_perform_read_sequence+0x44>

	p_efc->EEFC_FMR &= ~(0x1u << 16);
2000040c:	6803      	ldr	r3, [r0, #0]
2000040e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
20000412:	6003      	str	r3, [r0, #0]

	return EFC_RC_OK;
20000414:	2000      	movs	r0, #0
}
20000416:	b002      	add	sp, #8
20000418:	bc30      	pop	{r4, r5}
2000041a:	4770      	bx	lr
		return EFC_RC_INVALID;
2000041c:	2002      	movs	r0, #2
2000041e:	e7fa      	b.n	20000416 <efc_perform_read_sequence+0x5a>
20000420:	003ffffc 	.word	0x003ffffc

20000424 <efc_write_fmr>:
 */
__no_inline
RAMFUNC
void efc_write_fmr(Efc *p_efc, uint32_t ul_fmr)
{
	p_efc->EEFC_FMR = ul_fmr;
20000424:	6001      	str	r1, [r0, #0]
20000426:	4770      	bx	lr

20000428 <efc_perform_fcr>:
 * \return The current status.
 */
__no_inline
RAMFUNC
uint32_t efc_perform_fcr(Efc *p_efc, uint32_t ul_fcr)
{
20000428:	b082      	sub	sp, #8
	volatile uint32_t ul_status;

	p_efc->EEFC_FCR = ul_fcr;
2000042a:	6041      	str	r1, [r0, #4]
	do {
		ul_status = p_efc->EEFC_FSR;
2000042c:	6883      	ldr	r3, [r0, #8]
2000042e:	9301      	str	r3, [sp, #4]
	} while ((ul_status & EEFC_FSR_FRDY) != EEFC_FSR_FRDY);
20000430:	9b01      	ldr	r3, [sp, #4]
20000432:	f013 0f01 	tst.w	r3, #1
20000436:	d0f9      	beq.n	2000042c <efc_perform_fcr+0x4>

	return (ul_status & EEFC_ERROR_FLAGS);
20000438:	9801      	ldr	r0, [sp, #4]
}
2000043a:	f000 000e 	and.w	r0, r0, #14
2000043e:	b002      	add	sp, #8
20000440:	4770      	bx	lr
20000442:	bf00      	nop

20000444 <udi_api_cdc_comm>:
20000444:	03c1 0040 0305 0040 0339 0040 0335 0040     ..@...@.9.@.5.@.
20000454:	0000 0000                                   ....

20000458 <udi_api_cdc_data>:
20000458:	07d9 0040 0315 0040 0331 0040 0335 0040     ..@...@.1.@.5.@.
20000468:	059d 0040                                   ..@.

2000046c <udc_config>:
2000046c:	04c4 2000 0478 2000 0000 0000               ... x.. ....

20000478 <udc_config_fs>:
20000478:	0480 2000 04d8 2000                         ... ... 

20000480 <udc_desc_fs>:
20000480:	0209 0043 0102 c000 0932 0004 0100 0202     ..C.....2.......
20000490:	0001 2405 1000 0401 0224 0502 0624 0100     ...$....$...$...
200004a0:	2405 0301 0701 8305 4003 1000 0409 0001     .$.......@......
200004b0:	0a02 0000 0700 8105 4002 0000 0507 0202     .........@......
200004c0:	0040 0000                                   @...

200004c4 <udc_device_desc>:
200004c4:	0112 0200 0002 4000 2341 003d 0100 0201     .......@A#=.....
200004d4:	0100 0000                                   ....

200004d8 <udi_apis>:
200004d8:	0444 2000 0458 2000                         D.. X.. 

200004e0 <udc_string_desc>:
200004e0:	0300 0000 0000 0000 0000 0000 0000 0000     ................
	...

20000500 <udc_string_desc_languageid>:
20000500:	0304 0409                                   ....

20000504 <udc_string_manufacturer_name>:
20000504:	5441 454d 204c 5341 0046 0000               ATMEL ASF...

20000510 <udc_string_product_name>:
20000510:	4443 2043 6956 7472 6175 206c 6f43 006d     CDC Virtual Com.

20000520 <g_interrupt_enabled>:
20000520:	0001 0000                                   ....

20000524 <SystemCoreClock>:
20000524:	1200 007a                                   ..z.

20000528 <impure_data>:
20000528:	0000 0000 0814 2000 087c 2000 08e4 2000     ....... |.. ... 
	...
200005d0:	0001 0000 0000 0000 330e abcd 1234 e66d     .........3..4.m.
200005e0:	deec 0005 000b 0000 0000 0000 0000 0000     ................
	...
